File,Function,Kind,TypeAnnotation
"benchmarks/BenchmarkHelper.jl","benchmark_excluded","mtsig","Tuple{Any}"
"benchmarks/BenchmarkHelper.jl","benchmark_files","mtsig","Tuple{}"
"benchmarks/BenchmarkHelper.jl","<NA-name>","mtsig","Tuple{Any}"
"benchmarks/BenchmarkHelper.jl","<NA-name>","mtsig","Tuple{Any}"
"benchmarks/benchmarks.jl","constrained_test","mtsig","Tuple{Any}"
"benchmarks/benchmarks.jl","gdemo","mtsig","Tuple{Any, Any}"
"benchmarks/benchmarks.jl","target","mtsig","Tuple{Any}"
"benchmarks/benchmarks.jl","mdemo","mtsig","Tuple{Any, Any}"
"benchmarks/nuts/hlr.jl","hlr_nuts","mtsig","Tuple{Any, Any, Any}"
"benchmarks/nuts/lr.jl","lr_nuts","mtsig","Tuple{Any, Any, Any}"
"benchmarks/nuts/lr_helper.jl","readlrdata","mtsig","Tuple{}"
"benchmarks/nuts/sv_nuts.jl","sv_nuts","mtsig","Tuple{Any, Any, Type{T}} where T"
"docs/make-utils.jl","find_yaml_header","mtsig","Tuple{Any}"
"docs/make-utils.jl","remove_yaml","mtsig","Tuple{Any, Any}"
"docs/make-utils.jl","<NA-name>","mtsig","Tuple{Any}"
"docs/make-utils.jl","tidy_api","mtsig","Tuple{Any}"
"docs/make-utils.jl","<NA-name>","mtsig","Tuple{Any}"
"docs/make-utils.jl","fix_header_1","mtsig","Tuple{Any}"
"docs/make-utils.jl","<NA-name>","mtsig","Tuple{Any}"
"docs/make-utils.jl","fix_image_path","mtsig","Tuple{Any}"
"docs/make-utils.jl","<NA-name>","mtsig","Tuple{Any}"
"docs/make-utils.jl","preprocess_markdown","mtsig","Tuple{Any}"
"docs/make-utils.jl","postprocess_markdown","mtsig","Tuple{Any, Any, Any}"
"docs/make-utils.jl","<NA-name>","mtsig","Tuple{Any}"
"docs/make-utils.jl","<NA-name>","mtsig","Tuple{Any}"
"docs/make-utils.jl","with_clean_docs","mtsig","Tuple{Any, Any, Any}"
"docs/make-utils.jl","copy_tutorial","mtsig","Tuple{Any}"
"docs/make-utils.jl","with_baseurl","mtsig","Tuple{Any, Any}"
"docs/make-utils.jl","<NA-name>","mtsig","Tuple{Any}"
"docs/make-utils.jl","<NA-name>","mtsig","Tuple{Any}"
"docs/make.jl","<NA-name>","mtsig","Tuple{Any, Any}"
"docs/make.jl","<NA-name>","mtsig","Tuple{}"
"docs/src/using-turing/gen-sampler-viz.jl","gdemo","mtsig","Tuple{Any}"
"docs/src/using-turing/gen-sampler-viz.jl","evaluate","mtsig","Tuple{Any, Any}"
"docs/src/using-turing/gen-sampler-viz.jl","plot_sampler","mtsig","Tuple{Any, Any}"
"src/Turing.jl","setprogress!","mtsig","Tuple{Bool}"
"src/contrib/inference/dynamichmc.jl","DynamicNUTS","mtsig","Tuple{Vararg{Any}}"
"src/contrib/inference/dynamichmc.jl","DynamicNUTS","mtsig","Tuple{Vararg{Symbol}} where AD"
"src/contrib/inference/dynamichmc.jl","DynamicPPL.getspace","mtsig","Tuple{DynamicNUTS{<:Any, space}} where space"
"src/contrib/inference/dynamichmc.jl","DynamicHMC.dimension","mtsig","Tuple{DynamicHMCLogDensity}"
"src/contrib/inference/dynamichmc.jl","DynamicHMC.capabilities","mtsig","Tuple{Type{<:DynamicHMCLogDensity}}"
"src/contrib/inference/dynamichmc.jl","DynamicHMC.logdensity_and_gradient","mtsig","Tuple{DynamicHMCLogDensity, AbstractVector}"
"src/contrib/inference/dynamichmc.jl","gibbs_state","mtsig","Tuple{Model, Sampler{<:DynamicNUTS}, DynamicNUTSState, AbstractVarInfo}"
"src/contrib/inference/dynamichmc.jl","DynamicPPL.initialsampler","mtsig","Tuple{Sampler{<:DynamicNUTS}}"
"src/contrib/inference/dynamichmc.jl","DynamicPPL.initialstep","mtsig","Tuple{AbstractRNG, Model, Sampler{<:DynamicNUTS}, AbstractVarInfo, Vararg{Any}}"
"src/contrib/inference/dynamichmc.jl","AbstractMCMC.step","mtsig","Tuple{AbstractRNG, Model, Sampler{<:DynamicNUTS}, DynamicNUTSState, Vararg{Any}}"
"src/contrib/inference/sghmc.jl","SGHMC","mtsig","Tuple{Vararg{Any}, Vararg{Any}}"
"src/contrib/inference/sghmc.jl","SGHMC","mtsig","Tuple{Vararg{Symbol}, Real, Real} where AD"
"src/contrib/inference/sghmc.jl","DynamicPPL.initialstep","mtsig","Tuple{Random.AbstractRNG, Model, Sampler{<:SGHMC}, AbstractVarInfo, Vararg{Any}}"
"src/contrib/inference/sghmc.jl","AbstractMCMC.step","mtsig","Tuple{Random.AbstractRNG, Model, Sampler{<:SGHMC}, SGHMCState, Vararg{Any}}"
"src/contrib/inference/sghmc.jl","PolynomialStepsize","mtsig","Tuple{T, T, T} where T"
"src/contrib/inference/sghmc.jl","PolynomialStepsize","mtsig","Tuple{T, T, T} where T <: Real"
"src/contrib/inference/sghmc.jl","PolynomialStepsize","mtsig","Tuple{Real, Real, Real}"
"src/contrib/inference/sghmc.jl","f::PolynomialStepsize","mtsig","Tuple{Int}"
"src/contrib/inference/sghmc.jl","SGLD","mtsig","Tuple{Vararg{Any}, Vararg{Any}}"
"src/contrib/inference/sghmc.jl","SGLD","mtsig","Tuple{Vararg{Symbol}, Any} where AD"
"src/contrib/inference/sghmc.jl","SGLDTransition","mtsig","Tuple{AbstractVarInfo, Any}"
"src/contrib/inference/sghmc.jl","metadata","mtsig","Tuple{SGLDTransition}"
"src/contrib/inference/sghmc.jl","DynamicPPL.getlogp","mtsig","Tuple{SGLDTransition}"
"src/contrib/inference/sghmc.jl","DynamicPPL.initialstep","mtsig","Tuple{Random.AbstractRNG, Model, Sampler{<:SGLD}, AbstractVarInfo, Vararg{Any}}"
"src/contrib/inference/sghmc.jl","AbstractMCMC.step","mtsig","Tuple{Random.AbstractRNG, Model, Sampler{<:SGLD}, SGLDState, Vararg{Any}}"
"src/essential/Essential.jl","__init__","mtsig","Tuple{}"
"src/essential/ad.jl","setadbackend","mtsig","Tuple{Symbol}"
"src/essential/ad.jl","setadbackend","mtsig","Tuple{Val}"
"src/essential/ad.jl","_setadbackend","mtsig","Tuple{Val{:forwarddiff}}"
"src/essential/ad.jl","_setadbackend","mtsig","Tuple{Val{:tracker}}"
"src/essential/ad.jl","_setadbackend","mtsig","Tuple{Val{:zygote}}"
"src/essential/ad.jl","setadsafe","mtsig","Tuple{Bool}"
"src/essential/ad.jl","setchunksize","mtsig","Tuple{Int}"
"src/essential/ad.jl","getchunksize","mtsig","Tuple{Type{<:ForwardDiffAD{chunk}}} where chunk"
"src/essential/ad.jl","getchunksize","mtsig","Tuple{Type{<:Sampler{Talg}}} where Talg"
"src/essential/ad.jl","getchunksize","mtsig","Tuple{Type{SampleFromPrior}}"
"src/essential/ad.jl","ADBackend","mtsig","Tuple{}"
"src/essential/ad.jl","ADBackend","mtsig","Tuple{Symbol}"
"src/essential/ad.jl","ADBackend","mtsig","Tuple{Val{:forwarddiff}}"
"src/essential/ad.jl","ADBackend","mtsig","Tuple{Val{:tracker}}"
"src/essential/ad.jl","ADBackend","mtsig","Tuple{Val{:zygote}}"
"src/essential/ad.jl","ADBackend","mtsig","Tuple{Val}"
"src/essential/ad.jl","getADbackend","mtsig","Tuple{Sampler}"
"src/essential/ad.jl","getADbackend","mtsig","Tuple{SampleFromPrior}"
"src/essential/ad.jl","gradient_logp","mtsig","Tuple{AbstractVector{<:Real}, VarInfo, Model, AbstractSampler, DynamicPPL.AbstractContext}"
"src/essential/ad.jl","gradient_logp","mtsig","Tuple{ForwardDiffAD, AbstractVector{<:Real}, VarInfo, Model, AbstractSampler, DynamicPPL.AbstractContext}"
"src/essential/ad.jl","f","mtsig","Tuple{Any}"
"src/essential/ad.jl","gradient_logp","mtsig","Tuple{TrackerAD, AbstractVector{<:Real}, VarInfo, Model, AbstractSampler, DynamicPPL.AbstractContext}"
"src/essential/ad.jl","f","mtsig","Tuple{Any}"
"src/essential/ad.jl","gradient_logp","mtsig","Tuple{ZygoteAD, AbstractVector{<:Real}, VarInfo, Model, AbstractSampler, DynamicPPL.AbstractContext}"
"src/essential/ad.jl","f","mtsig","Tuple{Any}"
"src/essential/ad.jl","verifygrad","mtsig","Tuple{AbstractVector{<:Real}}"
"src/essential/ad.jl","\$F","mtsig","Tuple{PDMatDistribution, Tracker.TrackedArray}"
"src/essential/ad.jl","\$F","mtsig","Tuple{PDMatDistribution, Tracker.TrackedArray}"
"src/essential/ad.jl","<NA-name>","mtsig","Tuple{Any}"
"src/essential/ad.jl","<NA-name>","mtsig","Tuple{Any}"
"src/essential/container.jl","TracedModel","mtsig","Tuple{Model, AbstractSampler, AbstractVarInfo}"
"src/essential/container.jl","_get_evaluator","mtsig","(Tuple{Model{_F, argnames}, Any, Any} where argnames) where _F"
"src/essential/container.jl","Base.copy","mtsig","Tuple{AdvancedPS.Trace{<:TracedModel}}"
"src/essential/container.jl","AdvancedPS.advance!","mtsig","Tuple{AdvancedPS.Trace{<:TracedModel}}"
"src/essential/container.jl","AdvancedPS.delete_retained!","mtsig","Tuple{TracedModel}"
"src/essential/container.jl","AdvancedPS.reset_model","mtsig","Tuple{TracedModel}"
"src/essential/container.jl","AdvancedPS.reset_logprob!","mtsig","Tuple{TracedModel}"
"src/essential/container.jl","Libtask.TapedTask","mtsig","Tuple{TracedModel}"
"src/essential/container.jl","Libtask.TapedTask","mtsig","Tuple{TracedModel, Random.AbstractRNG}"
"src/essential/compat/reversediff.jl","setrdcache","mtsig","Tuple{Bool}"
"src/essential/compat/reversediff.jl","setrdcache","mtsig","Tuple{Val{false}}"
"src/essential/compat/reversediff.jl","setrdcache","mtsig","Tuple{Val}"
"src/essential/compat/reversediff.jl","getrdcache","mtsig","Tuple{}"
"src/essential/compat/reversediff.jl","ADBackend","mtsig","Tuple{Val{:reversediff}}"
"src/essential/compat/reversediff.jl","_setadbackend","mtsig","Tuple{Val{:reversediff}}"
"src/essential/compat/reversediff.jl","gradient_logp","mtsig","Tuple{ReverseDiffAD{false}, AbstractVector{<:Real}, VarInfo, Model, AbstractSampler, DynamicPPL.AbstractContext}"
"src/essential/compat/reversediff.jl","f","mtsig","Tuple{Any}"
"src/essential/compat/reversediff.jl","tape","mtsig","Tuple{Any, Any}"
"src/essential/compat/reversediff.jl","taperesult","mtsig","Tuple{Any, Any}"
"src/essential/compat/reversediff.jl","setrdcache","mtsig","Tuple{Val{true}}"
"src/essential/compat/reversediff.jl","emptyrdcache","mtsig","Tuple{}"
"src/essential/compat/reversediff.jl","gradient_logp","mtsig","Tuple{ReverseDiffAD{true}, AbstractVector{<:Real}, VarInfo, Model, AbstractSampler, DynamicPPL.AbstractContext}"
"src/essential/compat/reversediff.jl","f","mtsig","Tuple{Any}"
"src/essential/compat/reversediff.jl","Memoization._get!","mtsig","Tuple{Any, Dict, Tuple{Tuple{RDTapeKey}, Any}}"
"src/essential/compat/reversediff.jl","memoized_taperesult","mtsig","Tuple{Any, Any}"
"src/essential/compat/reversediff.jl","memoized_taperesult","mtsig","Tuple{RDTapeKey}"
"src/essential/compat/reversediff.jl","compiledtape","mtsig","Tuple{Any, Any}"
"src/inference/AdvancedSMC.jl","SMC","mtsig","Tuple{Any, Tuple}"
"src/inference/AdvancedSMC.jl","SMC","mtsig","Tuple{Any, Real, Tuple}"
"src/inference/AdvancedSMC.jl","SMC","mtsig","Tuple{Real, Tuple}"
"src/inference/AdvancedSMC.jl","SMC","mtsig","Tuple{Vararg{Symbol}}"
"src/inference/AdvancedSMC.jl","SMC","mtsig","Tuple{Tuple}"
"src/inference/AdvancedSMC.jl","SMCTransition","mtsig","Tuple{AbstractVarInfo, Any}"
"src/inference/AdvancedSMC.jl","metadata","mtsig","Tuple{SMCTransition}"
"src/inference/AdvancedSMC.jl","DynamicPPL.getlogp","mtsig","Tuple{SMCTransition}"
"src/inference/AdvancedSMC.jl","getlogevidence","mtsig","Tuple{Any, Sampler{<:SMC}, SMCState}"
"src/inference/AdvancedSMC.jl","AbstractMCMC.sample","mtsig","Tuple{AbstractRNG, AbstractModel, Sampler{<:SMC}, Integer, Any, Any, Any, Vararg{Any}}"
"src/inference/AdvancedSMC.jl","DynamicPPL.initialstep","mtsig","Tuple{AbstractRNG, AbstractModel, Sampler{<:SMC}, AbstractVarInfo, Int, Vararg{Any}}"
"src/inference/AdvancedSMC.jl","AbstractMCMC.step","mtsig","Tuple{AbstractRNG, AbstractModel, Sampler{<:SMC}, SMCState, Vararg{Any}}"
"src/inference/AdvancedSMC.jl","PG","mtsig","Tuple{Int, Any, Tuple}"
"src/inference/AdvancedSMC.jl","PG","mtsig","Tuple{Int, Any, Real, Tuple}"
"src/inference/AdvancedSMC.jl","PG","mtsig","Tuple{Int, Real, Tuple}"
"src/inference/AdvancedSMC.jl","PG","mtsig","Tuple{Int, Vararg{Symbol}}"
"src/inference/AdvancedSMC.jl","PG","mtsig","Tuple{Int, Tuple}"
"src/inference/AdvancedSMC.jl","PGTransition","mtsig","Tuple{AbstractVarInfo, Any}"
"src/inference/AdvancedSMC.jl","metadata","mtsig","Tuple{PGTransition}"
"src/inference/AdvancedSMC.jl","DynamicPPL.getlogp","mtsig","Tuple{PGTransition}"
"src/inference/AdvancedSMC.jl","getlogevidence","mtsig","Tuple{Any, Sampler{<:PG}, AbstractVarInfo}"
"src/inference/AdvancedSMC.jl","DynamicPPL.initialstep","mtsig","Tuple{AbstractRNG, AbstractModel, Sampler{<:PG}, AbstractVarInfo, Vararg{Any}}"
"src/inference/AdvancedSMC.jl","AbstractMCMC.step","mtsig","Tuple{AbstractRNG, AbstractModel, Sampler{<:PG}, AbstractVarInfo, Vararg{Any}}"
"src/inference/AdvancedSMC.jl","<NA-name>","mtsig","Tuple{Any}"
"src/inference/AdvancedSMC.jl","DynamicPPL.use_threadsafe_eval","mtsig","Tuple{SamplingContext{<:Sampler{<:Union{PG, SMC}}}, AbstractVarInfo}"
"src/inference/AdvancedSMC.jl","DynamicPPL.assume","mtsig","Tuple{Any, Sampler{<:Union{PG, SMC}}, Distribution, VarName, AbstractVarInfo}"
"src/inference/AdvancedSMC.jl","DynamicPPL.observe","mtsig","Tuple{Sampler{<:Union{PG, SMC}}, Distribution, Any, Any}"
"src/inference/AdvancedSMC.jl","AdvancedPS.Trace","mtsig","Tuple{Model, Sampler{<:Union{SMC, PG}}, AbstractVarInfo}"
"src/inference/Inference.jl","getchunksize","mtsig","Tuple{Type{<:Hamiltonian{AD}}} where AD"
"src/inference/Inference.jl","getADbackend","mtsig","Tuple{Hamiltonian{AD}} where AD"
"src/inference/Inference.jl","mh_accept","mtsig","Tuple{Real, Real, Real}"
"src/inference/Inference.jl","Transition","mtsig","Tuple{AbstractVarInfo, NamedTuple}"
"src/inference/Inference.jl","metadata","mtsig","Tuple{Transition}"
"src/inference/Inference.jl","DynamicPPL.getlogp","mtsig","Tuple{Transition}"
"src/inference/Inference.jl","metadata","mtsig","Tuple{AbstractVarInfo}"
"src/inference/Inference.jl","AbstractMCMC.sample","mtsig","Tuple{AbstractModel, InferenceAlgorithm, Integer, Vararg{Any}}"
"src/inference/Inference.jl","AbstractMCMC.sample","mtsig","Tuple{AbstractRNG, AbstractModel, InferenceAlgorithm, Integer, Vararg{Any}}"
"src/inference/Inference.jl","AbstractMCMC.sample","mtsig","Tuple{AbstractRNG, AbstractModel, Sampler{<:InferenceAlgorithm}, Integer, Any, Any, Any, Vararg{Any}}"
"src/inference/Inference.jl","AbstractMCMC.sample","mtsig","Tuple{AbstractRNG, AbstractModel, Prior, Integer, Any, Any, Any, Vararg{Any}}"
"src/inference/Inference.jl","AbstractMCMC.sample","mtsig","Tuple{AbstractModel, InferenceAlgorithm, AbstractMCMC.AbstractMCMCEnsemble, Integer, Integer, Vararg{Any}}"
"src/inference/Inference.jl","AbstractMCMC.sample","mtsig","Tuple{AbstractRNG, AbstractModel, InferenceAlgorithm, AbstractMCMC.AbstractMCMCEnsemble, Integer, Integer, Vararg{Any}}"
"src/inference/Inference.jl","AbstractMCMC.sample","mtsig","Tuple{AbstractRNG, AbstractModel, Sampler{<:InferenceAlgorithm}, AbstractMCMC.AbstractMCMCEnsemble, Integer, Integer, Any, Any, Vararg{Any}}"
"src/inference/Inference.jl","AbstractMCMC.sample","mtsig","Tuple{AbstractRNG, AbstractModel, Prior, AbstractMCMC.AbstractMCMCEnsemble, Integer, Integer, Any, Any, Vararg{Any}}"
"src/inference/Inference.jl","getparams","mtsig","Tuple{Any}"
"src/inference/Inference.jl","getparams","mtsig","Tuple{VarInfo}"
"src/inference/Inference.jl","_params_to_array","mtsig","Tuple{Vector}"
"src/inference/Inference.jl","<NA-name>","mtsig","Tuple{Any}"
"src/inference/Inference.jl","flatten_namedtuple","mtsig","Tuple{NamedTuple}"
"src/inference/Inference.jl","<NA-name>","mtsig","Tuple{Any}"
"src/inference/Inference.jl","<NA-name>","mtsig","Tuple{TUPLE_ARG}"
"src/inference/Inference.jl","get_transition_extras","mtsig","Tuple{AbstractVector{<:VarInfo}}"
"src/inference/Inference.jl","get_transition_extras","mtsig","Tuple{AbstractVector}"
"src/inference/Inference.jl","names_values","mtsig","Tuple{AbstractVector{<:NamedTuple{names}}} where names"
"src/inference/Inference.jl","names_values","mtsig","Tuple{AbstractVector{<:NamedTuple}}"
"src/inference/Inference.jl","getlogevidence","mtsig","Tuple{Any, Any, Any}"
"src/inference/Inference.jl","AbstractMCMC.bundle_samples","mtsig","Tuple{Vector, AbstractModel, Union{Sampler{<:InferenceAlgorithm}, SampleFromPrior}, Any, Type{MCMCChains.Chains}, Any, Any, Any, Any, Any, Vararg{Any}}"
"src/inference/Inference.jl","AbstractMCMC.bundle_samples","mtsig","Tuple{Vector, AbstractModel, Union{Sampler{<:InferenceAlgorithm}, SampleFromPrior}, Any, Type{Vector{NamedTuple}}, Vararg{Any}}"
"src/inference/Inference.jl","<NA-name>","mtsig","Tuple{Any}"
"src/inference/Inference.jl","save","mtsig","Tuple{MCMCChains.Chains, Sampler, Any, Any, Any}"
"src/inference/Inference.jl","resume","mtsig","Tuple{MCMCChains.Chains, Vararg{Any}, Vararg{Any}}"
"src/inference/Inference.jl","resume","mtsig","Tuple{Random.AbstractRNG, MCMCChains.Chains, Vararg{Any}, Any, Vararg{Any}}"
"src/inference/Inference.jl","DynamicPPL.loadstate","mtsig","Tuple{MCMCChains.Chains}"
"src/inference/Inference.jl","DynamicPPL.getspace","mtsig","Tuple{(\$alg){space}} where space"
"src/inference/Inference.jl","DynamicPPL.getspace","mtsig","Tuple{(\$alg){<:Any, space}} where space"
"src/inference/Inference.jl","DynamicPPL.get_matching_type","mtsig","((Tuple{Sampler{<:Union{PG, SMC}}, Any, Type{TV}} where TV <: Array{T, N}) where N) where T"
"src/inference/Inference.jl","DynamicPPL.getspace","mtsig","Tuple{Sampler}"
"src/inference/Inference.jl","DynamicPPL.inspace","mtsig","Tuple{VarName, Sampler}"
"src/inference/Inference.jl","predict","mtsig","Tuple{Model, MCMCChains.Chains, Vararg{Any}}"
"src/inference/Inference.jl","predict","mtsig","Tuple{AbstractRNG, Model, MCMCChains.Chains, Any}"
"src/inference/Inference.jl","<NA-name>","mtsig","Tuple{Any}"
"src/inference/Inference.jl","transitions_from_chain","mtsig","Tuple{Turing.Model, MCMCChains.Chains, Vararg{Any}}"
"src/inference/Inference.jl","transitions_from_chain","mtsig","Tuple{Random.AbstractRNG, Turing.Model, MCMCChains.Chains, Any}"
"src/inference/Inference.jl","<NA-name>","mtsig","Tuple{TUPLE_ARG}"
"src/inference/emcee.jl","Emcee","mtsig","Tuple{Int, Any}"
"src/inference/emcee.jl","AbstractMCMC.step","mtsig","Tuple{Random.AbstractRNG, Model, Sampler{<:Emcee}, Any, Any, Vararg{Any}}"
"src/inference/emcee.jl","<NA-name>","mtsig","Tuple{Any, Any}"
"src/inference/emcee.jl","<NA-name>","mtsig","Tuple{Any}"
"src/inference/emcee.jl","AbstractMCMC.step","mtsig","Tuple{AbstractRNG, Model, Sampler{<:Emcee}, EmceeState, Vararg{Any}}"
"src/inference/emcee.jl","<NA-name>","mtsig","Tuple{Any}"
"src/inference/emcee.jl","AbstractMCMC.bundle_samples","mtsig","Tuple{Vector{<:Vector}, AbstractModel, Sampler{<:Emcee}, EmceeState, Type{MCMCChains.Chains}, Any, Any, Any, Any, Vararg{Any}}"
"src/inference/emcee.jl","<NA-name>","mtsig","Tuple{Any}"
"src/inference/ess.jl","ESS","mtsig","Tuple{}"
"src/inference/ess.jl","ESS","mtsig","Tuple{Symbol}"
"src/inference/ess.jl","DynamicPPL.initialstep","mtsig","Tuple{AbstractRNG, Model, Sampler{<:ESS}, AbstractVarInfo, Vararg{Any}}"
"src/inference/ess.jl","AbstractMCMC.step","mtsig","Tuple{AbstractRNG, Model, Sampler{<:ESS}, AbstractVarInfo, Vararg{Any}}"
"src/inference/ess.jl","ESSPrior","mtsig","((Tuple{M, S, V} where V <: AbstractVarInfo) where S <: Sampler{<:ESS}) where M <: Model"
"src/inference/ess.jl","<NA-name>","mtsig","Tuple{Any}"
"src/inference/ess.jl","ESSPrior","mtsig","Tuple{Model, Sampler{<:ESS}, AbstractVarInfo}"
"src/inference/ess.jl","EllipticalSliceSampling.isgaussian","mtsig","Tuple{Type{<:ESSPrior}}"
"src/inference/ess.jl","Base.rand","mtsig","Tuple{Random.AbstractRNG, ESSPrior}"
"src/inference/ess.jl","Distributions.mean","mtsig","Tuple{ESSPrior}"
"src/inference/ess.jl","ℓ::ESSLogLikelihood","mtsig","Tuple{Any}"
"src/inference/ess.jl","DynamicPPL.tilde_assume","mtsig","Tuple{Random.AbstractRNG, DefaultContext, Sampler{<:ESS}, Any, Any, Any}"
"src/inference/ess.jl","DynamicPPL.tilde_observe","mtsig","Tuple{DefaultContext, Sampler{<:ESS}, Any, Any, Any}"
"src/inference/ess.jl","DynamicPPL.dot_tilde_assume","mtsig","Tuple{Random.AbstractRNG, DefaultContext, Sampler{<:ESS}, Any, Any, Any, Any}"
"src/inference/ess.jl","DynamicPPL.dot_tilde_observe","mtsig","Tuple{DefaultContext, Sampler{<:ESS}, Any, Any, Any}"
"src/inference/gibbs.jl","isgibbscomponent","mtsig","Tuple{Any}"
"src/inference/gibbs.jl","isgibbscomponent","mtsig","Tuple{ESS}"
"src/inference/gibbs.jl","isgibbscomponent","mtsig","Tuple{GibbsConditional}"
"src/inference/gibbs.jl","isgibbscomponent","mtsig","Tuple{Hamiltonian}"
"src/inference/gibbs.jl","isgibbscomponent","mtsig","Tuple{MH}"
"src/inference/gibbs.jl","isgibbscomponent","mtsig","Tuple{PG}"
"src/inference/gibbs.jl","Gibbs","mtsig","(Tuple{A} where A <: Tuple) where space"
"src/inference/gibbs.jl","Gibbs","mtsig","Tuple{Vararg{Any}}"
"src/inference/gibbs.jl","GibbsTransition","mtsig","Tuple{AbstractVarInfo}"
"src/inference/gibbs.jl","metadata","mtsig","Tuple{GibbsTransition}"
"src/inference/gibbs.jl","DynamicPPL.getlogp","mtsig","Tuple{GibbsTransition}"
"src/inference/gibbs.jl","gibbs_varinfo","mtsig","Tuple{Any, Any, Any}"
"src/inference/gibbs.jl","varinfo","mtsig","Tuple{Any}"
"src/inference/gibbs.jl","varinfo","mtsig","Tuple{AbstractVarInfo}"
"src/inference/gibbs.jl","gibbs_state","mtsig","Tuple{Any, Any, AbstractVarInfo, AbstractVarInfo}"
"src/inference/gibbs.jl","gibbs_state","mtsig","Tuple{Model, Sampler{<:Hamiltonian}, HMCState, AbstractVarInfo}"
"src/inference/gibbs.jl","gibbs_rerun","mtsig","Tuple{Any, Any}"
"src/inference/gibbs.jl","gibbs_rerun","mtsig","Tuple{GibbsConditional, MH}"
"src/inference/gibbs.jl","gibbs_rerun","mtsig","Tuple{Hamiltonian, MH}"
"src/inference/gibbs.jl","gibbs_rerun","mtsig","Tuple{MH, Hamiltonian}"
"src/inference/gibbs.jl","gibbs_rerun","mtsig","Tuple{GibbsConditional, Hamiltonian}"
"src/inference/gibbs.jl","gibbs_rerun","mtsig","Tuple{Any, GibbsConditional}"
"src/inference/gibbs.jl","gibbs_rerun","mtsig","Tuple{Any, PG}"
"src/inference/gibbs.jl","DynamicPPL.initialstep","mtsig","Tuple{AbstractRNG, Model, Sampler{<:Gibbs}, AbstractVarInfo, Vararg{Any}}"
"src/inference/gibbs.jl","<NA-name>","mtsig","Tuple{Any}"
"src/inference/gibbs.jl","<NA-name>","mtsig","Tuple{Any}"
"src/inference/gibbs.jl","AbstractMCMC.step","mtsig","Tuple{AbstractRNG, Model, Sampler{<:Gibbs}, GibbsState, Vararg{Any}}"
"src/inference/gibbs.jl","<NA-name>","mtsig","Tuple{Any, Any}"
"src/inference/gibbs_conditional.jl","GibbsConditional","mtsig","Tuple{Symbol, C} where C"
"src/inference/gibbs_conditional.jl","DynamicPPL.getspace","mtsig","Tuple{GibbsConditional{S}} where S"
"src/inference/gibbs_conditional.jl","DynamicPPL.initialstep","mtsig","Tuple{AbstractRNG, Model, Sampler{<:GibbsConditional}, AbstractVarInfo, Vararg{Any}}"
"src/inference/gibbs_conditional.jl","AbstractMCMC.step","mtsig","Tuple{AbstractRNG, Model, Sampler{<:GibbsConditional}, AbstractVarInfo, Vararg{Any}}"
"src/inference/gibbs_conditional.jl","conditioned","mtsig","Tuple{NamedTuple{names}} where names"
"src/inference/gibbs_conditional.jl","extractparam","mtsig","Tuple{Tuple{Vector{<:Array{<:Real}}, Vector{String}}}"
"src/inference/gibbs_conditional.jl","extractparam","mtsig","Tuple{Tuple{Vector{<:Real}, Vector{String}}}"
"src/inference/hmc.jl","HMCTransition","mtsig","Tuple{AbstractVarInfo, AHMC.Transition}"
"src/inference/hmc.jl","metadata","mtsig","Tuple{HMCTransition}"
"src/inference/hmc.jl","DynamicPPL.getlogp","mtsig","Tuple{HMCTransition}"
"src/inference/hmc.jl","HMC","mtsig","Tuple{Vararg{Any}, Vararg{Any}}"
"src/inference/hmc.jl","HMC","mtsig","(Tuple{Float64, Int, Type{metricT}, Tuple} where metricT <: AHMC.AbstractMetric) where AD"
"src/inference/hmc.jl","HMC","mtsig","Tuple{Float64, Int, Tuple{}, Vararg{Any}} where AD"
"src/inference/hmc.jl","HMC","mtsig","Tuple{Float64, Int, Vararg{Symbol}, Any} where AD"
"src/inference/hmc.jl","DynamicPPL.initialsampler","mtsig","Tuple{Sampler{<:Hamiltonian}}"
"src/inference/hmc.jl","AbstractMCMC.sample","mtsig","Tuple{AbstractRNG, AbstractModel, Sampler{<:AdaptiveHamiltonian}, Integer, Any, Any, Any, Any, Any, Any, Vararg{Any}}"
"src/inference/hmc.jl","DynamicPPL.initialstep","mtsig","Tuple{AbstractRNG, AbstractModel, Sampler{<:Hamiltonian}, AbstractVarInfo, Any, Any, Vararg{Any}}"
"src/inference/hmc.jl","AbstractMCMC.step","mtsig","Tuple{Random.AbstractRNG, Model, Sampler{<:Hamiltonian}, HMCState, Any, Vararg{Any}}"
"src/inference/hmc.jl","get_hamiltonian","mtsig","Tuple{Any, Any, Any, Any, Any}"
"src/inference/hmc.jl","HMCDA","mtsig","Tuple{Vararg{Any}, Vararg{Any}}"
"src/inference/hmc.jl","HMCDA","mtsig","(Tuple{Int, Float64, Float64, Float64, Type{metricT}, Tuple} where metricT <: AHMC.AbstractMetric) where AD"
"src/inference/hmc.jl","HMCDA","mtsig","Tuple{Float64, Float64, Float64, Any} where AD"
"src/inference/hmc.jl","HMCDA","mtsig","Tuple{Int, Float64, Float64, Tuple{}, Vararg{Any}} where AD"
"src/inference/hmc.jl","HMCDA","mtsig","Tuple{Int, Float64, Float64, Vararg{Symbol}, Float64, Any} where AD"
"src/inference/hmc.jl","NUTS","mtsig","Tuple{Vararg{Any}, Vararg{Any}}"
"src/inference/hmc.jl","NUTS","mtsig","(Tuple{Int, Float64, Int, Float64, Float64, Type{metricT}, Tuple} where metricT) where AD"
"src/inference/hmc.jl","NUTS","mtsig","Tuple{Int, Float64, Tuple{}, Vararg{Any}} where AD"
"src/inference/hmc.jl","NUTS","mtsig","Tuple{Int, Float64, Vararg{Symbol}, Int, Float64, Float64, Any} where AD"
"src/inference/hmc.jl","NUTS","mtsig","Tuple{Float64, Int, Float64, Float64, Any} where AD"
"src/inference/hmc.jl","NUTS","mtsig","Tuple{Vararg{Any}} where AD"
"src/inference/hmc.jl","getmetricT","mtsig","Tuple{(\$alg){<:Any, <:Any, metricT}} where metricT"
"src/inference/hmc.jl","getstepsize","mtsig","Tuple{Sampler{<:Hamiltonian}, Any}"
"src/inference/hmc.jl","getstepsize","mtsig","Tuple{Sampler{<:AdaptiveHamiltonian}, Any}"
"src/inference/hmc.jl","gen_∂logπ∂θ","mtsig","Tuple{Any, Sampler, Any}"
"src/inference/hmc.jl","∂logπ∂θ","mtsig","Tuple{Any}"
"src/inference/hmc.jl","gen_logπ","mtsig","Tuple{Any, AbstractSampler, Any}"
"src/inference/hmc.jl","logπ","mtsig","Tuple{Any}"
"src/inference/hmc.jl","gen_metric","mtsig","Tuple{Int, Sampler{<:Hamiltonian}, Any}"
"src/inference/hmc.jl","gen_metric","mtsig","Tuple{Int, Sampler{<:AdaptiveHamiltonian}, Any}"
"src/inference/hmc.jl","make_ahmc_kernel","mtsig","Tuple{HMC, Any}"
"src/inference/hmc.jl","make_ahmc_kernel","mtsig","Tuple{HMCDA, Any}"
"src/inference/hmc.jl","make_ahmc_kernel","mtsig","Tuple{NUTS, Any}"
"src/inference/hmc.jl","DynamicPPL.assume","mtsig","Tuple{Any, Sampler{<:Hamiltonian}, Distribution, VarName, Any}"
"src/inference/hmc.jl","DynamicPPL.dot_assume","mtsig","Tuple{Any, Sampler{<:Hamiltonian}, MultivariateDistribution, AbstractArray{<:VarName}, AbstractMatrix, Any}"
"src/inference/hmc.jl","DynamicPPL.dot_assume","mtsig","Tuple{Any, Sampler{<:Hamiltonian}, Union{Distribution, AbstractArray{<:Distribution}}, AbstractArray{<:VarName}, AbstractArray, Any}"
"src/inference/hmc.jl","DynamicPPL.observe","mtsig","Tuple{Sampler{<:Hamiltonian}, Distribution, Any, Any}"
"src/inference/hmc.jl","DynamicPPL.dot_observe","mtsig","Tuple{Sampler{<:Hamiltonian}, Union{Distribution, AbstractArray{<:Distribution}}, AbstractArray, Any}"
"src/inference/hmc.jl","AHMCAdaptor","mtsig","Tuple{AdaptiveHamiltonian, AHMC.AbstractMetric, Any}"
"src/inference/hmc.jl","AHMCAdaptor","mtsig","Tuple{Hamiltonian, AHMC.AbstractMetric, Vararg{Any}}"
"src/inference/hmc.jl","HMCState","mtsig","Tuple{AbstractRNG, Model, Sampler{<:Hamiltonian}, AbstractVarInfo, Vararg{Any}}"
"src/inference/is.jl","IS","mtsig","Tuple{}"
"src/inference/is.jl","DynamicPPL.initialsampler","mtsig","Tuple{Sampler{<:IS}}"
"src/inference/is.jl","DynamicPPL.initialstep","mtsig","Tuple{AbstractRNG, Model, Sampler{<:IS}, AbstractVarInfo, Vararg{Any}}"
"src/inference/is.jl","AbstractMCMC.step","mtsig","Tuple{Random.AbstractRNG, Model, Sampler{<:IS}, Nothing, Vararg{Any}}"
"src/inference/is.jl","getlogevidence","mtsig","Tuple{Vector{<:Transition}, Sampler{<:IS}, Any}"
"src/inference/is.jl","<NA-name>","mtsig","Tuple{Any}"
"src/inference/is.jl","DynamicPPL.assume","mtsig","Tuple{Any, Sampler{<:IS}, Distribution, VarName, Any}"
"src/inference/is.jl","DynamicPPL.observe","mtsig","Tuple{Sampler{<:IS}, Distribution, Any, Any}"
"src/inference/mh.jl","proposal","mtsig","Tuple{AdvancedMH.Proposal}"
"src/inference/mh.jl","proposal","mtsig","Tuple{Function}"
"src/inference/mh.jl","proposal","mtsig","Tuple{Distribution}"
"src/inference/mh.jl","proposal","mtsig","Tuple{AbstractMatrix}"
"src/inference/mh.jl","proposal","mtsig","Tuple{Any}"
"src/inference/mh.jl","MH","mtsig","Tuple{Vararg{Any}}"
"src/inference/mh.jl","set_namedtuple!","mtsig","Tuple{VarInfo, NamedTuple}"
"src/inference/mh.jl","f::MHLogDensityFunction","mtsig","Tuple{Any}"
"src/inference/mh.jl","unvectorize","mtsig","Tuple{AbstractVector}"
"src/inference/mh.jl","reconstruct","mtsig","Tuple{Distribution, AbstractVector}"
"src/inference/mh.jl","reconstruct","mtsig","Tuple{AbstractVector{<:UnivariateDistribution}, AbstractVector}"
"src/inference/mh.jl","reconstruct","mtsig","Tuple{AbstractVector{<:MultivariateDistribution}, AbstractVector}"
"src/inference/mh.jl","<NA-name>","mtsig","Tuple{Any}"
"src/inference/mh.jl","dist_val_tuple","mtsig","Tuple{Sampler{<:MH}, AbstractVarInfo}"
"src/inference/mh.jl","_val_tuple","mtsig","Tuple{VarInfo, NamedTuple{names}} where names"
"src/inference/mh.jl","_dist_tuple","mtsig","(Tuple{NamedTuple{propnames}, VarInfo, NamedTuple{names}} where propnames) where names"
"src/inference/mh.jl","should_link","mtsig","Tuple{Any, Any, Any}"
"src/inference/mh.jl","should_link","mtsig","Tuple{Any, Any, NamedTuple{(), Tuple{}}}"
"src/inference/mh.jl","should_link","mtsig","Tuple{Any, Any, AdvancedMH.RandomWalkProposal}"
"src/inference/mh.jl","should_link","mtsig","(Tuple{Any, Any, NamedTuple{names, vals}} where vals <: NTuple{<:Any, <:AdvancedMH.RandomWalkProposal}) where names"
"src/inference/mh.jl","maybe_link!","mtsig","Tuple{Any, Any, Any}"
"src/inference/mh.jl","propose!","mtsig","Tuple{AbstractRNG, AbstractVarInfo, Model, Sampler{<:MH}, Any}"
"src/inference/mh.jl","propose!","mtsig","Tuple{AbstractRNG, AbstractVarInfo, Model, Sampler{<:MH}, AdvancedMH.RandomWalkProposal{issymmetric, <:MvNormal}} where issymmetric"
"src/inference/mh.jl","DynamicPPL.initialstep","mtsig","Tuple{AbstractRNG, AbstractModel, Sampler{<:MH}, AbstractVarInfo, Vararg{Any}}"
"src/inference/mh.jl","AbstractMCMC.step","mtsig","Tuple{AbstractRNG, Model, Sampler{<:MH}, AbstractVarInfo, Vararg{Any}}"
"src/inference/mh.jl","DynamicPPL.assume","mtsig","Tuple{Any, Sampler{<:MH}, Distribution, VarName, Any}"
"src/inference/mh.jl","DynamicPPL.dot_assume","mtsig","Tuple{Any, Sampler{<:MH}, MultivariateDistribution, VarName, AbstractMatrix, Any}"
"src/inference/mh.jl","<NA-name>","mtsig","Tuple{Any}"
"src/inference/mh.jl","DynamicPPL.dot_assume","mtsig","Tuple{Any, Sampler{<:MH}, Union{Distribution, AbstractArray{<:Distribution}}, VarName, AbstractArray, Any}"
"src/inference/mh.jl","<NA-name>","mtsig","Tuple{Any}"
"src/inference/mh.jl","DynamicPPL.observe","mtsig","Tuple{Sampler{<:MH}, Distribution, Any, Any}"
"src/inference/mh.jl","DynamicPPL.dot_observe","mtsig","Tuple{Sampler{<:MH}, Union{Distribution, AbstractArray{<:Distribution}}, AbstractArray, Any}"
"src/modes/ModeEstimation.jl","DynamicPPL.NodeTrait","mtsig","Tuple{OptimizationContext}"
"src/modes/ModeEstimation.jl","DynamicPPL.childcontext","mtsig","Tuple{OptimizationContext}"
"src/modes/ModeEstimation.jl","DynamicPPL.setchildcontext","mtsig","Tuple{OptimizationContext, Any}"
"src/modes/ModeEstimation.jl","DynamicPPL.tilde_assume","mtsig","Tuple{Random.AbstractRNG, OptimizationContext, Any, Any, Any, Any}"
"src/modes/ModeEstimation.jl","DynamicPPL.tilde_assume","mtsig","Tuple{OptimizationContext{<:LikelihoodContext}, Any, Any, Any, Any}"
"src/modes/ModeEstimation.jl","DynamicPPL.tilde_assume","mtsig","Tuple{OptimizationContext, Any, Any, Any, Any}"
"src/modes/ModeEstimation.jl","DynamicPPL.dot_tilde_assume","mtsig","Tuple{Random.AbstractRNG, OptimizationContext, Any, Any, Any, Any, Any}"
"src/modes/ModeEstimation.jl","DynamicPPL.dot_tilde_assume","mtsig","Tuple{OptimizationContext{<:LikelihoodContext}, SampleFromPrior, Any, Any, Any, Any}"
"src/modes/ModeEstimation.jl","DynamicPPL.dot_tilde_assume","mtsig","Tuple{OptimizationContext, SampleFromPrior, Any, Any, Any, Any}"
"src/modes/ModeEstimation.jl","OptimLogDensity","mtsig","Tuple{Model, AbstractContext}"
"src/modes/ModeEstimation.jl","f::OptimLogDensity","mtsig","Tuple{Any}"
"src/modes/ModeEstimation.jl","f::OptimLogDensity","mtsig","Tuple{Any, Any, Any, Any}"
"src/modes/ModeEstimation.jl","transform!","mtsig","Tuple{OptimLogDensity}"
"src/modes/ModeEstimation.jl","transform!","mtsig","Tuple{AbstractArray, DynamicPPL.VarInfo, constrained_space{true}}"
"src/modes/ModeEstimation.jl","transform!","mtsig","Tuple{AbstractArray, DynamicPPL.VarInfo, constrained_space{false}}"
"src/modes/ModeEstimation.jl","transform","mtsig","Tuple{AbstractArray, DynamicPPL.VarInfo, constrained_space}"
"src/modes/ModeEstimation.jl","t::AbstractTransform","mtsig","Tuple{AbstractArray}"
"src/modes/ModeEstimation.jl","t::Init","mtsig","Tuple{}"
"src/modes/ModeEstimation.jl","get_parameter_bounds","mtsig","Tuple{DynamicPPL.Model}"
"src/modes/ModeEstimation.jl","_optim_objective","mtsig","Tuple{DynamicPPL.Model, MAP, constrained_space{false}}"
"src/modes/ModeEstimation.jl","_optim_objective","mtsig","Tuple{DynamicPPL.Model, MAP, constrained_space{true}}"
"src/modes/ModeEstimation.jl","_optim_objective","mtsig","Tuple{DynamicPPL.Model, MLE, constrained_space{false}}"
"src/modes/ModeEstimation.jl","_optim_objective","mtsig","Tuple{DynamicPPL.Model, MLE, constrained_space{true}}"
"src/modes/ModeEstimation.jl","optim_objective","mtsig","Tuple{DynamicPPL.Model, Union{MLE, MAP}, Bool}"
"src/modes/ModeEstimation.jl","optim_function","mtsig","Tuple{DynamicPPL.Model, Union{MLE, MAP}, Bool, Union{Nothing, AbstractADType}}"
"src/modes/ModeEstimation.jl","l","mtsig","Tuple{Any, Any}"
"src/modes/ModeEstimation.jl","<NA-name>","mtsig","Tuple{Any, Any, Any}"
"src/modes/ModeEstimation.jl","<NA-name>","mtsig","Tuple{Any, Any, Any}"
"src/modes/ModeEstimation.jl","optim_problem","mtsig","Tuple{DynamicPPL.Model, Union{MAP, MLE}, Bool, Any, Union{Nothing, AbstractADType}, Vararg{Any}}"
"src/modes/OptimInterface.jl","Base.show","mtsig","Tuple{IO, MIME\"text/plain\", ModeResult}"
"src/modes/OptimInterface.jl","Base.show","mtsig","Tuple{IO, ModeResult}"
"src/modes/OptimInterface.jl","StatsBase.coeftable","mtsig","Tuple{ModeResult}"
"src/modes/OptimInterface.jl","StatsBase.informationmatrix","mtsig","Tuple{ModeResult, Any, Vararg{Any}}"
"src/modes/OptimInterface.jl","StatsBase.coef","mtsig","Tuple{ModeResult}"
"src/modes/OptimInterface.jl","StatsBase.coefnames","mtsig","Tuple{ModeResult}"
"src/modes/OptimInterface.jl","StatsBase.params","mtsig","Tuple{ModeResult}"
"src/modes/OptimInterface.jl","StatsBase.vcov","mtsig","Tuple{ModeResult}"
"src/modes/OptimInterface.jl","StatsBase.loglikelihood","mtsig","Tuple{ModeResult}"
"src/modes/OptimInterface.jl","Optim.optimize","mtsig","Tuple{Model, MLE, Optim.Options, Vararg{Any}}"
"src/modes/OptimInterface.jl","Optim.optimize","mtsig","Tuple{Model, MLE, AbstractArray, Optim.Options, Vararg{Any}}"
"src/modes/OptimInterface.jl","Optim.optimize","mtsig","Tuple{Model, MLE, Optim.AbstractOptimizer, Optim.Options, Vararg{Any}}"
"src/modes/OptimInterface.jl","Optim.optimize","mtsig","Tuple{Model, MLE, AbstractArray, Optim.AbstractOptimizer, Optim.Options, Vararg{Any}}"
"src/modes/OptimInterface.jl","_mle_optimize","mtsig","Tuple{Model, Vararg{Any}, Vararg{Any}}"
"src/modes/OptimInterface.jl","Optim.optimize","mtsig","Tuple{Model, MAP, Optim.Options, Vararg{Any}}"
"src/modes/OptimInterface.jl","Optim.optimize","mtsig","Tuple{Model, MAP, AbstractArray, Optim.Options, Vararg{Any}}"
"src/modes/OptimInterface.jl","Optim.optimize","mtsig","Tuple{Model, MAP, Optim.AbstractOptimizer, Optim.Options, Vararg{Any}}"
"src/modes/OptimInterface.jl","Optim.optimize","mtsig","Tuple{Model, MAP, AbstractArray, Optim.AbstractOptimizer, Optim.Options, Vararg{Any}}"
"src/modes/OptimInterface.jl","_map_optimize","mtsig","Tuple{Model, Vararg{Any}, Vararg{Any}}"
"src/modes/OptimInterface.jl","_optimize","mtsig","Tuple{Model, OptimLogDensity, Optim.AbstractOptimizer, Vararg{Any}, Vararg{Any}}"
"src/modes/OptimInterface.jl","_optimize","mtsig","Tuple{Model, OptimLogDensity, Optim.Options, Vararg{Any}, Vararg{Any}}"
"src/modes/OptimInterface.jl","_optimize","mtsig","Tuple{Model, OptimLogDensity, AbstractArray, Optim.Options, Vararg{Any}, Vararg{Any}}"
"src/modes/OptimInterface.jl","_optimize","mtsig","Tuple{Model, OptimLogDensity, AbstractArray, Optim.AbstractOptimizer, Optim.Options, Vararg{Any}, Vararg{Any}}"
"src/stdlib/RandomMeasures.jl","logpdf","mtsig","Tuple{SizeBiasedSamplingProcess, Real}"
"src/stdlib/RandomMeasures.jl","rand","mtsig","Tuple{AbstractRNG, SizeBiasedSamplingProcess}"
"src/stdlib/RandomMeasures.jl","minimum","mtsig","Tuple{SizeBiasedSamplingProcess}"
"src/stdlib/RandomMeasures.jl","maximum","mtsig","Tuple{SizeBiasedSamplingProcess}"
"src/stdlib/RandomMeasures.jl","logpdf","mtsig","Tuple{StickBreakingProcess, Real}"
"src/stdlib/RandomMeasures.jl","rand","mtsig","Tuple{AbstractRNG, StickBreakingProcess}"
"src/stdlib/RandomMeasures.jl","minimum","mtsig","Tuple{StickBreakingProcess}"
"src/stdlib/RandomMeasures.jl","maximum","mtsig","Tuple{StickBreakingProcess}"
"src/stdlib/RandomMeasures.jl","logpdf","mtsig","Tuple{ChineseRestaurantProcess, Int}"
"src/stdlib/RandomMeasures.jl","rand","mtsig","Tuple{AbstractRNG, ChineseRestaurantProcess}"
"src/stdlib/RandomMeasures.jl","minimum","mtsig","Tuple{ChineseRestaurantProcess}"
"src/stdlib/RandomMeasures.jl","maximum","mtsig","Tuple{ChineseRestaurantProcess}"
"src/stdlib/RandomMeasures.jl","distribution","mtsig","Tuple{StickBreakingProcess{<:DirichletProcess}}"
"src/stdlib/RandomMeasures.jl","distribution","mtsig","Tuple{SizeBiasedSamplingProcess{<:DirichletProcess}}"
"src/stdlib/RandomMeasures.jl","_logpdf_table","mtsig","Tuple{DirichletProcess{T}, AbstractVector{Int}} where T <: Real"
"src/stdlib/RandomMeasures.jl","distribution","mtsig","Tuple{StickBreakingProcess{<:PitmanYorProcess}}"
"src/stdlib/RandomMeasures.jl","stickbreak","mtsig","Tuple{Any}"
"src/stdlib/RandomMeasures.jl","distribution","mtsig","Tuple{SizeBiasedSamplingProcess{<:PitmanYorProcess}}"
"src/stdlib/RandomMeasures.jl","_logpdf_table","mtsig","Tuple{PitmanYorProcess{T}, AbstractVector{Int}} where T <: Real"
"src/stdlib/distributions.jl","Base.minimum","mtsig","Tuple{Flat}"
"src/stdlib/distributions.jl","Base.maximum","mtsig","Tuple{Flat}"
"src/stdlib/distributions.jl","Base.rand","mtsig","Tuple{Random.AbstractRNG, Flat}"
"src/stdlib/distributions.jl","Distributions.logpdf","mtsig","Tuple{Flat, Real}"
"src/stdlib/distributions.jl","Distributions.pdf","mtsig","Tuple{Flat, Real}"
"src/stdlib/distributions.jl","Distributions.logpdf","mtsig","Tuple{Flat, AbstractVector{<:Real}}"
"src/stdlib/distributions.jl","Distributions.loglikelihood","mtsig","Tuple{Flat, AbstractVector{<:Real}}"
"src/stdlib/distributions.jl","Base.minimum","mtsig","Tuple{FlatPos}"
"src/stdlib/distributions.jl","Base.maximum","mtsig","Tuple{FlatPos}"
"src/stdlib/distributions.jl","Base.rand","mtsig","Tuple{Random.AbstractRNG, FlatPos}"
"src/stdlib/distributions.jl","Distributions.logpdf","mtsig","Tuple{FlatPos, Real}"
"src/stdlib/distributions.jl","Distributions.pdf","mtsig","Tuple{FlatPos, Real}"
"src/stdlib/distributions.jl","Distributions.loglikelihood","mtsig","Tuple{FlatPos, AbstractVector{<:Real}}"
"src/stdlib/distributions.jl","BinomialLogit","mtsig","Tuple{Int, T} where T"
"src/stdlib/distributions.jl","BinomialLogit","mtsig","Tuple{Int, Real}"
"src/stdlib/distributions.jl","Base.minimum","mtsig","Tuple{BinomialLogit}"
"src/stdlib/distributions.jl","Base.maximum","mtsig","Tuple{BinomialLogit}"
"src/stdlib/distributions.jl","Distributions.pdf","mtsig","Tuple{BinomialLogit, Real}"
"src/stdlib/distributions.jl","Distributions.logpdf","mtsig","Tuple{BinomialLogit, Real}"
"src/stdlib/distributions.jl","Distributions.logpdf","mtsig","Tuple{BinomialLogit, Integer}"
"src/stdlib/distributions.jl","_logpdf","mtsig","Tuple{BinomialLogit, Real}"
"src/stdlib/distributions.jl","Base.rand","mtsig","Tuple{Random.AbstractRNG, BinomialLogit}"
"src/stdlib/distributions.jl","Distributions.sampler","mtsig","Tuple{BinomialLogit}"
"src/stdlib/distributions.jl","BernoulliLogit","mtsig","Tuple{Real}"
"src/stdlib/distributions.jl","OrderedLogistic","mtsig","(Tuple{T1, T2} where T2) where T1"
"src/stdlib/distributions.jl","OrderedLogistic","mtsig","Tuple{Any, AbstractVector}"
"src/stdlib/distributions.jl","Base.minimum","mtsig","Tuple{OrderedLogistic}"
"src/stdlib/distributions.jl","Base.maximum","mtsig","Tuple{OrderedLogistic}"
"src/stdlib/distributions.jl","Distributions.pdf","mtsig","Tuple{OrderedLogistic, Real}"
"src/stdlib/distributions.jl","Distributions.logpdf","mtsig","Tuple{OrderedLogistic, Real}"
"src/stdlib/distributions.jl","Distributions.logpdf","mtsig","Tuple{OrderedLogistic, Integer}"
"src/stdlib/distributions.jl","_logpdf","mtsig","Tuple{OrderedLogistic, Real}"
"src/stdlib/distributions.jl","Base.rand","mtsig","Tuple{Random.AbstractRNG, OrderedLogistic}"
"src/stdlib/distributions.jl","<NA-name>","mtsig","Tuple{Any}"
"src/stdlib/distributions.jl","Distributions.sampler","mtsig","Tuple{OrderedLogistic}"
"src/stdlib/distributions.jl","<NA-name>","mtsig","Tuple{Any}"
"src/stdlib/distributions.jl","unsafe_logpdf_ordered_logistic","mtsig","Tuple{Any, Any, Any, Int}"
"src/stdlib/distributions.jl","LogPoisson","mtsig","Tuple{T} where T"
"src/stdlib/distributions.jl","LogPoisson","mtsig","Tuple{Real}"
"src/stdlib/distributions.jl","Base.minimum","mtsig","Tuple{LogPoisson}"
"src/stdlib/distributions.jl","Base.maximum","mtsig","Tuple{LogPoisson}"
"src/stdlib/distributions.jl","_logpdf","mtsig","Tuple{LogPoisson, Real}"
"src/stdlib/distributions.jl","Distributions.pdf","mtsig","Tuple{LogPoisson, Real}"
"src/stdlib/distributions.jl","Distributions.logpdf","mtsig","Tuple{LogPoisson, Integer}"
"src/stdlib/distributions.jl","Distributions.logpdf","mtsig","Tuple{LogPoisson, Real}"
"src/stdlib/distributions.jl","Base.rand","mtsig","Tuple{Random.AbstractRNG, LogPoisson}"
"src/stdlib/distributions.jl","Distributions.sampler","mtsig","Tuple{LogPoisson}"
"src/stdlib/distributions.jl","Bijectors.logpdf_with_trans","mtsig","Tuple{NoDist{<:Univariate}, Real, Bool}"
"src/stdlib/distributions.jl","Bijectors.logpdf_with_trans","mtsig","Tuple{NoDist{<:Multivariate}, AbstractVector{<:Real}, Bool}"
"src/stdlib/distributions.jl","Bijectors.logpdf_with_trans","mtsig","Tuple{NoDist{<:Multivariate}, AbstractMatrix{<:Real}, Bool}"
"src/stdlib/distributions.jl","Bijectors.logpdf_with_trans","mtsig","Tuple{NoDist{<:Matrixvariate}, AbstractMatrix{<:Real}, Bool}"
"src/utilities/helper.jl","FlattenIterator","mtsig","Tuple{Any, Any}"
"src/utilities/helper.jl","Base.length","mtsig","Tuple{FlattenIterator}"
"src/utilities/helper.jl","_length","mtsig","Tuple{Any}"
"src/utilities/helper.jl","_length","mtsig","Tuple{AbstractArray}"
"src/utilities/helper.jl","Base.eltype","mtsig","Tuple{Type{FlattenIterator{T}}} where T"
"src/utilities/helper.jl","_eltype","mtsig","Tuple{Type{T}} where T"
"src/utilities/helper.jl","_eltype","mtsig","Tuple{Type{TA}} where TA <: AbstractArray"
"src/utilities/helper.jl","Base.iterate","mtsig","Tuple{FlattenIterator{<:Number}, Any}"
"src/utilities/helper.jl","Base.iterate","mtsig","Tuple{FlattenIterator{<:AbstractArray{<:Number}}, Any}"
"src/utilities/helper.jl","Base.iterate","mtsig","Tuple{FlattenIterator{T}, Any} where T <: AbstractArray"
"src/utilities/helper.jl","startind","mtsig","Tuple{Type{<:AbstractArray{T}}} where T"
"src/utilities/helper.jl","startind","mtsig","Tuple{Type{<:Number}}"
"src/utilities/helper.jl","startind","mtsig","Tuple{Type{<:Any}}"
"src/utilities/helper.jl","getname","mtsig","Tuple{FlattenIterator, Int}"
"src/utilities/helper.jl","ind2sub","mtsig","Tuple{Any, Any}"
"src/utilities/stan-interface.jl","sample","mtsig","Tuple{Any, CmdStan.Sample}"
"src/utilities/stan-interface.jl","sample","mtsig","Tuple{Any, Int, Int, Bool, Int, CmdStan.Sample}"
"src/utilities/stan-interface.jl","sample","mtsig","Tuple{Any, Int, Int, Bool, Int, CmdStan.Adapt, CmdStan.Hmc}"
"src/utilities/stan-interface.jl","AHMCAdaptor","mtsig","Tuple{Any}"
"src/variational/VariationalInference.jl","make_logjoint","mtsig","Tuple{DynamicPPL.Model, Any}"
"src/variational/VariationalInference.jl","logπ","mtsig","Tuple{Any}"
"src/variational/VariationalInference.jl","logjoint","mtsig","Tuple{DynamicPPL.Model, Any, Any}"
"src/variational/VariationalInference.jl","elbo::ELBO","mtsig","Tuple{Random.AbstractRNG, AdvancedVI.VariationalInference, Any, DynamicPPL.Model, Any, Any, Vararg{Any}}"
"src/variational/advi.jl","Bijectors.bijector","mtsig","Tuple{DynamicPPL.Model, Val{sym2ranges}, Any} where sym2ranges"
"src/variational/advi.jl","meanfield","mtsig","Tuple{DynamicPPL.Model}"
"src/variational/advi.jl","meanfield","mtsig","Tuple{Random.AbstractRNG, DynamicPPL.Model}"
"src/variational/advi.jl","AdvancedVI.update","mtsig","Tuple{DistributionsAD.TuringDiagMvNormal, Any, Any}"
"src/variational/advi.jl","AdvancedVI.update","mtsig","Tuple{Bijectors.TransformedDistribution, Vararg{Any}}"
"src/variational/advi.jl","AdvancedVI.update","mtsig","Tuple{Bijectors.TransformedDistribution{<:DistributionsAD.TuringDiagMvNormal}, AbstractArray}"
"src/variational/advi.jl","AdvancedVI.vi","mtsig","Tuple{DynamicPPL.Model, AdvancedVI.ADVI, Any}"
"src/variational/advi.jl","AdvancedVI.vi","mtsig","Tuple{DynamicPPL.Model, AdvancedVI.ADVI, Bijectors.TransformedDistribution{<:DistributionsAD.TuringDiagMvNormal}, Any}"
"test/essential/ad.jl","logp","mtsig","Tuple{Vector}"
"test/essential/ad.jl","<NA-name>","mtsig","Tuple{Any}"
"test/essential/ad.jl","<NA-name>","mtsig","Tuple{Any}"
"test/essential/ad.jl","logp1","mtsig","Tuple{Vector}"
"test/essential/ad.jl","wishart_ad","mtsig","Tuple{}"
"test/essential/ad.jl","logp3","mtsig","Tuple{Any}"
"test/essential/ad.jl","dir","mtsig","Tuple{}"
"test/essential/ad.jl","wishart","mtsig","Tuple{}"
"test/essential/ad.jl","invwishart","mtsig","Tuple{}"
"test/essential/ad.jl","tst","mtsig","Tuple{Any, Type{TV}} where TV"
"test/essential/ad.jl","make_logjoint","mtsig","Tuple{DynamicPPL.Model, DynamicPPL.AbstractContext}"
"test/essential/ad.jl","logπ","mtsig","Tuple{Any, Any}"
"test/essential/ad.jl","target","mtsig","Tuple{Any}"
"test/essential/ad.jl","demo","mtsig","Tuple{Any}"
"test/inference/AdvancedSMC.jl","normal","mtsig","Tuple{}"
"test/inference/AdvancedSMC.jl","fail_smc","mtsig","Tuple{}"
"test/inference/AdvancedSMC.jl","test","mtsig","Tuple{}"
"test/inference/AdvancedSMC.jl","test","mtsig","Tuple{}"
"test/inference/Inference.jl","testmodel1","mtsig","Tuple{Any}"
"test/inference/Inference.jl","testmodel2","mtsig","Tuple{Any}"
"test/inference/Inference.jl","test_assume","mtsig","Tuple{}"
"test/inference/Inference.jl","testbb","mtsig","Tuple{Any}"
"test/inference/Inference.jl","fggibbstest","mtsig","Tuple{Any}"
"test/inference/Inference.jl","gauss","mtsig","Tuple{Any}"
"test/inference/Inference.jl","gauss2","mtsig","Tuple{Type{TV}, Any} where TV"
"test/inference/Inference.jl","newinterface","mtsig","Tuple{Any}"
"test/inference/Inference.jl","noreturn","mtsig","Tuple{Any}"
"test/inference/Inference.jl","test","mtsig","Tuple{}"
"test/inference/Inference.jl","vdemo1","mtsig","Tuple{Any}"
"test/inference/Inference.jl","vdemo1b","mtsig","Tuple{Any}"
"test/inference/Inference.jl","vdemo2","mtsig","Tuple{Any}"
"test/inference/Inference.jl","vdemo3","mtsig","Tuple{}"
"test/inference/Inference.jl","vdemo4","mtsig","Tuple{}"
"test/inference/Inference.jl","vdemo5","mtsig","Tuple{}"
"test/inference/Inference.jl","vdemo6","mtsig","Tuple{}"
"test/inference/Inference.jl","vdemo7","mtsig","Tuple{}"
"test/inference/Inference.jl","vdemo1","mtsig","Tuple{Any}"
"test/inference/Inference.jl","vdemo2","mtsig","Tuple{Any}"
"test/inference/Inference.jl","vdemo3","mtsig","Tuple{}"
"test/inference/Inference.jl","vdemo4","mtsig","Tuple{}"
"test/inference/Inference.jl","vdemo5","mtsig","Tuple{}"
"test/inference/Inference.jl","vdemo6","mtsig","Tuple{}"
"test/inference/Inference.jl","vdemo7","mtsig","Tuple{}"
"test/inference/Inference.jl","vdemo1","mtsig","Tuple{Type{T}} where T"
"test/inference/Inference.jl","vdemo1kw","mtsig","Tuple{Any}"
"test/inference/Inference.jl","vdemo2","mtsig","Tuple{Type{T}} where T <: Real"
"test/inference/Inference.jl","vdemo2kw","mtsig","Tuple{Any}"
"test/inference/Inference.jl","vdemo3","mtsig","Tuple{Type{TV}} where TV <: AbstractVector"
"test/inference/Inference.jl","vdemo3kw","mtsig","Tuple{Any}"
"test/inference/ess.jl","demo","mtsig","Tuple{Any}"
"test/inference/ess.jl","demodot","mtsig","Tuple{Any}"
"test/inference/gibbs.jl","gdemo_copy","mtsig","Tuple{}"
"test/inference/gibbs.jl","AbstractMCMC.bundle_samples","mtsig","Tuple{Vector, typeof(model), Turing.Sampler{<:Gibbs}, Any, Type{MCMCChains.Chains}, Vararg{Any}}"
"test/inference/gibbs.jl","callback","mtsig","Tuple{Any, Any, Any, Any, Any, Any, Vararg{Any}}"
"test/inference/gibbs.jl","imm","mtsig","Tuple{Any, Any, Type{M}} where M"
"test/inference/gibbs_conditional.jl","<NA-name>","mtsig","Tuple{Any}"
"test/inference/gibbs_conditional.jl","<NA-name>","mtsig","Tuple{Any}"
"test/inference/gibbs_conditional.jl","<NA-name>","mtsig","Tuple{Any}"
"test/inference/gibbs_conditional.jl","<NA-name>","mtsig","Tuple{Any}"
"test/inference/gibbs_conditional.jl","<NA-name>","mtsig","Tuple{Any}"
"test/inference/gibbs_conditional.jl","<NA-name>","mtsig","Tuple{Any}"
"test/inference/gibbs_conditional.jl","mixture","mtsig","Tuple{Any}"
"test/inference/gibbs_conditional.jl","<NA-name>","mtsig","Tuple{Any}"
"test/inference/gibbs_conditional.jl","<NA-name>","mtsig","Tuple{Any}"
"test/inference/gibbs_conditional.jl","<NA-name>","mtsig","Tuple{Any}"
"test/inference/gibbs_conditional.jl","<NA-name>","mtsig","Tuple{Any}"
"test/inference/gibbs_conditional.jl","<NA-name>","mtsig","Tuple{Any}"
"test/inference/gibbs_conditional.jl","estimate","mtsig","Tuple{Any, Any}"
"test/inference/gibbs_conditional.jl","estimatez","mtsig","Tuple{Any, Any, Any}"
"test/inference/gibbs_conditional.jl","<NA-name>","mtsig","Tuple{Any}"
"test/inference/hmc.jl","constrained_test","mtsig","Tuple{Any}"
"test/inference/hmc.jl","constrained_simplex_test","mtsig","Tuple{Any}"
"test/inference/hmc.jl","hmcmatrixsup","mtsig","Tuple{}"
"test/inference/hmc.jl","<NA-name>","mtsig","Tuple{Any}"
"test/inference/hmc.jl","nn","mtsig","Tuple{Any, Any, Any, Any, Any, Any, Any}"
"test/inference/hmc.jl","bnn","mtsig","Tuple{Any}"
"test/inference/hmc.jl","mwe1","mtsig","Tuple{Type{T}} where T <: Real"
"test/inference/hmc.jl","mwe2","mtsig","Tuple{Type{T}} where T"
"test/inference/hmc.jl","mwe3","mtsig","Tuple{Type{T}} where T"
"test/inference/is.jl","reference","mtsig","Tuple{Any}"
"test/inference/is.jl","reference","mtsig","Tuple{}"
"test/inference/is.jl","normal","mtsig","Tuple{}"
"test/inference/is.jl","test","mtsig","Tuple{}"
"test/inference/mh.jl","M","mtsig","Tuple{Any, Any, Any}"
"test/inference/mh.jl","twomeans","mtsig","Tuple{Any, Any}"
"test/inference/mh.jl","test","mtsig","Tuple{Any}"
"test/inference/utilities.jl","linear_reg","mtsig","Tuple{Any, Any, Any}"
"test/inference/utilities.jl","linear_reg_vec","mtsig","Tuple{Any, Any, Any}"
"test/inference/utilities.jl","f","mtsig","Tuple{Any}"
"test/inference/utilities.jl","simple_linear1","mtsig","Tuple{Any, Any}"
"test/inference/utilities.jl","simple_linear2","mtsig","Tuple{Any, Any}"
"test/inference/utilities.jl","simple_linear3","mtsig","Tuple{Any, Any}"
"test/inference/utilities.jl","simple_linear4","mtsig","Tuple{Any, Any}"
"test/modes/ModeEstimation.jl","<NA-name>","mtsig","Tuple{Any, Any}"
"test/modes/ModeEstimation.jl","<NA-name>","mtsig","Tuple{Any, Any}"
"test/modes/ModeEstimation.jl","<NA-name>","mtsig","Tuple{Any, Any}"
"test/modes/ModeEstimation.jl","<NA-name>","mtsig","Tuple{Any, Any}"
"test/modes/ModeEstimation.jl","<NA-name>","mtsig","Tuple{Any, Any}"
"test/modes/ModeEstimation.jl","<NA-name>","mtsig","Tuple{Any, Any}"
"test/modes/ModeEstimation.jl","<NA-name>","mtsig","Tuple{Any, Any}"
"test/modes/ModeEstimation.jl","<NA-name>","mtsig","Tuple{Any, Any}"
"test/modes/ModeEstimation.jl","<NA-name>","mtsig","Tuple{Any, Any}"
"test/modes/ModeEstimation.jl","<NA-name>","mtsig","Tuple{Any, Any}"
"test/modes/OptimInterface.jl","regtest","mtsig","Tuple{Any, Any}"
"test/modes/OptimInterface.jl","dot_gdemo","mtsig","Tuple{Any}"
"test/skipped/advi_demo.jl","model","mtsig","Tuple{Any}"
"test/skipped/advi_demo.jl","<NA-name>","mtsig","Tuple{Any}"
"test/skipped/advi_demo.jl","<NA-name>","mtsig","Tuple{Any}"
"test/skipped/advi_demo.jl","<NA-name>","mtsig","Tuple{Any}"
"test/skipped/bayes_lr.jl","bayes_lr","mtsig","Tuple{Any, Any}"
"test/skipped/bayes_lr.jl","lj_func","mtsig","Tuple{Any}"
"test/skipped/bayes_lr.jl","neg_lj_func","mtsig","Tuple{Any}"
"test/skipped/bayes_lr.jl","grad_func","mtsig","Tuple{Any}"
"test/skipped/dual_averaging.jl","_adapt_ϵ","mtsig","Tuple{Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any}"
"test/skipped/dual_averaging.jl","_adapt_ϵ","mtsig","Tuple{Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any}"
"test/skipped/explicit_ret.jl","test_ex_rt","mtsig","Tuple{}"
"test/skipped/gdemo.jl","gdemo","mtsig","Tuple{}"
"test/skipped/gdemo.jl","lj_func","mtsig","Tuple{Any}"
"test/skipped/gdemo.jl","neg_lj_func","mtsig","Tuple{Any}"
"test/skipped/gdemo.jl","grad_func","mtsig","Tuple{Any}"
"test/skipped/gdemo_hmc.jl","dummy_print","mtsig","Tuple{Vararg{Any}}"
"test/skipped/gdemo_hmc.jl","<NA-name>","mtsig","Tuple{Any}"
"test/skipped/gdemo_hmc.jl","<NA-name>","mtsig","Tuple{Any}"
"test/skipped/gdemo_nuts.jl","dummy_print","mtsig","Tuple{Vararg{Any}}"
"test/skipped/gdemo_nuts.jl","<NA-name>","mtsig","Tuple{Any}"
"test/skipped/gdemo_nuts.jl","<NA-name>","mtsig","Tuple{Any}"
"test/skipped/hmcda_geweke.jl","Gadfly.plot","mtsig","Tuple{QQPair, Vararg{ElementOrFunction}}"
"test/skipped/hmcda_geweke.jl","qqplot","mtsig","Tuple{Any, Any, Vararg{ElementOrFunction}}"
"test/skipped/hmcda_geweke.jl","qqnorm","mtsig","Tuple{Any, Vararg{ElementOrFunction}}"
"test/skipped/hmcda_geweke.jl","gdemo_fw","mtsig","Tuple{}"
"test/skipped/hmcda_geweke.jl","gdemo_bk","mtsig","Tuple{Any}"
"test/skipped/hmcda_geweke.jl","<NA-name>","mtsig","Tuple{}"
"test/skipped/nuts_geweke.jl","Gadfly.plot","mtsig","Tuple{QQPair, Vararg{ElementOrFunction}}"
"test/skipped/nuts_geweke.jl","qqplot","mtsig","Tuple{Any, Any, Vararg{ElementOrFunction}}"
"test/skipped/nuts_geweke.jl","qqnorm","mtsig","Tuple{Any, Vararg{ElementOrFunction}}"
"test/skipped/nuts_geweke.jl","gdemo_fw","mtsig","Tuple{}"
"test/skipped/nuts_geweke.jl","gdemo_bk","mtsig","Tuple{Any}"
"test/skipped/nuts_geweke.jl","<NA-name>","mtsig","Tuple{}"
"test/skipped/simple_gauss.jl","simple_gauss","mtsig","Tuple{}"
"test/skipped/simple_gauss.jl","lj_func","mtsig","Tuple{Any}"
"test/skipped/simple_gauss.jl","neg_lj_func","mtsig","Tuple{Any}"
"test/skipped/simple_gauss.jl","grad_func","mtsig","Tuple{Any}"
"test/skipped/simple_gauss_hmc.jl","<NA-name>","mtsig","Tuple{Any}"
"test/skipped/sv.jl","sv_model","mtsig","Tuple{Any, Any}"
"test/skipped/unit_test_helper.jl","test_grad","mtsig","Tuple{Any, Any, Any}"
"test/skipped/vec_assume_mat.jl","vdemo","mtsig","Tuple{Type{T}} where T"
"test/skipped/vec_assume_mat.jl","vdemo","mtsig","Tuple{}"
"test/skipped/vec_assume_mv.jl","vdemo","mtsig","Tuple{}"
"test/skipped/vec_assume_mv.jl","vdemo","mtsig","Tuple{}"
"test/skipped/vec_assume_mv.jl","vdemo","mtsig","Tuple{}"
"test/stdlib/RandomMeasures.jl","infiniteGMM","mtsig","Tuple{Any}"
"test/stdlib/RandomMeasures.jl","<NA-name>","mtsig","Tuple{Any}"
"test/stdlib/distributions.jl","<NA-name>","mtsig","Tuple{TUPLE_ARG}"
"test/stdlib/distributions.jl","m","mtsig","Tuple{}"
"test/test_utils/ad_utils.jl","test_reverse_mode_ad","mtsig","Tuple{Any, Any, Vararg{Any}, Any, Any}"
"test/test_utils/ad_utils.jl","<NA-name>","mtsig","Tuple{Any}"
"test/test_utils/ad_utils.jl","<NA-name>","mtsig","Tuple{Any}"
"test/test_utils/ad_utils.jl","<NA-name>","mtsig","Tuple{TUPLE_ARG}"
"test/test_utils/ad_utils.jl","<NA-name>","mtsig","Tuple{TUPLE_ARG}"
"test/test_utils/ad_utils.jl","test_model_ad","mtsig","Tuple{Any, Any, Vector{Symbol}}"
"test/test_utils/models.jl","gdemo","mtsig","Tuple{Any, Any}"
"test/test_utils/models.jl","gdemo_d","mtsig","Tuple{}"
"test/test_utils/models.jl","MoGtest","mtsig","Tuple{Any}"
"test/test_utils/models.jl","empty_model","mtsig","Tuple{}"
"test/test_utils/numerical_tests.jl","check_dist_numerical","mtsig","Tuple{Any, Any, Any, Any, Any}"
"test/test_utils/numerical_tests.jl","check_numerical","mtsig","Tuple{Any, Vector, Vector, Any, Any}"
"test/test_utils/numerical_tests.jl","check_gdemo","mtsig","Tuple{Any, Any, Any}"
"test/test_utils/numerical_tests.jl","check_MoGtest_default","mtsig","Tuple{Any, Any, Any}"
"test/test_utils/numerical_tests.jl","check_gdemo_models","mtsig","Tuple{Any, Any, Vararg{Any}, Any, Any, Vararg{Any}}"
"test/test_utils/random_measure_utils.jl","compute_log_joint","mtsig","Tuple{Any, Any, Any, Any, Any, Any}"
"test/test_utils/random_measure_utils.jl","compute_log_conditonal_observations","mtsig","Tuple{Any, Any, Any, Any}"
"test/test_utils/random_measure_utils.jl","correct_posterior","mtsig","Tuple{Any, Any, Any, Any, Any, Any, Any}"
"test/test_utils/random_measure_utils.jl","<NA-name>","mtsig","Tuple{Any}"
"test/test_utils/staging.jl","get_stage","mtsig","Tuple{}"
"test/test_utils/staging.jl","do_test","mtsig","Tuple{Any}"
"test/test_utils/testing_functions.jl","GKernel","mtsig","Tuple{Any}"
"test/test_utils/testing_functions.jl","<NA-name>","mtsig","Tuple{Any}"
"test/test_utils/testing_functions.jl","<NA-name>","mtsig","Tuple{Any}"
"test/test_utils/testing_functions.jl","randr","mtsig","Tuple{Turing.VarInfo, Turing.VarName, Distribution, Turing.Sampler, Bool}"
"test/test_utils/testing_functions.jl","insdelim","mtsig","Tuple{Any, Any}"
"test/test_utils/testing_functions.jl","<NA-name>","mtsig","Tuple{Any, Any}"
"test/variational/advi.jl","logπ","mtsig","Tuple{Any}"
"test/variational/advi.jl","getq","mtsig","Tuple{Any}"
"test/variational/advi.jl","AdvancedVI.update","mtsig","Tuple{TuringDiagMvNormal, AbstractArray{<:Real}}"
"test/variational/optimisers.jl","test_opt","mtsig","Tuple{Any, Any}"
"test/variational/optimisers.jl","loss","mtsig","Tuple{Any, Any}"
"test/variational/optimisers.jl","<NA-name>","mtsig","Tuple{Any}"
