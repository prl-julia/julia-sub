File,Function,Kind,TypeAnnotation,UnrolledTypeAnnotation,TypeVarsSummary,Error,Warning,VarCnt,HasWhere,VarsUsedOnce,UseSiteVariance,ImprUseSiteVariance,RestrictedScope,Package
src/WeakValueDict.jl,WeakValueDict,mtsig,"Tuple{Vararg{Pair{K, V} where K}} where V","Tuple{Vararg{Pair{K, V} where K}} where V","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:K, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/AbstractAlgebra.jl
src/AcceleratedArray.jl,Base.IndexStyle,mtsig,"Tuple{Type{AcceleratedArray{<:Any, <:Any, A, <:Any}}} where A","Tuple{Type{((AcceleratedArray{var""##ANON_TV#338"", var""##ANON_TV#339"", A, var""##ANON_TV#340""} where var""##ANON_TV#338"" <: Any) where var""##ANON_TV#339"" <: Any) where var""##ANON_TV#340"" <: Any}} where A","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#338""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#339""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#340""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:A, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/AcceleratedArrays.jl
src/Multivariate/TensorSpace.jl,Base.findfirst,mtsig,"(Tuple{Tensorizer{Tuple{<:AbstractFill{S}, <:AbstractFill{T}}}, Tuple{Int, Int}} where T) where S","(Tuple{Tensorizer{(Tuple{var""##ANON_TV#392"", var""##ANON_TV#393""} where var""##ANON_TV#392"" <: AbstractFill{S}) where var""##ANON_TV#393"" <: AbstractFill{T}}, Tuple{Int, Int}} where T) where S","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#392""), :(Union{}), :(AbstractFill{S}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#393""), :(Union{}), :(AbstractFill{T}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/ApproxFunBase.jl
src/Operators/systems.jl,diagm_container,mtsig,"Tuple{Vararg{Pair{<:Integer, <:AbstractVector{O}}}} where O <: Operator","Tuple{Vararg{(Pair{var""##ANON_TV#426"", var""##ANON_TV#427""} where var""##ANON_TV#426"" <: Integer) where var""##ANON_TV#427"" <: AbstractVector{O}}} where O <: Operator","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#426""), :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#427""), :(Union{}), :(AbstractVector{O}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:O, :(Union{}), :Operator, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/ApproxFunBase.jl
src/Operators/systems.jl,diagm_container,mtsig,"Tuple{Vararg{Pair{<:Integer, <:AbstractVector{O}}}} where O <: Operator","Tuple{Vararg{(Pair{var""##ANON_TV#428"", var""##ANON_TV#429""} where var""##ANON_TV#428"" <: Integer) where var""##ANON_TV#429"" <: AbstractVector{O}}} where O <: Operator","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#428""), :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#429""), :(Union{}), :(AbstractVector{O}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:O, :(Union{}), :Operator, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/ApproxFunBase.jl
src/Operators/systems.jl,diagm_container,mtsig,"Tuple{Any, Vararg{Pair{<:Integer, <:AbstractVector{O}}}} where O <: Operator","Tuple{Any, Vararg{(Pair{var""##ANON_TV#430"", var""##ANON_TV#431""} where var""##ANON_TV#430"" <: Integer) where var""##ANON_TV#431"" <: AbstractVector{O}}} where O <: Operator","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#430""), :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#431""), :(Union{}), :(AbstractVector{O}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:O, :(Union{}), :Operator, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/ApproxFunBase.jl
src/Operators/systems.jl,diagm_container,mtsig,"Tuple{Any, Vararg{Pair{<:Integer, <:AbstractVector{O}}}} where O <: Operator","Tuple{Any, Vararg{(Pair{var""##ANON_TV#432"", var""##ANON_TV#433""} where var""##ANON_TV#432"" <: Integer) where var""##ANON_TV#433"" <: AbstractVector{O}}} where O <: Operator","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#432""), :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#433""), :(Union{}), :(AbstractVector{O}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:O, :(Union{}), :Operator, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/ApproxFunBase.jl
src/AnnotatedArrays.jl,AnnotatedArray,mtsig,"Tuple{AbstractArray, Vararg{Pair{K, <:Any}}} where K","Tuple{AbstractArray, Vararg{Pair{K, var""##ANON_TV#480""} where var""##ANON_TV#480"" <: Any}} where K","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#480""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/ArrayTools.jl
src/vector_of_arrays.jl,Base.vcat,mtsig,"Tuple{Vararg{VectorOfArrays{U, N} where U}} where N","Tuple{Vararg{VectorOfArrays{U, N} where U}} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:U, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/ArraysOfArrays.jl
src/eltypes.jl,finaljuliatype,mtsig,"Tuple{Type{Union{T, Missing}}} where T","Tuple{Type{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Arrow.jl
src/ArrowTypes/src/ArrowTypes.jl,ArrowType,mtsig,"Tuple{Type{Union{Missing, T}}} where T","Tuple{Type{Union{Missing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Arrow.jl
src/ArrowTypes/src/ArrowTypes.jl,fromarrow,mtsig,"Tuple{Type{Union{Missing, T}}, Missing} where T","Tuple{Type{Union{Missing, T}}, Missing} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Arrow.jl
src/ArrowTypes/src/ArrowTypes.jl,fromarrow,mtsig,"Tuple{Type{Union{Missing, T}}, T} where T","Tuple{Type{Union{Missing, T}}, T} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Arrow.jl
src/ArrowTypes/src/ArrowTypes.jl,fromarrow,mtsig,"Tuple{Type{Union{Missing, T}}, T} where T <: NamedTuple","Tuple{Type{Union{Missing, T}}, T} where T <: NamedTuple","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :NamedTuple, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Arrow.jl
src/ArrowTypes/src/ArrowTypes.jl,fromarrow,mtsig,"Tuple{Type{Union{Missing, T}}, Any} where T","Tuple{Type{Union{Missing, T}}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Arrow.jl
src/ArrowTypes/src/ArrowTypes.jl,default,mtsig,"Tuple{Type{Union{T, Missing}}} where T","Tuple{Type{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Arrow.jl
src/ArrowTypes.jl,ArrowType,mtsig,"Tuple{Type{Union{Missing, T}}} where T","Tuple{Type{Union{Missing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/ArrowTypes.jl
src/ArrowTypes.jl,fromarrow,mtsig,"Tuple{Type{Union{Missing, T}}, Missing} where T","Tuple{Type{Union{Missing, T}}, Missing} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/ArrowTypes.jl
src/ArrowTypes.jl,fromarrow,mtsig,"Tuple{Type{Union{Missing, T}}, T} where T","Tuple{Type{Union{Missing, T}}, T} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/ArrowTypes.jl
src/ArrowTypes.jl,fromarrow,mtsig,"Tuple{Type{Union{Missing, T}}, T} where T <: NamedTuple","Tuple{Type{Union{Missing, T}}, T} where T <: NamedTuple","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :NamedTuple, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/ArrowTypes.jl
src/ArrowTypes.jl,fromarrow,mtsig,"Tuple{Type{Union{Missing, T}}, Any} where T","Tuple{Type{Union{Missing, T}}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/ArrowTypes.jl
src/ArrowTypes.jl,default,mtsig,"Tuple{Type{Union{T, Missing}}} where T","Tuple{Type{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/ArrowTypes.jl
src/padded_axis.jl,_unsafe_get_element,mtsig,"Tuple{Any, Tuple{Vararg{Union{Integer, P}}}} where P <: OnePad","Tuple{Any, Tuple{Vararg{Union{Integer, P}}}} where P <: OnePad","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:P, :(Union{}), :OnePad, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/AxisIndices.jl
src/padded_axis.jl,_unsafe_get_element,mtsig,"Tuple{Any, Tuple{Vararg{Union{Integer, P}}}} where P <: ZeroPad","Tuple{Any, Tuple{Vararg{Union{Integer, P}}}} where P <: ZeroPad","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:P, :(Union{}), :ZeroPad, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/AxisIndices.jl
src/table.jl,Table,mtsig,"Tuple{Vararg{Pair{K, <:AbstractVector}}} where K","Tuple{Vararg{Pair{K, var""##ANON_TV#354""} where var""##ANON_TV#354"" <: AbstractVector}} where K","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#354""), :(Union{}), :AbstractVector, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/AxisTables.jl
src/parse_data.jl,process_column,mtsig,"Tuple{AbstractVector{Union{Missing, T}}} where T <: Real","Tuple{AbstractVector{Union{Missing, T}}} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/BEASTDataPrep.jl
src/array.jl,Base.map,mtsig,"(Tuple{Any, Vararg{Array{<:Any, N}}, Any} where N) where T","(Tuple{Any, Vararg{Array{var""##ANON_TV#472"", N} where var""##ANON_TV#472"" <: Any}, Any} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#472""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,true,true,false,../data/ta-info/all/BanyanArrays.jl
src/Bijectors.jl,maporbroadcast,mtsig,"Tuple{Any, Vararg{AbstractArray{<:Any, N}}} where N","Tuple{Any, Vararg{AbstractArray{var""##ANON_TV#492"", N} where var""##ANON_TV#492"" <: Any}} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#492""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Bijectors.jl
src/bijectors/leaky_relu.jl,Functors.functor,mtsig,"Tuple{Type{LeakyReLU{<:Any, N}}, Any} where N","Tuple{Type{LeakyReLU{var""##ANON_TV#562"", N} where var""##ANON_TV#562"" <: Any}, Any} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#562""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Bijectors.jl
src/BinaryDecisionDiagrams.jl,and,mtsig,"Tuple{Vararg{Union{T, Diagram}}} where T <: Integer","Tuple{Vararg{Union{T, Diagram}}} where T <: Integer","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/BinaryDecisionDiagrams.jl
src/BinaryDecisionDiagrams.jl,or,mtsig,"Tuple{Vararg{Union{T, Diagram}}} where T <: Integer","Tuple{Vararg{Union{T, Diagram}}} where T <: Integer","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/BinaryDecisionDiagrams.jl
src/pseudo_blockarray.jl,convert,mtsig,"(Tuple{Type{AbstractArray{V, N} where V}, PseudoBlockArray{T, N}} where N) where T","(Tuple{Type{AbstractArray{V, N} where V}, PseudoBlockArray{T, N}} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:V, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/BlockArrays.jl
src/utils.jl,to_cartesian,mtsig,"Tuple{Val{N}, Vararg{Union{Int, NTuple{N, Int}, CartesianIndex{N}}}} where N","Tuple{Val{N}, Vararg{Union{Int, NTuple{N, Int}, CartesianIndex{N}}}} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/BlockMatching.jl
src/algorithms/Finito/Finito.jl,Finito,mtsig,"Tuple{Maybe{Union{Array{R}, R}}, Any, Bool, Bool, Tuple{Bool, Int}, Int, Bool, Int, R, R, R} where R","Tuple{Maybe{Union{Array{R}, R}}, Any, Bool, Bool, Tuple{Bool, Int}, Int, Bool, Int, R, R, R} where R","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:R, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCTuple), list(JuliaSub.TCTuple), list(JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/CIAOAlgorithms.jl
src/algorithms/ProShI/ProShI.jl,Proshi,mtsig,"Tuple{Maybe{Union{Array{R}, R}}, Any, Tuple{Bool, Int}, Int, Bool, Int, R} where R","Tuple{Maybe{Union{Array{R}, R}}, Any, Tuple{Bool, Int}, Int, Bool, Int, R} where R","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:R, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/CIAOAlgorithms.jl
src/utils.jl,_promote,mtsig,"((Tuple{Type{PooledVector{Union{T, Missing}, R, RA}}, PooledVector} where RA) where R) where T","((Tuple{Type{PooledVector{Union{T, Missing}, R, RA}}, PooledVector} where RA) where R) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:RA, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/CSV.jl
src/utils.jl,_promote,mtsig,"((Tuple{Type{PooledVector{Union{T, Missing}, R, RA}}, MissingVector} where RA) where R) where T","((Tuple{Type{PooledVector{Union{T, Missing}, R, RA}}, MissingVector} where RA) where R) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:RA, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/CSV.jl
src/canvas_objects.jl,Internals.convert′,mtsig,"Tuple{Type{Union{CO, Nothing}}, Any} where CO <: CanvasObject","Tuple{Type{Union{CO, Nothing}}, Any} where CO <: CanvasObject","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:CO, :(Union{}), :CanvasObject, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Canvas.jl
src/canvas_objects.jl,Internals.convert′,mtsig,"Tuple{Type{Union{Vector{CO}, Nothing}}, Any} where CO <: CanvasObject","Tuple{Type{Union{Vector{CO}, Nothing}}, Any} where CO <: CanvasObject","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:CO, :(Union{}), :CanvasObject, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Canvas.jl
src/CategoricalArrays.jl,StructTypes.construct,mtsig,"Tuple{Type{<:CategoricalArray{Union{Missing, T}}}, AbstractVector} where T","Tuple{Type{var""##ANON_TV#450""} where var""##ANON_TV#450"" <: CategoricalArray{Union{Missing, T}}, AbstractVector} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#450""), :(Union{}), :(CategoricalArray{Union{Missing, T}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/CategoricalArrays.jl
src/CategoricalArrays.jl,StructTypes.construct,mtsig,"Tuple{Type{<:CategoricalArray{Union{Missing, T}}}, Vector} where T","Tuple{Type{var""##ANON_TV#451""} where var""##ANON_TV#451"" <: CategoricalArray{Union{Missing, T}}, Vector} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#451""), :(Union{}), :(CategoricalArray{Union{Missing, T}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/CategoricalArrays.jl
src/array.jl,similar,mtsig,"(((((Tuple{CategoricalArray{S, M, Q}, Type{Union{CategoricalValue{T, R}, Missing}}, NTuple{N, Int}} where Q) where M) where S) where N) where T) where R","(((((Tuple{CategoricalArray{S, M, Q}, Type{Union{CategoricalValue{T, R}, Missing}}, NTuple{N, Int}} where Q) where M) where S) where N) where T) where R","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:Q, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:M, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,6,true,true,true,true,false,../data/ta-info/all/CategoricalArrays.jl
src/array.jl,similar,mtsig,"((((Tuple{CategoricalArray{S, M, Q}, Type{Union{CategoricalValue{T}, Missing}}, NTuple{N, Int}} where Q) where M) where S) where N) where T","((((Tuple{CategoricalArray{S, M, Q}, Type{Union{CategoricalValue{T}, Missing}}, NTuple{N, Int}} where Q) where M) where S) where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:Q, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:M, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,5,true,true,true,true,false,../data/ta-info/all/CategoricalArrays.jl
src/array.jl,similar,mtsig,"((Tuple{$A, Type{Union{CategoricalValue{T, R}, Missing}}, NTuple{N, Int}} where N) where R) where T","((Tuple{$A, Type{Union{CategoricalValue{T, R}, Missing}}, NTuple{N, Int}} where N) where R) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], true)",false,true,3,true,true,true,true,false,../data/ta-info/all/CategoricalArrays.jl
src/array.jl,similar,mtsig,"(Tuple{$A, Type{Union{CategoricalValue{T}, Missing}}, NTuple{N, Int}} where N) where T","(Tuple{$A, Type{Union{CategoricalValue{T}, Missing}}, NTuple{N, Int}} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], true)",false,true,2,true,true,true,true,false,../data/ta-info/all/CategoricalArrays.jl
src/array.jl,similar,mtsig,"((Tuple{Type{T}, Dims} where T <: Array{Union{CategoricalValue{U, R}, Missing}}) where R) where U","((Tuple{Type{T}, Dims} where T <: Array{Union{CategoricalValue{U, R}, Missing}}) where R) where U","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Array{Union{CategoricalValue{U, R}, Missing}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUpBnd)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:U, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/CategoricalArrays.jl
src/array.jl,similar,mtsig,"(Tuple{Type{T}, Dims} where T <: Array{Union{CategoricalValue{U}, Missing}}) where U","(Tuple{Type{T}, Dims} where T <: Array{Union{CategoricalValue{U}, Missing}}) where U","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Array{Union{CategoricalValue{U}, Missing}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:U, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUpBnd)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/CategoricalArrays.jl
src/value.jl,Base.convert,mtsig,"Tuple{Type{Union{S, Missing}}, CategoricalValue} where S <: SupportedTypes","Tuple{Type{Union{S, Missing}}, CategoricalValue} where S <: SupportedTypes","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:S, :(Union{}), :SupportedTypes, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/CategoricalArrays.jl
src/value.jl,Base.convert,mtsig,"Tuple{Type{Union{S, Nothing}}, CategoricalValue} where S <: SupportedTypes","Tuple{Type{Union{S, Nothing}}, CategoricalValue} where S <: SupportedTypes","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:S, :(Union{}), :SupportedTypes, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/CategoricalArrays.jl
src/value.jl,DataAPI.defaultarray,mtsig,"(Tuple{Type{Union{CategoricalValue{T, R}, Missing}}, Any} where R) where T","(Tuple{Type{Union{CategoricalValue{T, R}, Missing}}, Any} where R) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:R, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/CategoricalArrays.jl
src/database/database.jl,defaultmissing,mtsig,"Tuple{Array{Union{Missing, T}}, Any} where T <: AbstractString","Tuple{Array{Union{Missing, T}}, Any} where T <: AbstractString","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :AbstractString, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Clapeyron.jl
src/database/database.jl,defaultmissing,mtsig,"Tuple{Array{Union{Missing, T}}, Any} where T <: Number","Tuple{Array{Union{Missing, T}}, Any} where T <: Number","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Clapeyron.jl
src/database/database.jl,defaultmissing,mtsig,"(Tuple{Array{Union{Missing, T1, T2}}, Any} where T2 <: AbstractString) where T1 <: Number","(Tuple{Array{Union{Missing, T1, T2}}, Any} where T2 <: AbstractString) where T1 <: Number","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T2, :(Union{}), :AbstractString, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T1, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Clapeyron.jl
src/columns/LowCardinality.jl,unmissing_type,mtsig,"Tuple{Type{Union{Missing, T}}} where T","Tuple{Type{Union{Missing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/ClickHouse.jl
src/columns/Nullable.jl,write_col_data,mtsig,"Tuple{ClickHouseSock, AbstractVector{Union{Missing, T}}, Val{:Nullable}, TypeAst} where T","Tuple{ClickHouseSock, AbstractVector{Union{Missing, T}}, Val{:Nullable}, TypeAst} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], true)",false,true,1,true,true,true,true,false,../data/ta-info/all/ClickHouse.jl
src/columns/Nullable.jl,write_col_data,mtsig,"Tuple{ClickHouseSock, AbstractCategoricalVector{Union{Missing, T}}, Val{:Nullable}, TypeAst} where T","Tuple{ClickHouseSock, AbstractCategoricalVector{Union{Missing, T}}, Val{:Nullable}, TypeAst} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], true)",false,true,1,true,true,true,true,false,../data/ta-info/all/ClickHouse.jl
src/DataLayouts/cuda.jl,promote_parent_array_type,mtsig,"((Tuple{Type{CUDA.CuArray{T1, N, B} where N}, Type{CUDA.CuArray{T2, N, B} where N}} where B) where T2) where T1","((Tuple{Type{CUDA.CuArray{T1, N, B} where N}, Type{CUDA.CuArray{T2, N, B} where N}} where B) where T2) where T1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:B, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,5,true,false,false,true,false,../data/ta-info/all/ClimaCore.jl
src/DataLayouts/cuda.jl,Base.similar,mtsig,"((Tuple{Type{CUDA.CuArray{T, N′, B} where N′}, Dims{N}} where B) where N) where T","((Tuple{Type{CUDA.CuArray{T, N′, B} where N′}, Dims{N}} where B) where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N′, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:B, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/ClimaCore.jl
src/core/aggregation.jl,nomissing,mtsig,"(Tuple{AbstractArray{Union{T, Missing}, N}, Any} where N) where T","(Tuple{AbstractArray{Union{T, Missing}, N}, Any} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/ClimateBase.jl
src/core/aggregation.jl,missing_weights,mtsig,"Tuple{ClimArray{Union{T, Missing}}, Any} where T","Tuple{ClimArray{Union{T, Missing}}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/ClimateBase.jl
src/tsa/continuation.jl,_numbertype,mtsig,"Tuple{Type{Union{T, Missing}}} where T","Tuple{Type{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/ClimateBase.jl
src/finite_differences.jl,Base.copyto!,mtsig,"(Tuple{Y, Mul{<:Any, Tuple{<:ImplicitDerivative, X}}} where Y <: AbstractVector) where X <: AbstractVector","(Tuple{Y, Mul{var""##ANON_TV#1805"", Tuple{var""##ANON_TV#1806"", X} where var""##ANON_TV#1806"" <: ImplicitDerivative} where var""##ANON_TV#1805"" <: Any} where Y <: AbstractVector) where X <: AbstractVector","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1806""), :(Union{}), :ImplicitDerivative, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1805""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:Y, :(Union{}), :AbstractVector, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:X, :(Union{}), :AbstractVector, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/CompactBases.jl
src/Bridges/Constraint/NonOverlappingOrthotopes/noov_to_disjunction_milp.jl,MOI.get,mtsig,"Tuple{NonOverlappingOrthotopes2DisjunctionLPBridge{T}, MOI.NumberOfConstraints{MOI.VectorAffineFunction{T}, CP.Disjunction{NTuple{n, MOI.LessThan{T}} where n}}} where T","Tuple{NonOverlappingOrthotopes2DisjunctionLPBridge{T}, MOI.NumberOfConstraints{MOI.VectorAffineFunction{T}, CP.Disjunction{NTuple{n, MOI.LessThan{T}} where n}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:n, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/ConstraintProgrammingExtensions.jl
src/Bridges/Constraint/NonOverlappingOrthotopes/noov_to_disjunction_milp.jl,MOI.get,mtsig,"Tuple{NonOverlappingOrthotopes2DisjunctionLPBridge{T}, MOI.ListOfConstraintIndices{MOI.VectorAffineFunction{T}, CP.Disjunction{NTuple{n, MOI.LessThan{T}} where n}}} where T","Tuple{NonOverlappingOrthotopes2DisjunctionLPBridge{T}, MOI.ListOfConstraintIndices{MOI.VectorAffineFunction{T}, CP.Disjunction{NTuple{n, MOI.LessThan{T}} where n}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:n, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/ConstraintProgrammingExtensions.jl
src/state.jl,unittype,mtsig,"Tuple{Type{<:Vector{Union{V, Missing}}}} where V","Tuple{Type{var""##ANON_TV#1590""} where var""##ANON_TV#1590"" <: Vector{Union{V, Missing}}} where V","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1590""), :(Union{}), :(Vector{Union{V, Missing}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Cropbox.jl
src/elliptic_curves/elliptic_curves.jl,modulus,mtsig,"Tuple{Type{AffinePoint{<:EllipticCurve, F}}} where F <: PrimeField","Tuple{Type{AffinePoint{var""##ANON_TV#431"", F} where var""##ANON_TV#431"" <: EllipticCurve}} where F <: PrimeField","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#431""), :(Union{}), :EllipticCurve, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:F, :(Union{}), :PrimeField, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/CryptoGroups.jl
src/derived.jl,deepest,mtsig,"Tuple{Array{Union{Missing, T}, 3}} where T","Tuple{Array{Union{Missing, T}, 3}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/DIVAnd.jl
src/app/supporttypes.jl,Base.convert,mtsig,"Tuple{Type{Vector{<:T}}, T} where T <: Dependency","Tuple{Type{Vector{var""##ANON_TV#430""} where var""##ANON_TV#430"" <: T}, T} where T <: Dependency","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#430""), :(Union{}), :T, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Dependency, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/Dash.jl
src/fast-missing-count.jl,count_not_missing,mtsig,"(Tuple{Type{S}, Vector{Union{T, Missing}}} where T) where S","(Tuple{Type{S}, Vector{Union{T, Missing}}} where T) where S","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/DataConvenience.jl
src/fast-missing-count.jl,count_not_missing,mtsig,"Tuple{Vector{Union{T, Missing}}} where T","Tuple{Vector{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/DataConvenience.jl
src/fast-missing-count.jl,count_missing,mtsig,"(Tuple{Type{S}, Vector{Union{T, Missing}}} where T) where S","(Tuple{Type{S}, Vector{Union{T, Missing}}} where T) where S","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/DataConvenience.jl
src/fast-missing-count.jl,count_missing,mtsig,"Tuple{Vector{Union{T, Missing}}} where T","Tuple{Vector{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/DataConvenience.jl
src/namedtuples.jl,allocate,mtsig,"Tuple{Type{Union{WeakRefString{T}, Missing}}, Any, Any} where T","Tuple{Type{Union{WeakRefString{T}, Missing}}, Any, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/DataStreams.jl
src/query.jl,unwk,mtsig,"Tuple{Type{Union{Missing, WeakRefString{T}}}, Any} where T","Tuple{Type{Union{Missing, WeakRefString{T}}}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/DataStreams.jl
src/Either.jl,Base.eltype,mtsig,"Tuple{Type{Either{<:Any, R}}} where R","Tuple{Type{Either{var""##ANON_TV#659"", R} where var""##ANON_TV#659"" <: Any}} where R","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#659""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/convert.jl,Base.convert,mtsig,"Tuple{Type{Either{<:Any, R}}, Identity{R}} where R","Tuple{Type{Either{var""##ANON_TV#672"", R} where var""##ANON_TV#672"" <: Any}, Identity{R}} where R","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#672""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/DataTypesBasic.jl
src/convert.jl,Base.convert,mtsig,"Tuple{Type{Either{<:Any, R}}, Identity} where R","Tuple{Type{Either{var""##ANON_TV#673"", R} where var""##ANON_TV#673"" <: Any}, Identity} where R","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#673""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/convert.jl,Base.convert,mtsig,"Tuple{Type{Either{L, <:Any}}, Const{L}} where L","Tuple{Type{Either{L, var""##ANON_TV#674""} where var""##ANON_TV#674"" <: Any}, Const{L}} where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#674""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/DataTypesBasic.jl
src/convert.jl,Base.convert,mtsig,"Tuple{Type{Either{L, <:Any}}, Const} where L","Tuple{Type{Either{L, var""##ANON_TV#675""} where var""##ANON_TV#675"" <: Any}, Const} where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#675""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_rule,mtsig,"Tuple{Type{Const}, Type{Either{L, <:Any}}} where L","Tuple{Type{Const}, Type{Either{L, var""##ANON_TV#676""} where var""##ANON_TV#676"" <: Any}} where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#676""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_rule,mtsig,"Tuple{Type{Const{L}}, Type{Either{L, <:Any}}} where L","Tuple{Type{Const{L}}, Type{Either{L, var""##ANON_TV#677""} where var""##ANON_TV#677"" <: Any}} where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#677""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_rule,mtsig,"(Tuple{Type{Const{L1}}, Type{Either{L2, <:Any}}} where L2 <: L1) where L1","(Tuple{Type{Const{L1}}, Type{Either{L2, var""##ANON_TV#678""} where var""##ANON_TV#678"" <: Any}} where L2 <: L1) where L1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#678""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L2, :(Union{}), :L1, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_rule,mtsig,"(Tuple{Type{Const{L2}}, Type{Either{L1, <:Any}}} where L2 <: L1) where L1","(Tuple{Type{Const{L2}}, Type{Either{L1, var""##ANON_TV#679""} where var""##ANON_TV#679"" <: Any}} where L2 <: L1) where L1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#679""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L2, :(Union{}), :L1, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_rule,mtsig,"(Tuple{Type{Const{L1}}, Type{Either{L2, <:Any}}} where L2) where L1","(Tuple{Type{Const{L1}}, Type{Either{L2, var""##ANON_TV#680""} where var""##ANON_TV#680"" <: Any}} where L2) where L1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#680""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_rule,mtsig,"Tuple{Type{Identity}, Type{Either{<:Any, R}}} where R","Tuple{Type{Identity}, Type{Either{var""##ANON_TV#681"", R} where var""##ANON_TV#681"" <: Any}} where R","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#681""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_rule,mtsig,"Tuple{Type{Identity{R}}, Type{Either{<:Any, R}}} where R","Tuple{Type{Identity{R}}, Type{Either{var""##ANON_TV#682"", R} where var""##ANON_TV#682"" <: Any}} where R","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#682""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_rule,mtsig,"(Tuple{Type{Identity{R1}}, Type{Either{<:Any, R2}}} where R2 <: R1) where R1","(Tuple{Type{Identity{R1}}, Type{Either{var""##ANON_TV#683"", R2} where var""##ANON_TV#683"" <: Any}} where R2 <: R1) where R1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#683""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R2, :(Union{}), :R1, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_rule,mtsig,"(Tuple{Type{Identity{R2}}, Type{Either{<:Any, R1}}} where R2 <: R1) where R1","(Tuple{Type{Identity{R2}}, Type{Either{var""##ANON_TV#684"", R1} where var""##ANON_TV#684"" <: Any}} where R2 <: R1) where R1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#684""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R2, :(Union{}), :R1, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_rule,mtsig,"(Tuple{Type{Identity{R2}}, Type{Either{<:Any, R1}}} where R2) where R1","(Tuple{Type{Identity{R2}}, Type{Either{var""##ANON_TV#685"", R1} where var""##ANON_TV#685"" <: Any}} where R2) where R1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#685""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_type,mtsig,"(Tuple{Type{Either{<:Any, R1}}, Type{Either{<:Any, R2}}} where R2) where R1","(Tuple{Type{Either{var""##ANON_TV#686"", R1} where var""##ANON_TV#686"" <: Any}, Type{Either{var""##ANON_TV#687"", R2} where var""##ANON_TV#687"" <: Any}} where R2) where R1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#686""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#687""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_type,mtsig,"(Tuple{Type{Either{L1, <:Any}}, Type{Either{L2, <:Any}}} where L2) where L1","(Tuple{Type{Either{L1, var""##ANON_TV#688""} where var""##ANON_TV#688"" <: Any}, Type{Either{L2, var""##ANON_TV#689""} where var""##ANON_TV#689"" <: Any}} where L2) where L1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#688""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#689""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_rule,mtsig,"Tuple{Type{Either{L, <:Any}}, Type{Either{L, <:Any}}} where L","Tuple{Type{Either{L, var""##ANON_TV#690""} where var""##ANON_TV#690"" <: Any}, Type{Either{L, var""##ANON_TV#691""} where var""##ANON_TV#691"" <: Any}} where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#690""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#691""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_rule,mtsig,"(Tuple{Type{Either{L1, <:Any}}, Type{Either{L2, <:Any}}} where L2 <: L1) where L1","(Tuple{Type{Either{L1, var""##ANON_TV#692""} where var""##ANON_TV#692"" <: Any}, Type{Either{L2, var""##ANON_TV#693""} where var""##ANON_TV#693"" <: Any}} where L2 <: L1) where L1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#692""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#693""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L2, :(Union{}), :L1, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_rule,mtsig,"(Tuple{Type{Either{L1, <:Any}}, Type{Either{L2, <:Any}}} where L2) where L1","(Tuple{Type{Either{L1, var""##ANON_TV#694""} where var""##ANON_TV#694"" <: Any}, Type{Either{L2, var""##ANON_TV#695""} where var""##ANON_TV#695"" <: Any}} where L2) where L1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#694""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#695""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_rule,mtsig,"Tuple{Type{Either{<:Any, R}}, Type{Either{<:Any, R}}} where R","Tuple{Type{Either{var""##ANON_TV#696"", R} where var""##ANON_TV#696"" <: Any}, Type{Either{var""##ANON_TV#697"", R} where var""##ANON_TV#697"" <: Any}} where R","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#696""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#697""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_rule,mtsig,"(Tuple{Type{Either{<:Any, R1}}, Type{Either{<:Any, R2}}} where R2 <: R1) where R1","(Tuple{Type{Either{var""##ANON_TV#698"", R1} where var""##ANON_TV#698"" <: Any}, Type{Either{var""##ANON_TV#699"", R2} where var""##ANON_TV#699"" <: Any}} where R2 <: R1) where R1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#698""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#699""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R2, :(Union{}), :R1, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_rule,mtsig,"(Tuple{Type{Either{<:Any, R1}}, Type{Either{<:Any, R2}}} where R2) where R1","(Tuple{Type{Either{var""##ANON_TV#700"", R1} where var""##ANON_TV#700"" <: Any}, Type{Either{var""##ANON_TV#701"", R2} where var""##ANON_TV#701"" <: Any}} where R2) where R1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#700""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#701""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_typejoin,mtsig,"Tuple{Type{Const}, Type{Either{L, <:Any}}} where L","Tuple{Type{Const}, Type{Either{L, var""##ANON_TV#702""} where var""##ANON_TV#702"" <: Any}} where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#702""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_typejoin,mtsig,"Tuple{Type{Either{L, <:Any}}, Type{Const}} where L","Tuple{Type{Either{L, var""##ANON_TV#703""} where var""##ANON_TV#703"" <: Any}, Type{Const}} where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#703""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_typejoin,mtsig,"Tuple{Type{Const{L}}, Type{Either{L, <:Any}}} where L","Tuple{Type{Const{L}}, Type{Either{L, var""##ANON_TV#704""} where var""##ANON_TV#704"" <: Any}} where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#704""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_typejoin,mtsig,"Tuple{Type{Either{L, <:Any}}, Type{Const{L}}} where L","Tuple{Type{Either{L, var""##ANON_TV#705""} where var""##ANON_TV#705"" <: Any}, Type{Const{L}}} where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#705""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_typejoin,mtsig,"(Tuple{Type{Const{L1}}, Type{Either{L2, <:Any}}} where L2) where L1","(Tuple{Type{Const{L1}}, Type{Either{L2, var""##ANON_TV#706""} where var""##ANON_TV#706"" <: Any}} where L2) where L1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#706""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_typejoin,mtsig,"(Tuple{Type{Either{L2, <:Any}}, Type{Const{L1}}} where L2) where L1","(Tuple{Type{Either{L2, var""##ANON_TV#707""} where var""##ANON_TV#707"" <: Any}, Type{Const{L1}}} where L2) where L1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#707""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_typejoin,mtsig,"Tuple{Type{Identity}, Type{Either{<:Any, R}}} where R","Tuple{Type{Identity}, Type{Either{var""##ANON_TV#708"", R} where var""##ANON_TV#708"" <: Any}} where R","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#708""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_typejoin,mtsig,"Tuple{Type{Either{<:Any, R}}, Type{Identity}} where R","Tuple{Type{Either{var""##ANON_TV#709"", R} where var""##ANON_TV#709"" <: Any}, Type{Identity}} where R","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#709""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_typejoin,mtsig,"Tuple{Type{Identity{R}}, Type{Either{<:Any, R}}} where R","Tuple{Type{Identity{R}}, Type{Either{var""##ANON_TV#710"", R} where var""##ANON_TV#710"" <: Any}} where R","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#710""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_typejoin,mtsig,"Tuple{Type{Either{<:Any, R}}, Type{Identity{R}}} where R","Tuple{Type{Either{var""##ANON_TV#711"", R} where var""##ANON_TV#711"" <: Any}, Type{Identity{R}}} where R","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#711""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_typejoin,mtsig,"(Tuple{Type{Identity{R2}}, Type{Either{<:Any, R1}}} where R2) where R1","(Tuple{Type{Identity{R2}}, Type{Either{var""##ANON_TV#712"", R1} where var""##ANON_TV#712"" <: Any}} where R2) where R1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#712""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_typejoin,mtsig,"(Tuple{Type{Either{<:Any, R1}}, Type{Identity{R2}}} where R2) where R1","(Tuple{Type{Either{var""##ANON_TV#713"", R1} where var""##ANON_TV#713"" <: Any}, Type{Identity{R2}}} where R2) where R1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#713""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_typejoin,mtsig,"Tuple{Type{Either{L, <:Any}}, Type{Either{L, <:Any}}} where L","Tuple{Type{Either{L, var""##ANON_TV#714""} where var""##ANON_TV#714"" <: Any}, Type{Either{L, var""##ANON_TV#715""} where var""##ANON_TV#715"" <: Any}} where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#714""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#715""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_typejoin,mtsig,"(Tuple{Type{Either{L1, <:Any}}, Type{Either{L2, <:Any}}} where L2) where L1","(Tuple{Type{Either{L1, var""##ANON_TV#716""} where var""##ANON_TV#716"" <: Any}, Type{Either{L2, var""##ANON_TV#717""} where var""##ANON_TV#717"" <: Any}} where L2) where L1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#716""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#717""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_typejoin,mtsig,"(Tuple{Type{Either{<:Any, R}}, Type{Either{<:Any, R}}} where R) where L","(Tuple{Type{Either{var""##ANON_TV#718"", R} where var""##ANON_TV#718"" <: Any}, Type{Either{var""##ANON_TV#719"", R} where var""##ANON_TV#719"" <: Any}} where R) where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#718""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#719""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/DataTypesBasic.jl
src/promote_type.jl,Base.promote_typejoin,mtsig,"(Tuple{Type{Either{<:Any, R1}}, Type{Either{<:Any, R2}}} where R2) where R1","(Tuple{Type{Either{var""##ANON_TV#720"", R1} where var""##ANON_TV#720"" <: Any}, Type{Either{var""##ANON_TV#721"", R2} where var""##ANON_TV#721"" <: Any}} where R2) where R1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#720""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#721""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/DataTypesBasic.jl
src/scalar/core.jl,Base.convert,mtsig,"Tuple{Type{Union{Missing, T}}, DataValues.DataValue{T}} where T","Tuple{Type{Union{Missing, T}}, DataValues.DataValue{T}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/DataValues.jl
src/scalar/core.jl,Base.convert,mtsig,"Tuple{Type{Union{Missing, T}}, DataValues.DataValue{Union{}}} where T","Tuple{Type{Union{Missing, T}}, DataValues.DataValue{Union{}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/DataValues.jl
src/scalar/core.jl,DataValueInterfaces.datavaluetype,mtsig,"Tuple{Type{Union{T, Missing}}} where T","Tuple{Type{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/DataValues.jl
src/dsutils.jl,sblockdiag,mtsig,"Tuple{Vector{Int}, Vararg{Union{AbstractMatrix{T}, UniformScaling}}} where T","Tuple{Vector{Int}, Vararg{Union{AbstractMatrix{T}, UniformScaling}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/DescriptorSystems.jl
src/generic.jl,Base.rand,mtsig,"((Tuple{AbstractRNG, SamplerType{Single{V, G, B, T} where B}} where T) where G) where V","((Tuple{AbstractRNG, SamplerType{Single{V, G, B, T} where B}} where T) where G) where V","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:B, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:G, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/DirectSum.jl
src/generic.jl,Base.rand,mtsig,"(Tuple{AbstractRNG, SamplerType{Single{V, G, B, T} where {G, B}}} where T) where V","(Tuple{AbstractRNG, SamplerType{(Single{V, G, B, T} where G) where B}} where T) where V","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:G, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:B, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/DirectSum.jl
src/generic.jl,_eltype,mtsig,"Tuple{Type{Union{Missing, T}}} where T","Tuple{Type{Union{Missing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Distances.jl
src/distributionvector.jl,SimpleDistributionVector,mtsig,"(Tuple{Vararg{Union{Missing, D}, N}} where N) where D <: Distribution","(Tuple{Vararg{Union{Missing, D}, N}} where N) where D <: Distribution","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:D, :(Union{}), :Distribution, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/DistributionVectors.jl
src/distributionvector.jl,ParamDistributionVector,mtsig,"(Tuple{Vararg{Union{Missing, D}, N}} where N) where D <: Distribution","(Tuple{Vararg{Union{Missing, D}, N}} where N) where D <: Distribution","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:D, :(Union{}), :Distribution, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/DistributionVectors.jl
src/univariate/continuous/lognormal.jl,sum,mtsig,"((Tuple{AbstractDistributionVector{D}, AutoCorrelationFunction, MissingStrategy, AbstractVector{Bool}, AbstractVector{Union{Missing, ST}}, Val{M}} where M) where ST <: eltype(D)) where D <: LogNormal","((Tuple{AbstractDistributionVector{D}, AutoCorrelationFunction, MissingStrategy, AbstractVector{Bool}, AbstractVector{Union{Missing, ST}}, Val{M}} where M) where ST <: eltype(D)) where D <: LogNormal","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:M, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:ST, :(Union{}), :(eltype(D)), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:D, :(Union{}), :LogNormal, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCCall, JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/DistributionVectors.jl
src/univariate/continuous/lognormal.jl,sum_lognormals,mtsig,"(Tuple{AbstractDistributionVector{D}, AutoCorrelationFunction, MissingStrategy, AbstractVector{Bool}, AbstractVector{Union{Missing, DS}}} where DS <: eltype(D)) where D <: LogNormal","(Tuple{AbstractDistributionVector{D}, AutoCorrelationFunction, MissingStrategy, AbstractVector{Bool}, AbstractVector{Union{Missing, DS}}} where DS <: eltype(D)) where D <: LogNormal","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:DS, :(Union{}), :(eltype(D)), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:D, :(Union{}), :LogNormal, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCCall, JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/DistributionVectors.jl
src/univariate/continuous/lognormal.jl,sum,mtsig,"(Tuple{AbstractDistributionVector{D}, Symmetric, MissingStrategy, AbstractArray{Bool, 1}, AbstractVector{Union{Missing, DS}}} where DS <: eltype(D)) where D <: LogNormal","(Tuple{AbstractDistributionVector{D}, Symmetric, MissingStrategy, AbstractArray{Bool, 1}, AbstractVector{Union{Missing, DS}}} where DS <: eltype(D)) where D <: LogNormal","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:DS, :(Union{}), :(eltype(D)), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:D, :(Union{}), :LogNormal, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCCall, JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/DistributionVectors.jl
src/univariate/continuous/lognormal.jl,sum_lognormals,mtsig,"(Tuple{AbstractDistributionVector{D}, Symmetric, MissingStrategy, AbstractVector{Bool}, AbstractVector{Union{Missing, DS}}} where DS <: eltype(D)) where D <: LogNormal","(Tuple{AbstractDistributionVector{D}, Symmetric, MissingStrategy, AbstractVector{Bool}, AbstractVector{Union{Missing, DS}}} where DS <: eltype(D)) where D <: LogNormal","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:DS, :(Union{}), :(eltype(D)), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:D, :(Union{}), :LogNormal, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCCall, JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/DistributionVectors.jl
src/univariate/continuous/normal.jl,sum,mtsig,"(Tuple{AbstractDistributionVector{D}, AutoCorrelationFunction, MissingStrategy, AbstractVector{Bool}, AbstractVector{Union{Missing, DS}}} where DS <: eltype(D)) where D <: Normal","(Tuple{AbstractDistributionVector{D}, AutoCorrelationFunction, MissingStrategy, AbstractVector{Bool}, AbstractVector{Union{Missing, DS}}} where DS <: eltype(D)) where D <: Normal","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:DS, :(Union{}), :(eltype(D)), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:D, :(Union{}), :Normal, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCCall, JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/DistributionVectors.jl
src/univariate/continuous/normal.jl,sum,mtsig,"(Tuple{AbstractDistributionVector{D}, Symmetric, MissingStrategy, AbstractArray{Bool, 1}, AbstractVector{Union{Missing, DS}}} where DS <: eltype(D)) where D <: Normal","(Tuple{AbstractDistributionVector{D}, Symmetric, MissingStrategy, AbstractArray{Bool, 1}, AbstractVector{Union{Missing, DS}}} where DS <: eltype(D)) where D <: Normal","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:DS, :(Union{}), :(eltype(D)), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:D, :(Union{}), :Normal, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCCall, JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/DistributionVectors.jl
src/univariate/continuous/normal.jl,sum_normals,mtsig,"(Tuple{AbstractDistributionVector{D}, Symmetric, MissingStrategy, AbstractArray{Bool, 1}, AbstractVector{Union{Missing, DS}}} where DS <: eltype(D)) where D <: Normal","(Tuple{AbstractDistributionVector{D}, Symmetric, MissingStrategy, AbstractArray{Bool, 1}, AbstractVector{Union{Missing, DS}}} where DS <: eltype(D)) where D <: Normal","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:DS, :(Union{}), :(eltype(D)), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:D, :(Union{}), :Normal, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCCall, JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/DistributionVectors.jl
src/reshaped.jl,Base.eltype,mtsig,"Tuple{Type{ReshapedDistribution{<:Any, <:ValueSupport, D}}} where D","Tuple{Type{(ReshapedDistribution{var""##ANON_TV#624"", var""##ANON_TV#625"", D} where var""##ANON_TV#624"" <: Any) where var""##ANON_TV#625"" <: ValueSupport}} where D","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#624""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#625""), :(Union{}), :ValueSupport, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:D, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/Distributions.jl
src/constructors-helpers.jl,_handlepairs,mtsig,(Tuple{Vararg{Pair{<:T}{<:V}}} where V <: NoDimNum) where T <: Number,"(Tuple{Vararg{(Pair{var""##ANON_TV#869""} where var""##ANON_TV#869"" <: T){var""##ANON_TV#870""} where var""##ANON_TV#870"" <: V}} where V <: NoDimNum) where T <: Number","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#870""), :(Union{}), :V, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V, :(Union{}), :NoDimNum, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[], nil(JuliaSub.TypeConstructor))], true)",false,true,3,true,false,true,true,false,../data/ta-info/all/DutyCycles.jl
src/constructors-helpers.jl,_handlepairswithpossibleunits,mtsig,(Tuple{Vararg{Pair{<:T}{<:V}}} where V <: Number) where T <: Number,"(Tuple{Vararg{(Pair{var""##ANON_TV#871""} where var""##ANON_TV#871"" <: T){var""##ANON_TV#872""} where var""##ANON_TV#872"" <: V}} where V <: Number) where T <: Number","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#872""), :(Union{}), :V, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[], nil(JuliaSub.TypeConstructor))], true)",false,true,3,true,false,true,true,false,../data/ta-info/all/DutyCycles.jl
src/trajectories.jl,eltype,mtsig,"Tuple{Type{From{I, <:Any}}} where I","Tuple{Type{From{I, var""##ANON_TV#511""} where var""##ANON_TV#511"" <: Any}} where I","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#511""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:I, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/DynamicIterators.jl
src/finds.jl,find,mtsig,"Tuple{Vector{Union{Nothing, T}}, Any, Int, Int} where T","Tuple{Vector{Union{Nothing, T}}, Any, Int, Int} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/DynamicSparseArrays.jl
src/finds.jl,find,mtsig,"Tuple{Vector{Union{Nothing, T}}, Any} where T","Tuple{Vector{Union{Nothing, T}}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/DynamicSparseArrays.jl
test/utils.jl,check_semaphores,mtsig,"(Tuple{Vector{Union{Nothing, Tuple{K, T}}}, Any} where T) where K","(Tuple{Vector{Union{Nothing, Tuple{K, T}}}, Any} where T) where K","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/DynamicSparseArrays.jl
test/utils.jl,check_key_order,mtsig,"(Tuple{Vector{Union{Nothing, Tuple{K, T}}}, Any} where T) where K","(Tuple{Vector{Union{Nothing, Tuple{K, T}}}, Any} where T) where K","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/DynamicSparseArrays.jl
src/MSC.jl,getMedSC,mtsig,"Tuple{AbstractVector{Union{T, Missing}}, AbstractVector} where T","Tuple{AbstractVector{Union{T, Missing}}, AbstractVector} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/EarthDataLab.jl
src/client/client.jl,add!,mtsig,"(Tuple{Dict{U, Union{Vector{T}}}, U, T} where T) where U","(Tuple{Dict{U, Union{Vector{T}}}, U, T} where T) where U","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:U, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/Ekztazy.jl
src/Types.jl,Base.convert,mtsig,"Tuple{Type{Optional{S, T} where S}, Any} where T","Tuple{Type{Optional{S, T} where S}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/ExtraFun.jl
src/Types.jl,Base.convert,mtsig,"Tuple{Type{Optional{S1, T} where S1}, Optional{S2, T} where S2} where T","Tuple{Type{Optional{S1, T} where S1}, Optional{S2, T} where S2} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:S1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/ExtraFun.jl
src/Types.jl,Base.convert,mtsig,"(Tuple{Type{Optional{S1, T} where S1}, Optional{S2}} where T) where S2","(Tuple{Type{Optional{S1, T} where S1}, Optional{S2}} where T) where S2","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:S1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/ExtraFun.jl
src/metadata.jl,feathertype,mtsig,"Tuple{Type{Union{T, Missing}}} where T","Tuple{Type{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/metadata.jl,getmetadata,mtsig,"Tuple{IO, Type{Union{T, Missing}}, ArrowVector} where T","Tuple{IO, Type{Union{T, Missing}}, ArrowVector} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/metadata.jl,getmetadata,mtsig,"Tuple{IO, Type{Union{T, Missing}}, DictEncoding} where T","Tuple{IO, Type{Union{T, Missing}}, DictEncoding} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/sink.jl,getarrow,mtsig,"Tuple{AbstractVector{Union{T, Missing}}} where T","Tuple{AbstractVector{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/source.jl,constructcolumn,mtsig,"Tuple{Type{Union{T, Missing}}, Vector{UInt8}, Metadata.CategoryMetadata, Metadata.Column} where T","Tuple{Type{Union{T, Missing}}, Vector{UInt8}, Metadata.CategoryMetadata, Metadata.Column} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/arrowvectors.jl,bitmaskpointer,mtsig,"Tuple{ArrowVector{Union{J, Missing}}} where J","Tuple{ArrowVector{Union{J, Missing}}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/arrowvectors.jl,nullcount,mtsig,"Tuple{ArrowVector{Union{T, Missing}}} where T","Tuple{ArrowVector{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/arrowvectors.jl,unsafe_isnull,mtsig,"Tuple{ArrowVector{Union{J, Missing}}, Integer} where J","Tuple{ArrowVector{Union{J, Missing}}, Integer} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/arrowvectors.jl,unsafe_isnull,mtsig,"Tuple{ArrowVector{Union{J, Missing}}, AbstractVector{<:Integer}} where J","Tuple{ArrowVector{Union{J, Missing}}, AbstractVector{var""##ANON_TV#997""} where var""##ANON_TV#997"" <: Integer} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#997""), :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/arrowvectors.jl,unsafe_isnull,mtsig,"Tuple{AbstractVector{Union{J, Missing}}, AbstractVector{Bool}} where J","Tuple{AbstractVector{Union{J, Missing}}, AbstractVector{Bool}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/arrowvectors.jl,isnull,mtsig,"Tuple{ArrowVector{Union{J, Missing}}, Integer} where J","Tuple{ArrowVector{Union{J, Missing}}, Integer} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/arrowvectors.jl,unsafe_rawbitmask,mtsig,"Tuple{ArrowVector{Union{J, Missing}}} where J","Tuple{ArrowVector{Union{J, Missing}}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/arrowvectors.jl,setnull!,mtsig,"Tuple{ArrowVector{Union{J, Missing}}, Bool, Integer} where J","Tuple{ArrowVector{Union{J, Missing}}, Bool, Integer} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/arrowvectors.jl,setnulls!,mtsig,"Tuple{ArrowVector{Union{J, Missing}}, Vector{UInt8}} where J","Tuple{ArrowVector{Union{J, Missing}}, Vector{UInt8}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/arrowvectors.jl,setnulls!,mtsig,"Tuple{ArrowVector{Union{J, Missing}}, AbstractVector{Bool}} where J","Tuple{ArrowVector{Union{J, Missing}}, AbstractVector{Bool}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/arrowvectors.jl,unsafe_setnull!,mtsig,"Tuple{ArrowVector{Union{J, Missing}}, Bool, Integer} where J","Tuple{ArrowVector{Union{J, Missing}}, Bool, Integer} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/arrowvectors.jl,unsafe_setnulls!,mtsig,"Tuple{ArrowVector{Union{J, Missing}}, Vector{UInt8}} where J","Tuple{ArrowVector{Union{J, Missing}}, Vector{UInt8}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/arrowvectors.jl,unsafe_setnulls!,mtsig,"Tuple{ArrowVector{Union{J, Missing}}, AbstractVector{Bool}} where J","Tuple{ArrowVector{Union{J, Missing}}, AbstractVector{Bool}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/arrowvectors.jl,$name,mtsig,"Tuple{AbstractVector{Union{J, Missing}}, ArrowVector{Union{J, Missing}}, AbstractVector{<:Integer}} where J","Tuple{AbstractVector{Union{J, Missing}}, ArrowVector{Union{J, Missing}}, AbstractVector{var""##ANON_TV#1001""} where var""##ANON_TV#1001"" <: Integer} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1001""), :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/Feather.jl
src/arrow/arrowvectors.jl,$name,mtsig,"Tuple{AbstractVector{Union{J, Missing}}, ArrowVector{Union{J, Missing}}, AbstractVector{Bool}} where J","Tuple{AbstractVector{Union{J, Missing}}, ArrowVector{Union{J, Missing}}, AbstractVector{Bool}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Feather.jl
src/arrow/arrowvectors.jl,$name,mtsig,"Tuple{AbstractVector{Union{J, Missing}}, ArrowVector{Union{J, Missing}}} where J","Tuple{AbstractVector{Union{J, Missing}}, ArrowVector{Union{J, Missing}}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Feather.jl
src/arrow/arrowvectors.jl,Base.getindex,mtsig,"Tuple{ArrowVector{Union{J, Missing}}, Integer} where J","Tuple{ArrowVector{Union{J, Missing}}, Integer} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/arrowvectors.jl,Base.getindex,mtsig,"Tuple{ArrowVector{Union{J, Missing}}, AbstractVector{<:Integer}} where J","Tuple{ArrowVector{Union{J, Missing}}, AbstractVector{var""##ANON_TV#1006""} where var""##ANON_TV#1006"" <: Integer} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1006""), :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/dictencoding.jl,DictEncoding,mtsig,"(Tuple{Vector{UInt8}, Integer, Integer, Integer, CategoricalArray{Union{J, Missing}, 1, U}} where U) where J","(Tuple{Vector{UInt8}, Integer, Integer, Integer, CategoricalArray{Union{J, Missing}, 1, U}} where U) where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:U, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/dictencoding.jl,DictEncoding,mtsig,"(Tuple{Vector{UInt8}, Integer, CategoricalArray{Union{J, Missing}, 1, U}} where U) where J","(Tuple{Vector{UInt8}, Integer, CategoricalArray{Union{J, Missing}, 1, U}} where U) where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:U, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/dictencoding.jl,_getrefsvec,mtsig,"((Tuple{DictEncoding{J, R}, AbstractVector{<:Integer}} where R <: ArrowVector{Union{K, Missing}}) where K) where J","((Tuple{DictEncoding{J, R}, AbstractVector{var""##ANON_TV#1018""} where var""##ANON_TV#1018"" <: Integer} where R <: ArrowVector{Union{K, Missing}}) where K) where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1018""), :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R, :(Union{}), :(ArrowVector{Union{K, Missing}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUpBnd)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/dictencoding.jl,pool,mtsig,"((Tuple{DictEncoding{Union{J, Missing}, R}} where R <: ReferenceType{K}) where K) where J","((Tuple{DictEncoding{Union{J, Missing}, R}} where R <: ReferenceType{K}) where K) where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:R, :(Union{}), :(ReferenceType{K}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/dictencoding.jl,nullcount,mtsig,"Tuple{DictEncoding{Union{J, Missing}}} where J","Tuple{DictEncoding{Union{J, Missing}}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/dictencoding.jl,getrefs,mtsig,"(Tuple{CategoricalArray{Union{J, Missing}, 1, U}} where U) where J","(Tuple{CategoricalArray{Union{J, Missing}, 1, U}} where U) where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:U, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/dictencoding.jl,refsbytes,mtsig,"Tuple{Type{Union{J, Missing}}, Integer} where J","Tuple{Type{Union{J, Missing}}, Integer} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/dictencoding.jl,refsbytes,mtsig,"Tuple{Type{Union{J, Missing}}, AbstractVector} where J","Tuple{Type{Union{J, Missing}}, AbstractVector} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/dictencoding.jl,refsbytes,mtsig,"Tuple{AbstractVector{Union{J, Missing}}} where J","Tuple{AbstractVector{Union{J, Missing}}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/dictencoding.jl,totalbytes,mtsig,"(Tuple{CategoricalArray{Union{J, Missing}, 1, U}} where U) where J","(Tuple{CategoricalArray{Union{J, Missing}, 1, U}} where U) where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:U, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/lists.jl,NullableList,mtsig,"(Tuple{Vector{UInt8}, Integer, AbstractVector{Union{J, Missing}}} where K <: Integer) where J","(Tuple{Vector{UInt8}, Integer, AbstractVector{Union{J, Missing}}} where K <: Integer) where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:K, :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/lists.jl,NullableList,mtsig,"(Tuple{Type{<:Array}, AbstractVector{Union{J, Missing}}} where K <: Integer) where J","(Tuple{Type{var""##ANON_TV#1029""} where var""##ANON_TV#1029"" <: Array, AbstractVector{Union{J, Missing}}} where K <: Integer) where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1029""), :(Union{}), :Array, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/lists.jl,NullableList,mtsig,"(Tuple{Type{C}, AbstractVector{Union{J, Missing}}} where J) where C","(Tuple{Type{C}, AbstractVector{Union{J, Missing}}} where J) where C","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:C, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/lists.jl,totalbytes,mtsig,"((Tuple{Type{Union{J, Missing}}, Type{K}, Type{C}, AbstractVector} where C) where K <: Integer) where J","((Tuple{Type{Union{J, Missing}}, Type{K}, Type{C}, AbstractVector} where C) where K <: Integer) where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:C, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/locate.jl,containertype,mtsig,"Tuple{Type{Union{J, Missing}}, Any} where J","Tuple{Type{Union{J, Missing}}, Any} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/locate.jl,locate,mtsig,"((Tuple{Vector{UInt8}, Type{Union{J, Missing}}, Locate.Bitmask, Locate.Offsets{K}, Locate.Values{C}, Integer} where C) where K <: Integer) where J","((Tuple{Vector{UInt8}, Type{Union{J, Missing}}, Locate.Bitmask, Locate.Offsets{K}, Locate.Values{C}, Integer} where C) where K <: Integer) where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:C, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/locate.jl,locate,mtsig,"(Tuple{Type{NullablePrimitive}, Vector{UInt8}, Type{Union{J, Missing}}, T} where T) where J","(Tuple{Type{NullablePrimitive}, Vector{UInt8}, Type{Union{J, Missing}}, T} where T) where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/primitives.jl,NullablePrimitive,mtsig,"Tuple{Vector{UInt8}, Integer, Integer, AbstractVector{Union{J, Missing}}} where J","Tuple{Vector{UInt8}, Integer, Integer, AbstractVector{Union{J, Missing}}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/primitives.jl,NullablePrimitive,mtsig,"Tuple{Type{<:Array}, AbstractVector{Union{J, Missing}}} where J","Tuple{Type{var""##ANON_TV#1036""} where var""##ANON_TV#1036"" <: Array, AbstractVector{Union{J, Missing}}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1036""), :(Union{}), :Array, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/primitives.jl,NullablePrimitive,mtsig,"Tuple{AbstractVector{Union{J, Missing}}} where J","Tuple{AbstractVector{Union{J, Missing}}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/primitives.jl,valuesbytes,mtsig,"Tuple{AbstractVector{Union{J, Missing}}} where J","Tuple{AbstractVector{Union{J, Missing}}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/primitives.jl,bitmaskbytes,mtsig,"Tuple{Type{Union{J, Missing}}, AbstractVector{J}} where J","Tuple{Type{Union{J, Missing}}, AbstractVector{J}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Feather.jl
src/arrow/primitives.jl,minbitmaskbytes,mtsig,"Tuple{Type{Union{J, Missing}}, AbstractVector{Union{J, Missing}}} where J","Tuple{Type{Union{J, Missing}}, AbstractVector{Union{J, Missing}}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Feather.jl
src/arrow/primitives.jl,bitmaskbytes,mtsig,"Tuple{AbstractVector{Union{J, Missing}}} where J","Tuple{AbstractVector{Union{J, Missing}}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/primitives.jl,totalbytes,mtsig,"Tuple{Type{Union{J, Missing}}, AbstractVector{J}} where J","Tuple{Type{Union{J, Missing}}, AbstractVector{J}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Feather.jl
src/arrow/primitives.jl,totalbytes,mtsig,"Tuple{Type{Union{J, Missing}}, AbstractVector{Union{J, Missing}}} where J","Tuple{Type{Union{J, Missing}}, AbstractVector{Union{J, Missing}}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Feather.jl
src/arrow/utils.jl,encode,mtsig,"(Tuple{Type{C}, AbstractVector{Union{J, Missing}}} where J) where C","(Tuple{Type{C}, AbstractVector{Union{J, Missing}}} where J) where C","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:C, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/utils.jl,encode,mtsig,"(Tuple{Type{C}, AbstractVector{Union{J, Missing}}} where J <: AbstractString) where C","(Tuple{Type{C}, AbstractVector{Union{J, Missing}}} where J <: AbstractString) where C","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :AbstractString, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:C, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/utils.jl,replace_missing_vals,mtsig,"Tuple{AbstractVector{Union{J, Missing}}} where J <: Number","Tuple{AbstractVector{Union{J, Missing}}} where J <: Number","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/arrow/utils.jl,replace_missing_vals,mtsig,"Tuple{AbstractVector{Union{J, Missing}}} where J","Tuple{AbstractVector{Union{J, Missing}}} where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Feather.jl
src/missing-conversion.jl,Base.getindex,mtsig,"(Tuple{DataValueArrowVector{J, T}, Any} where T <: Arrow.DictEncoding{Union{Missing, J}}) where J","(Tuple{DataValueArrowVector{J, T}, Any} where T <: Arrow.DictEncoding{Union{Missing, J}}) where J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Arrow.DictEncoding{Union{Missing, J}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/FeatherFiles.jl
src/metadata.jl,feathertype,mtsig,"Tuple{Type{Union{T, Missing}}} where T","Tuple{Type{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/FeatherLib.jl
src/metadata.jl,getmetadata,mtsig,"Tuple{IO, Type{Union{T, Missing}}, ArrowVector} where T","Tuple{IO, Type{Union{T, Missing}}, ArrowVector} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/FeatherLib.jl
src/metadata.jl,getmetadata,mtsig,"Tuple{IO, Type{Union{Missing, T}}, DictEncoding} where T","Tuple{IO, Type{Union{Missing, T}}, DictEncoding} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/FeatherLib.jl
src/read.jl,constructcolumn,mtsig,"Tuple{Type{Union{T, Missing}}, Vector{UInt8}, Metadata.CategoryMetadata, Metadata.Column} where T","Tuple{Type{Union{T, Missing}}, Vector{UInt8}, Metadata.CategoryMetadata, Metadata.Column} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/FeatherLib.jl
src/write.jl,_first_col_convert_pass,mtsig,"Tuple{AbstractVector{Union{T, Missing}}} where T","Tuple{AbstractVector{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/FeatherLib.jl
src/path.jl,Base.:*,mtsig,"Tuple{T, Vararg{Union{T, AbstractString, AbstractChar}}} where T <: AbstractPath","Tuple{T, Vararg{Union{T, AbstractString, AbstractChar}}} where T <: AbstractPath","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :AbstractPath, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/FilePathsBase.jl
src/utils/basecol.jl,Combination,mtsig,"Tuple{Vararg{Union{AbstractVector{T}, AbstractMatrix{T}}}} where T","Tuple{Vararg{Union{AbstractVector{T}, AbstractMatrix{T}}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/FixedEffectModels.jl
src/0_Structs_And_Enums.jl,FunctionEvaluationResult,mtsig,"(Tuple{Vector{T}, Vector{Union{Missing, R}}, Symbol, Union{Missing, NamedTuple}} where T <: Real) where R <: Real","(Tuple{Vector{T}, Vector{Union{Missing, R}}, Symbol, Union{Missing, NamedTuple}} where T <: Real) where R <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/FixedPointAcceleration.jl
src/nothingindex.jl,Indexing.ViewArray,mtsig,"Tuple{Any, AbstractArray{Union{NothingIndex, TI}} where TI}","Tuple{Any, AbstractArray{Union{NothingIndex, TI}} where TI}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:TI, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar)], list(JuliaSub.TCTuple))], false)",false,false,1,true,true,false,true,false,../data/ta-info/all/FlexiJoins.jl
src/onehot.jl,Base.cat,mtsig,"Tuple{OneHotLike{<:Any, L}, Vararg{OneHotLike{<:Any, L}}, Int} where L","Tuple{OneHotLike{var""##ANON_TV#893"", L} where var""##ANON_TV#893"" <: Any, Vararg{OneHotLike{var""##ANON_TV#894"", L} where var""##ANON_TV#894"" <: Any}, Int} where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#893""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#894""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/Flux.jl
src/arsim.jl,arsim,mtsig,"Tuple{AR, Integer, Union{Nothing, AbstractVector{Union{Missing, T}}}} where T <: Real","Tuple{AR, Integer, Union{Nothing, AbstractVector{Union{Missing, T}}}} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Forecast.jl
src/arsim.jl,arsim,mtsig,"Tuple{T, T, T, Integer, T, Union{Nothing, Distribution}, Union{Nothing, AbstractVector{Union{Missing, T}}}} where T <: Real","Tuple{T, T, T, Integer, T, Union{Nothing, Distribution}, Union{Nothing, AbstractVector{Union{Missing, T}}}} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple), list(JuliaSub.TCTuple), list(JuliaSub.TCTuple), list(JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Forecast.jl
src/arsim.jl,arsim,mtsig,"Tuple{AbstractVector{T}, T, AbstractVector{T}, Integer, T, Union{Nothing, Distribution}, Union{Nothing, AbstractVector{Union{Missing, T}}}} where T <: Real","Tuple{AbstractVector{T}, T, AbstractVector{T}, Integer, T, Union{Nothing, Distribution}, Union{Nothing, AbstractVector{Union{Missing, T}}}} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Forecast.jl
src/arsim.jl,arsim,mtsig,"Tuple{AbstractArray{T}, AbstractVector{T}, AbstractArray{T}, Integer, Matrix{T}, Union{Nothing, Distribution}, Union{Nothing, AbstractMatrix{Union{Missing, T}}}} where T <: Real","Tuple{AbstractArray{T}, AbstractVector{T}, AbstractArray{T}, Integer, Matrix{T}, Union{Nothing, Distribution}, Union{Nothing, AbstractMatrix{Union{Missing, T}}}} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Forecast.jl
src/algorithms/posterior_factorization.jl,PosteriorFactorization,mtsig,"Tuple{Vararg{Union{T, Set{T}, Vector{T}} where T <: Variable}, Any}","Tuple{Vararg{Union{T, Set{T}, Vector{T}} where T <: Variable}, Any}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Variable, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion), list(JuliaSub.TCInvar, JuliaSub.TCUnion), list(JuliaSub.TCInvar, JuliaSub.TCUnion)], list(JuliaSub.TCInvar, JuliaSub.TCTuple))], false)",false,false,1,true,false,false,false,true,../data/ta-info/all/ForneyLab.jl
src/PersistentMap.jl,PersistentArrayMap,mtsig,"(Tuple{Vararg{Union{Tuple{K, V}, Pair{K, V}}}} where V) where K","(Tuple{Vararg{Union{Tuple{K, V}, Pair{K, V}}}} where V) where K","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:V, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/FunctionalCollections.jl
src/StateMachine.jl,sandboxStateMachineStep,mtsig,"Tuple{Vector{Tuple{DateTime, Int, <:Function, T}}, Int} where T","Tuple{Vector{Tuple{DateTime, Int, var""##ANON_TV#562"", T} where var""##ANON_TV#562"" <: Function}, Int} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#562""), :(Union{}), :Function, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/FunctionalStateMachine.jl
src/StateMachineAnimation.jl,animateStateMachineHistoryByTime,mtsig,"Tuple{Vector{Tuple{DateTime, Int, <:Function, T}}, Int, Any, String, Bool, Any, Any, Bool, AbstractString} where T","Tuple{Vector{Tuple{DateTime, Int, var""##ANON_TV#563"", T} where var""##ANON_TV#563"" <: Function}, Int, Any, String, Bool, Any, Any, Bool, AbstractString} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#563""), :(Union{}), :Function, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/FunctionalStateMachine.jl
src/StateMachineAnimation.jl,animateStateMachineHistoryByTimeCompound,mtsig,"Tuple{Dict{Symbol, Vector{Tuple{DateTime, Int, <:Function, T}}}, Any, Any, Int, Any, String, Bool, Bool, Bool, Dict{Symbol, String}, AbstractString, Function} where T","Tuple{Dict{Symbol, Vector{Tuple{DateTime, Int, var""##ANON_TV#564"", T} where var""##ANON_TV#564"" <: Function}}, Any, Any, Int, Any, String, Bool, Bool, Bool, Dict{Symbol, String}, AbstractString, Function} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#564""), :(Union{}), :Function, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/FunctionalStateMachine.jl
src/StateMachineAnimation.jl,getTotalNumberSteps,mtsig,"Tuple{Dict{Symbol, Vector{Tuple{DateTime, Int, <:Function, T}}}} where T","Tuple{Dict{Symbol, Vector{Tuple{DateTime, Int, var""##ANON_TV#565"", T} where var""##ANON_TV#565"" <: Function}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#565""), :(Union{}), :Function, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/FunctionalStateMachine.jl
src/StateMachineAnimation.jl,getFirstStepHist,mtsig,"Tuple{Dict{Symbol, Vector{Tuple{DateTime, Int, <:Function, T}}}} where T","Tuple{Dict{Symbol, Vector{Tuple{DateTime, Int, var""##ANON_TV#566"", T} where var""##ANON_TV#566"" <: Function}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#566""), :(Union{}), :Function, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/FunctionalStateMachine.jl
src/StateMachineAnimation.jl,animateStateMachineHistoryIntervalCompound,mtsig,"(Tuple{Dict{Symbol, Vector{Tuple{DateTime, Int, <:Function, T}}}, Dict{Symbol, N}, Int, Any, Int, String, Bool, Bool, Bool, Function, Dict{Symbol, String}, AbstractString, Function} where N) where T","(Tuple{Dict{Symbol, Vector{Tuple{DateTime, Int, var""##ANON_TV#567"", T} where var""##ANON_TV#567"" <: Function}}, Dict{Symbol, N}, Int, Any, Int, String, Bool, Bool, Bool, Function, Dict{Symbol, String}, AbstractString, Function} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#567""), :(Union{}), :Function, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/FunctionalStateMachine.jl
src/columns.jl,RLEVector,mtsig,"(Tuple{Type{<:Signed}, Type{Union{S, T}}} where T) where S","(Tuple{Type{var""##ANON_TV#1933""} where var""##ANON_TV#1933"" <: Signed, Type{Union{S, T}}} where T) where S","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1933""), :(Union{}), :Signed, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/FunctionalTables.jl
src/dataset_loading.jl,_to,mtsig,"Tuple{Type{Union{Missing, T}}, String} where T <: Number","Tuple{Type{Union{Missing, T}}, String} where T <: Number","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/GHCNData.jl
src/utils/basecol.jl,Combination,mtsig,"Tuple{Vararg{Union{AbstractVector{T}, AbstractMatrix{T}}}} where T","Tuple{Vararg{Union{AbstractVector{T}, AbstractMatrix{T}}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/GLFixedEffectModels.jl
src/record.jl,vectorise,mtsig,"Tuple{AbstractArray{Union{Missing, T}, 1}} where T","Tuple{AbstractArray{Union{Missing, T}, 1}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/GenomicAnnotations.jl
src/fixed_arrays.jl,eltype_or,mtsig,"Tuple{Type{($name){S, T} where S}, Any} where T","Tuple{Type{($name){S, T} where S}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/GeometryBasics.jl
src/fixed_arrays.jl,eltype_or,mtsig,"Tuple{Type{($name){S, T} where T}, Any} where S","Tuple{Type{($name){S, T} where T}, Any} where S","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/GeometryBasics.jl
src/fixed_arrays.jl,size_or,mtsig,"Tuple{Type{($name){S, T} where S}, Any} where T","Tuple{Type{($name){S, T} where S}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/GeometryBasics.jl
src/fixed_arrays.jl,size_or,mtsig,"Tuple{Type{($name){S, T} where T}, Any} where S","Tuple{Type{($name){S, T} where T}, Any} where S","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/GeometryBasics.jl
src/FixedSizeArrays.jl,eltype_or,mtsig,"Tuple{Type{($name){S, T} where S}, Any} where T","Tuple{Type{($name){S, T} where S}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/GeometryTypes.jl
src/FixedSizeArrays.jl,eltype_or,mtsig,"Tuple{Type{($name){S, T} where T}, Any} where S","Tuple{Type{($name){S, T} where T}, Any} where S","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/GeometryTypes.jl
src/FixedSizeArrays.jl,size_or,mtsig,"Tuple{Type{($name){S, T} where S}, Any} where T","Tuple{Type{($name){S, T} where S}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/GeometryTypes.jl
src/FixedSizeArrays.jl,size_or,mtsig,"Tuple{Type{($name){S, T} where T}, Any} where S","Tuple{Type{($name){S, T} where T}, Any} where S","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/GeometryTypes.jl
src/Gnuplot.jl,hist,mtsig,"Tuple{Vector{Union{Missing, T}}, Vararg{Any}} where T <: Real","Tuple{Vector{Union{Missing, T}}, Vararg{Any}} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Gnuplot.jl
src/Gnuplot.jl,hist,mtsig,"(Tuple{Vector{Union{Missing, T1}}, Vector{T2}, Vararg{Any}} where T2 <: Real) where T1 <: Real","(Tuple{Vector{Union{Missing, T1}}, Vector{T2}, Vararg{Any}} where T2 <: Real) where T1 <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T2, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T1, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Gnuplot.jl
src/Gnuplot.jl,hist,mtsig,"(Tuple{Vector{T1}, Vector{Union{Missing, T2}}, Vararg{Any}} where T2 <: Real) where T1 <: Real","(Tuple{Vector{T1}, Vector{Union{Missing, T2}}, Vararg{Any}} where T2 <: Real) where T1 <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T2, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T1, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Gnuplot.jl
src/Gnuplot.jl,hist,mtsig,"(Tuple{Vector{Union{Missing, T1}}, Vector{Union{Missing, T2}}, Vararg{Any}} where T2 <: Real) where T1 <: Real","(Tuple{Vector{Union{Missing, T1}}, Vector{Union{Missing, T2}}, Vararg{Any}} where T2 <: Real) where T1 <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T2, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T1, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Gnuplot.jl
src/types.jl,Base.convert,mtsig,"Tuple{Type{Union{T, Nothing}}, Some{Nothing}} where T <: GraphQLNode","Tuple{Type{Union{T, Nothing}}, Some{Nothing}} where T <: GraphQLNode","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :GraphQLNode, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/GraphQLGen.jl
src/types.jl,Base.convert,mtsig,"Tuple{Type{Union{T, Nothing}}, Some{T}} where T <: GraphQLNode","Tuple{Type{Union{T, Nothing}}, Some{T}} where T <: GraphQLNode","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :GraphQLNode, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/GraphQLGen.jl
src/composite.jl,Base.rand,mtsig,"(Tuple{AbstractRNG, SamplerType{Chain{V, G, T} where G}} where T) where V","(Tuple{AbstractRNG, SamplerType{Chain{V, G, T} where G}} where T) where V","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:G, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/Grassmann.jl
src/Fields/ArrayBlocks.jl,return_value,mtsig,"Tuple{BroadcastingFieldOpMap, Vararg{ArrayBlock{A, N} where A}} where N","Tuple{BroadcastingFieldOpMap, Vararg{ArrayBlock{A, N} where A}} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:A, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Gridap.jl
src/Fields/ArrayBlocks.jl,return_cache,mtsig,"Tuple{BroadcastingFieldOpMap, Vararg{ArrayBlock{A, N} where A}} where N","Tuple{BroadcastingFieldOpMap, Vararg{ArrayBlock{A, N} where A}} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:A, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Gridap.jl
src/Fields/ArrayBlocks.jl,evaluate!,mtsig,"Tuple{Any, BroadcastingFieldOpMap, Vararg{ArrayBlock{A, N} where A}} where N","Tuple{Any, BroadcastingFieldOpMap, Vararg{ArrayBlock{A, N} where A}} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:A, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Gridap.jl
src/widgets.jl,_init_wobsval,mtsig,"Tuple{Type{Union{Nothing, T}}, Observable{T}, Nothing} where T","Tuple{Type{Union{Nothing, T}}, Observable{T}, Nothing} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/GtkObservables.jl
src/map.jl,HealpixMap,mtsig,"((Tuple{Number} where AA <: AbstractArray{Union{T, Nothing}, 1}) where O <: Order) where T","((Tuple{Number} where AA <: AbstractArray{Union{T, Nothing}, 1}) where O <: Order) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:AA, :(Union{}), :(AbstractArray{Union{T, Nothing}, 1}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:O, :(Union{}), :Order, DataStructures.LinkedList{JuliaSub.TypeConstructor}[], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,true,true,false,../data/ta-info/all/Healpix.jl
src/map_io.jl,readpixelsfromfits,mtsig,"Tuple{CFITSIO.FITSFile, Any, Any, Union{Type{RingOrder}, Type{NestedOrder}}, Type{Union{Nothing, T}}} where T <: Number","Tuple{CFITSIO.FITSFile, Any, Any, Union{Type{RingOrder}, Type{NestedOrder}}, Type{Union{Nothing, T}}} where T <: Number","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Healpix.jl
src/map_io.jl,writepixelstofits,mtsig,"Tuple{CFITSIO.FITSFile, Any, Vector{Union{T, Nothing}}} where T <: Number","Tuple{CFITSIO.FITSFile, Any, Vector{Union{T, Nothing}}} where T <: Number","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Healpix.jl
src/convert.jl,convert,mtsig,"(Tuple{Type{Array{T, N} where T}, HybridArray{S}} where N) where S","(Tuple{Type{Array{T, N} where T}, HybridArray{S}} where N) where S","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/HybridArrays.jl
test/util.jl,inner_add,mtsig,"Tuple{Vararg{Tuple{<:Number, <:MPST}}} where MPST <: AbstractMPS","Tuple{Vararg{(Tuple{var""##ANON_TV#1957"", var""##ANON_TV#1958""} where var""##ANON_TV#1957"" <: Number) where var""##ANON_TV#1958"" <: MPST}} where MPST <: AbstractMPS","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1957""), :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1958""), :(Union{}), :MPST, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:MPST, :(Union{}), :AbstractMPS, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/ITensors.jl
src/declaremissings.jl,apply!,mtsig,"Tuple{AbstractArray{Union{T, Missing}}, DeclareMissings} where T","Tuple{AbstractArray{Union{T, Missing}}, DeclareMissings} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Impute.jl
src/deprecated.jl,_impute!,mtsig,"Tuple{AbstractArray{Union{T, Missing}}, Fill} where T","Tuple{AbstractArray{Union{T, Missing}}, Fill} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Impute.jl
src/deprecated.jl,impute,mtsig,"Tuple{AbstractMatrix{Union{T, Missing}}, DropObs, Any} where T","Tuple{AbstractMatrix{Union{T, Missing}}, DropObs, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Impute.jl
src/deprecated.jl,impute,mtsig,"Tuple{AbstractMatrix{Union{T, Missing}}, DropVars, Any} where T","Tuple{AbstractMatrix{Union{T, Missing}}, DropVars, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Impute.jl
src/deprecated.jl,impute!,mtsig,"Tuple{AbstractMatrix{Union{T, Missing}}, Union{DropObs, DropVars}} where T","Tuple{AbstractMatrix{Union{T, Missing}}, Union{DropObs, DropVars}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Impute.jl
src/filter.jl,apply,mtsig,"Tuple{AbstractArray{Union{T, Missing}}, Filter, Any} where T","Tuple{AbstractArray{Union{T, Missing}}, Filter, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Impute.jl
src/imputors.jl,impute!,mtsig,"(Tuple{A, Imputor, Any, Vararg{Any}} where A <: AbstractArray{Union{T, Missing}}) where T","(Tuple{A, Imputor, Any, Vararg{Any}} where A <: AbstractArray{Union{T, Missing}}) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:A, :(Union{}), :(AbstractArray{Union{T, Missing}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUpBnd)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Impute.jl
src/imputors.jl,impute!,mtsig,"(Tuple{M, Imputor, Any, Vararg{Any}} where M <: AbstractMatrix{Union{T, Missing}}) where T","(Tuple{M, Imputor, Any, Vararg{Any}} where M <: AbstractMatrix{Union{T, Missing}}) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:M, :(Union{}), :(AbstractMatrix{Union{T, Missing}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUpBnd)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Impute.jl
src/imputors/knn.jl,impute!,mtsig,"Tuple{AbstractMatrix{Union{T, Missing}}, KNN, Any} where T <: Real","Tuple{AbstractMatrix{Union{T, Missing}}, KNN, Any} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Impute.jl
src/imputors/knn.jl,impute,mtsig,"Tuple{AbstractMatrix{Union{T, Missing}}, KNN, Vararg{Any}} where T <: Real","Tuple{AbstractMatrix{Union{T, Missing}}, KNN, Vararg{Any}} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Impute.jl
src/imputors/locf.jl,_impute!,mtsig,"Tuple{AbstractVector{Union{T, Missing}}, LOCF} where T","Tuple{AbstractVector{Union{T, Missing}}, LOCF} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Impute.jl
src/imputors/nocb.jl,_impute!,mtsig,"Tuple{AbstractVector{Union{T, Missing}}, NOCB} where T","Tuple{AbstractVector{Union{T, Missing}}, NOCB} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Impute.jl
src/imputors/replace.jl,_impute!,mtsig,"Tuple{AbstractArray{Union{T, Missing}}, Replace} where T","Tuple{AbstractArray{Union{T, Missing}}, Replace} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Impute.jl
src/imputors/srs.jl,_impute!,mtsig,"Tuple{AbstractArray{Union{T, Missing}}, SRS} where T","Tuple{AbstractArray{Union{T, Missing}}, SRS} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Impute.jl
src/imputors/substitute.jl,_impute!,mtsig,"Tuple{AbstractArray{Union{T, Missing}}, Substitute} where T","Tuple{AbstractArray{Union{T, Missing}}, Substitute} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Impute.jl
src/imputors/substitute.jl,_impute!,mtsig,"Tuple{AbstractArray{Union{T, Missing}}, WeightedSubstitute} where T","Tuple{AbstractArray{Union{T, Missing}}, WeightedSubstitute} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Impute.jl
src/imputors/svd.jl,impute!,mtsig,"Tuple{AbstractMatrix{Union{T, Missing}}, SVD, Any} where T <: Real","Tuple{AbstractMatrix{Union{T, Missing}}, SVD, Any} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Impute.jl
src/imputors/svd.jl,impute,mtsig,"Tuple{AbstractMatrix{Union{T, Missing}}, SVD, Vararg{Any}} where T <: Real","Tuple{AbstractMatrix{Union{T, Missing}}, SVD, Vararg{Any}} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Impute.jl
src/validators/threshold.jl,_validate,mtsig,"Tuple{AbstractArray{Union{T, Missing}}, Threshold} where T","Tuple{AbstractArray{Union{T, Missing}}, Threshold} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Impute.jl
src/validators/threshold.jl,_validate,mtsig,"Tuple{AbstractArray{Union{T, Missing}}, WeightedThreshold} where T","Tuple{AbstractArray{Union{T, Missing}}, WeightedThreshold} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Impute.jl
src/stat/non_hp_stat.jl,k_largest,mtsig,"Tuple{AbstractVector{Union{T, Missing}}, Int} where T","Tuple{AbstractVector{Union{T, Missing}}, Int} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/non_hp_stat.jl,k_smallest,mtsig,"Tuple{AbstractVector{Union{T, Missing}}, Int} where T","Tuple{AbstractVector{Union{T, Missing}}, Int} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,maximum,mtsig,"Tuple{Any, AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS, TimeType}","Tuple{Any, AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS, TimeType}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS, TimeType}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,maximum,mtsig,"Tuple{AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS, TimeType}","Tuple{AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS, TimeType}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS, TimeType}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,minimum,mtsig,"Tuple{Any, AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS, TimeType}","Tuple{Any, AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS, TimeType}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS, TimeType}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,minimum,mtsig,"Tuple{AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS, TimeType}","Tuple{AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS, TimeType}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS, TimeType}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,maximum,mtsig,"Tuple{Any, AbstractVector{Union{Missing, T}}, Any} where T <: AbstractString","Tuple{Any, AbstractVector{Union{Missing, T}}, Any} where T <: AbstractString","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :AbstractString, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,minimum,mtsig,"Tuple{Any, AbstractVector{Union{Missing, T}}, Any} where T <: AbstractString","Tuple{Any, AbstractVector{Union{Missing, T}}, Any} where T <: AbstractString","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :AbstractString, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,maximum,mtsig,"Tuple{AbstractVector{Union{Missing, T}}, Any} where T <: AbstractString","Tuple{AbstractVector{Union{Missing, T}}, Any} where T <: AbstractString","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :AbstractString, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,minimum,mtsig,"Tuple{AbstractVector{Union{Missing, T}}, Any} where T <: AbstractString","Tuple{AbstractVector{Union{Missing, T}}, Any} where T <: AbstractString","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :AbstractString, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,sum,mtsig,"Tuple{Any, AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS}","Tuple{Any, AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,sum,mtsig,"Tuple{AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS}","Tuple{AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,Statistics.mean,mtsig,"Tuple{Any, AbstractArray{Union{T, Missing}, 1}} where T <: Union{INTEGERS, FLOATS}","Tuple{Any, AbstractArray{Union{T, Missing}, 1}} where T <: Union{INTEGERS, FLOATS}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,Statistics.mean,mtsig,"Tuple{AbstractArray{Union{T, Missing}, 1}} where T <: Union{INTEGERS, FLOATS}","Tuple{AbstractArray{Union{T, Missing}, 1}} where T <: Union{INTEGERS, FLOATS}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,Statistics.var,mtsig,"Tuple{Any, AbstractArray{Union{T, Missing}, 1}, Any} where T <: Union{INTEGERS, FLOATS}","Tuple{Any, AbstractArray{Union{T, Missing}, 1}, Any} where T <: Union{INTEGERS, FLOATS}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,Statistics.var,mtsig,"Tuple{AbstractArray{Union{T, Missing}, 1}, Any} where T <: Union{INTEGERS, FLOATS}","Tuple{AbstractArray{Union{T, Missing}, 1}, Any} where T <: Union{INTEGERS, FLOATS}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,std,mtsig,"Tuple{Any, AbstractArray{Union{T, Missing}, 1}, Any} where T <: Union{INTEGERS, FLOATS}","Tuple{Any, AbstractArray{Union{T, Missing}, 1}, Any} where T <: Union{INTEGERS, FLOATS}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,std,mtsig,"Tuple{AbstractArray{Union{T, Missing}, 1}, Any} where T <: Union{INTEGERS, FLOATS}","Tuple{AbstractArray{Union{T, Missing}, 1}, Any} where T <: Union{INTEGERS, FLOATS}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,Statistics.median,mtsig,"Tuple{AbstractArray{Union{T, Missing}, 1}} where T","Tuple{AbstractArray{Union{T, Missing}, 1}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,Statistics.median!,mtsig,"Tuple{AbstractArray{Union{T, Missing}, 1}} where T","Tuple{AbstractArray{Union{T, Missing}, 1}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,extrema,mtsig,"Tuple{Any, AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS, TimeType}","Tuple{Any, AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS, TimeType}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS, TimeType}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,extrema,mtsig,"Tuple{AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS, TimeType}","Tuple{AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS, TimeType}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS, TimeType}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,argmax,mtsig,"Tuple{AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS, TimeType, AbstractString}","Tuple{AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS, TimeType, AbstractString}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS, TimeType, AbstractString}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,argmin,mtsig,"Tuple{AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS, TimeType, AbstractString}","Tuple{AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS, TimeType, AbstractString}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS, TimeType, AbstractString}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,findmax,mtsig,"Tuple{Any, AbstractArray{Union{Missing, T}, 1}} where T <: Union{INTEGERS, FLOATS, TimeType, AbstractString}","Tuple{Any, AbstractArray{Union{Missing, T}, 1}} where T <: Union{INTEGERS, FLOATS, TimeType, AbstractString}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS, TimeType, AbstractString}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,findmax,mtsig,"Tuple{AbstractArray{Union{Missing, T}, 1}} where T <: Union{INTEGERS, FLOATS, TimeType, AbstractString}","Tuple{AbstractArray{Union{Missing, T}, 1}} where T <: Union{INTEGERS, FLOATS, TimeType, AbstractString}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS, TimeType, AbstractString}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,findmin,mtsig,"Tuple{Any, AbstractArray{Union{Missing, T}, 1}} where T <: Union{INTEGERS, FLOATS, TimeType, AbstractString}","Tuple{Any, AbstractArray{Union{Missing, T}, 1}} where T <: Union{INTEGERS, FLOATS, TimeType, AbstractString}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS, TimeType, AbstractString}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,findmin,mtsig,"Tuple{AbstractArray{Union{Missing, T}, 1}} where T <: Union{INTEGERS, FLOATS, TimeType, AbstractString}","Tuple{AbstractArray{Union{Missing, T}, 1}} where T <: Union{INTEGERS, FLOATS, TimeType, AbstractString}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS, TimeType, AbstractString}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,cumsum,mtsig,"Tuple{AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS}","Tuple{AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,cumsum!,mtsig,"Tuple{AbstractVector, AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS}","Tuple{AbstractVector, AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,cumprod,mtsig,"Tuple{AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS}","Tuple{AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
src/stat/stat.jl,cumprod!,mtsig,"Tuple{AbstractVector, AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS}","Tuple{AbstractVector, AbstractArray{Union{Missing, T}, 1}, Any} where T <: Union{INTEGERS, FLOATS}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{INTEGERS, FLOATS}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/InMemoryDatasets.jl
test/testDeadReckoningTether.jl,DFG.getDimension,mtsig,"Tuple{Type{MutableLinearRelative{N, <:SamplableBelief}}} where N","Tuple{Type{MutableLinearRelative{N, var""##ANON_TV#1732""} where var""##ANON_TV#1732"" <: SamplableBelief}} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1732""), :(Union{}), :SamplableBelief, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/IncrementalInference.jl
src/infarrays.jl,BroadcastStyle,mtsig,"(Tuple{Type{($typ){T, N, NTuple{N, <:OneToInf}}}} where N) where T","(Tuple{Type{($typ){T, N, NTuple{N, var""##ANON_TV#1050""} where var""##ANON_TV#1050"" <: OneToInf}}} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1050""), :(Union{}), :OneToInf, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/InfiniteArrays.jl
src/infarrays.jl,BroadcastStyle,mtsig,"Tuple{Type{($typ){T, 2, <:Tuple{<:Any, <:OneToInf}}}} where T","Tuple{Type{($typ){T, 2, var""##ANON_TV#1051""} where var""##ANON_TV#1051"" <: ((Tuple{var""##ANON_TV#1052"", var""##ANON_TV#1053""} where var""##ANON_TV#1052"" <: Any) where var""##ANON_TV#1053"" <: OneToInf)}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1052""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1053""), :(Union{}), :OneToInf, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1051""), :(Union{}), :((Tuple{var""##ANON_TV#1052"", var""##ANON_TV#1053""} where var""##ANON_TV#1052"" <: Any) where var""##ANON_TV#1053"" <: OneToInf), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/InfiniteArrays.jl
src/infarrays.jl,BroadcastStyle,mtsig,"Tuple{Type{($typ){T, 2, <:Tuple{<:OneToInf, <:Any}}}} where T","Tuple{Type{($typ){T, 2, var""##ANON_TV#1054""} where var""##ANON_TV#1054"" <: ((Tuple{var""##ANON_TV#1055"", var""##ANON_TV#1056""} where var""##ANON_TV#1055"" <: OneToInf) where var""##ANON_TV#1056"" <: Any)}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1055""), :(Union{}), :OneToInf, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1056""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1054""), :(Union{}), :((Tuple{var""##ANON_TV#1055"", var""##ANON_TV#1056""} where var""##ANON_TV#1055"" <: OneToInf) where var""##ANON_TV#1056"" <: Any), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/InfiniteArrays.jl
src/inpaint.jl,inpaint,mtsig,"Tuple{AbstractArray{Union{Missing, T}}, Any, Any} where T <: AbstractFloat","Tuple{AbstractArray{Union{Missing, T}}, Any, Any} where T <: AbstractFloat","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :AbstractFloat, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Inpaintings.jl
src/tables.jl,jdbcconvert,mtsig,"Tuple{Type{Union{T, Missing}}, Any, Any} where T","Tuple{Type{Union{T, Missing}}, Any, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/JDBC.jl
src/type_compress.jl,type_compress,mtsig,"Tuple{Vector{Union{Missing, T}}} where T <: Union{UInt128, UInt64, UInt32, UInt16}","Tuple{Vector{Union{Missing, T}}} where T <: Union{UInt128, UInt64, UInt32, UInt16}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{UInt128, UInt64, UInt32, UInt16}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/JDF.jl
src/type_compress.jl,type_compress,mtsig,"Tuple{Vector{Union{Missing, T}}} where T <: Union{Int128, Int64, Int32, Int16}","Tuple{Vector{Union{Missing, T}}} where T <: Union{Int128, Int64, Int32, Int16}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{Int128, Int64, Int32, Int16}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/JDF.jl
src/type-writer-loader/Missing.jl,compress_then_write,mtsig,"Tuple{Vector{Union{T, Missing}}, Any} where T","Tuple{Vector{Union{T, Missing}}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/JDF.jl
src/type-writer-loader/Missing.jl,column_loader!,mtsig,"Tuple{Any, Type{Union{Missing, T}}, Any, Any} where T","Tuple{Any, Type{Union{Missing, T}}, Any, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/JDF.jl
src/type-writer-loader/Nothing.jl,compress_then_write,mtsig,"Tuple{Vector{Union{T, Nothing}}, Any} where T","Tuple{Vector{Union{T, Nothing}}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/JDF.jl
src/type-writer-loader/Nothing.jl,column_loader!,mtsig,"Tuple{Any, Type{Union{Nothing, T}}, Any, Any} where T","Tuple{Any, Type{Union{Nothing, T}}, Any, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/JDF.jl
src/read.jl,nonNothingT,mtsig,"Tuple{Type{Union{Nothing, T}}} where T","Tuple{Type{Union{Nothing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/JSON2.jl
src/structs.jl,read,mtsig,"Tuple{NumberType, Any, Any, Any, Any, Type{Union{Bool, T}}, Vararg{Any}} where T <: Real","Tuple{NumberType, Any, Any, Any, Any, Type{Union{Bool, T}}, Vararg{Any}} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/JSON3.jl
src/pointer.jl,$T,mtsig,"(Tuple{Vararg{Pair{<:Pointer, V}}} where K <: Pointer) where V","(Tuple{Vararg{Pair{var""##ANON_TV#951"", V} where var""##ANON_TV#951"" <: Pointer}} where K <: Pointer) where V","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#951""), :(Union{}), :Pointer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Pointer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,true,true,false,../data/ta-info/all/JSONPointer.jl
src/JSONSchemaGenerator.jl,_is_nothing_union,mtsig,"Tuple{Type{Union{Nothing, T}}} where T","Tuple{Type{Union{Nothing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/JSONSchemaGenerator.jl
src/JSONSchemaGenerator.jl,_get_optional_type,mtsig,"Tuple{Type{Union{Nothing, T}}} where T","Tuple{Type{Union{Nothing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/JSONSchemaGenerator.jl
src/JSONTables.jl,misselT,mtsig,"Tuple{Type{Union{Nothing, T}}} where T","Tuple{Type{Union{Nothing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/JSONTables.jl
JProxies/src/proxy.jl,convert_arg,mtsig,"(Tuple{Type{<:JProxy{<:Union{Array{A, N}, java_lang_Object}, false}}, JProxy{Array{<:A, N}, false}} where N) where A","(Tuple{Type{var""##ANON_TV#1550""} where var""##ANON_TV#1550"" <: (JProxy{var""##ANON_TV#1551"", false} where var""##ANON_TV#1551"" <: Union{Array{A, N}, java_lang_Object}), JProxy{Array{var""##ANON_TV#1552"", N} where var""##ANON_TV#1552"" <: A, false}} where N) where A","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1551""), :(Union{}), :(Union{Array{A, N}, java_lang_Object}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCUpBnd, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1550""), :(Union{}), :(JProxy{var""##ANON_TV#1551"", false} where var""##ANON_TV#1551"" <: Union{Array{A, N}, java_lang_Object}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1552""), :(Union{}), :A, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCUpBnd, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:A, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCUpBnd, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,5,true,false,false,true,false,../data/ta-info/all/JavaCall.jl
JProxies/src/proxy.jl,Base.fieldnames,mtsig,"(Tuple{Type{JProxy{<:Array{T}, true}}} where STATIC) where T","(Tuple{Type{JProxy{var""##ANON_TV#1571"", true} where var""##ANON_TV#1571"" <: Array{T}}} where STATIC) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1571""), :(Union{}), :(Array{T}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:STATIC, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,true,true,false,../data/ta-info/all/JavaCall.jl
src/ml.jl,schema,mtsig,"Tuple{Vector{Union{Missing, S}}, Type} where S","Tuple{Vector{Union{Missing, S}}, Type} where S","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/JuliaDB.jl
src/ml.jl,schema,mtsig,"Tuple{Vector{Union{T, Missing}}} where T","Tuple{Vector{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/JuliaDB.jl
src/types.jl,getJuliaValue,mtsig,"Tuple{Any, Array{UInt8, 1}, Type{Union{T, Nothing}}} where T <: kRPCTypes.Class","Tuple{Any, Array{UInt8, 1}, Type{Union{T, Nothing}}} where T <: kRPCTypes.Class","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(kRPCTypes.Class), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/KRPC.jl
src/Types.jl,Base.convert,mtsig,"Tuple{Type{Optional{S, T} where S}, Any} where T","Tuple{Type{Optional{S, T} where S}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/KirUtil.jl
src/Types.jl,Base.convert,mtsig,"Tuple{Type{Optional{S1, T} where S1}, Optional{S2, T} where S2} where T","Tuple{Type{Optional{S1, T} where S1}, Optional{S2, T} where S2} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:S1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/KirUtil.jl
src/Types.jl,Base.convert,mtsig,"(Tuple{Type{Optional{S1, T} where S1}, Optional{S2}} where T) where S2","(Tuple{Type{Optional{S1, T} where S1}, Optional{S2}} where T) where S2","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:S1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/KirUtil.jl
src/blockconcat.jl,BlockVcat,mtsig,"(Tuple{Vararg{AbstractArray{<:Any, N}}} where N) where T","(Tuple{Vararg{AbstractArray{var""##ANON_TV#2610"", N} where var""##ANON_TV#2610"" <: Any}} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#2610""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,true,true,false,../data/ta-info/all/LazyBandedMatrices.jl
src/LazyOperations/CartesianProduct.jl,project,mtsig,"(((Tuple{CartesianProduct{N, IT, Union{VP1, VP2}}, AbstractVector{Int}, Vararg{Any}} where VP2 <: VPolytope{N}) where VP1 <: VPolygon{N}) where IT <: Interval) where N","(((Tuple{CartesianProduct{N, IT, Union{VP1, VP2}}, AbstractVector{Int}, Vararg{Any}} where VP2 <: VPolytope{N}) where VP1 <: VPolygon{N}) where IT <: Interval) where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:VP2, :(Union{}), :(VPolytope{N}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:VP1, :(Union{}), :(VPolygon{N}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:IT, :(Union{}), :Interval, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCWhere, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/LazySets.jl
src/parsing.jl,parse_numeric_element,mtsig,"Tuple{Type{Union{T, Missing}}, Any} where T","Tuple{Type{Union{T, Missing}}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/LibPQ.jl
src/tarray.jl,Base.hcat,mtsig,"Tuple{Vararg{Union{TArray{T, 1}, TArray{T, 2}}}} where T","Tuple{Vararg{Union{TArray{T, 1}, TArray{T, 2}}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Libtask.jl
src/tarray.jl,Base.vcat,mtsig,"Tuple{Vararg{Union{TArray{T, 1}, TArray{T, 2}}}} where T","Tuple{Vararg{Union{TArray{T, 1}, TArray{T, 2}}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Libtask.jl
src/tarray.jl,Base.cat,mtsig,"Tuple{Vararg{Union{TArray{T, 1}, TArray{T, 2}}}, Any} where T","Tuple{Vararg{Union{TArray{T, 1}, TArray{T, 2}}}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Libtask.jl
src/reader.jl,read_field_,mtsig,"Tuple{AbstractBSONReader, Type{Union{Nothing, T}}} where T","Tuple{AbstractBSONReader, Type{Union{Nothing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/LightBSON.jl
src/bdd/bdds.jl,and,mtsig,"Tuple{Vararg{Union{T, Bdd}}} where T <: Integer","Tuple{Vararg{Union{T, Bdd}}} where T <: Integer","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/LogicCircuits.jl
src/bdd/bdds.jl,or,mtsig,"Tuple{Vararg{Union{T, Bdd}}} where T <: Integer","Tuple{Vararg{Union{T, Bdd}}} where T <: Integer","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/LogicCircuits.jl
src/fit_dataframe.jl,observations,mtsig,"Tuple{Array{Union{T, Missing}}} where T","Tuple{Array{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/LowRankModels.jl
src/chains.jl,Chains,mtsig,"Tuple{Array{Union{T, Missing}, 3}, Any, Any, Any, Any, Any} where T <: Real","Tuple{Array{Union{T, Missing}, 3}, Any, Any, Any, Any, Any} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/MCMCChain.jl
src/model_traits.jl,_density,mtsig,"Tuple{Type{AbstractArray{<:$T, D}}} where D","Tuple{Type{AbstractArray{var""##ANON_TV#2144"", D} where var""##ANON_TV#2144"" <: $T}} where D","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#2144""), :(Union{}), :($(Expr(:$, :T))), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:D, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], true)",false,true,2,true,true,true,true,false,../data/ta-info/all/MLJModelInterface.jl
src/model_traits.jl,_density,mtsig,"(Tuple{Type{AbstractArray{<:($T){N}, D}}} where D) where N","(Tuple{Type{AbstractArray{var""##ANON_TV#2145"", D} where var""##ANON_TV#2145"" <: ($T){N}}} where D) where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#2145""), :(Union{}), :(($(Expr(:$, :T))){N}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:D, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/MLJModelInterface.jl
src/openml.jl,_scitype,mtsig,"Tuple{Any, Type{Union{Missing, T}}} where T","Tuple{Any, Type{Union{Missing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/MLJOpenML.jl
src/operators/sparsempo/sparsempo.jl,SparseMPO,mtsig,"(Tuple{AbstractArray{Union{E, M}, 3}} where E <: Number) where M <: MPOTensor","(Tuple{AbstractArray{Union{E, M}, 3}} where E <: Number) where M <: MPOTensor","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:E, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:M, :(Union{}), :MPOTensor, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/MPSKit.jl
src/states/finitemps.jl,FiniteMPS,mtsig,"(Tuple{Vector{Union{Missing, A}}, Vector{Union{Missing, A}}, Vector{Union{Missing, A}}, Vector{Union{Missing, B}}} where B <: MPSBondTensor) where A <: GenericMPSTensor","(Tuple{Vector{Union{Missing, A}}, Vector{Union{Missing, A}}, Vector{Union{Missing, A}}, Vector{Union{Missing, B}}} where B <: MPSBondTensor) where A <: GenericMPSTensor","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:B, :(Union{}), :MPSBondTensor, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:A, :(Union{}), :GenericMPSTensor, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/MPSKit.jl
src/MaskArrays.jl,maskarray,mtsig,"(Tuple{AbstractArray{Union{T, Missing}, N}} where N) where T","(Tuple{AbstractArray{Union{T, Missing}, N}} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/MaskArrays.jl
src/Utilities/functions.jl,operate,mtsig,"Tuple{Function, Type{T}, Vararg{Union{T, AbstractVector{T}}}} where T <: Number","Tuple{Function, Type{T}, Vararg{Union{T, AbstractVector{T}}}} where T <: Number","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/MathOptInterface.jl
src/Utilities/functions.jl,operate!,mtsig,"Tuple{Function, Type{T}, Vararg{Union{T, AbstractVector{T}}}} where T","Tuple{Function, Type{T}, Vararg{Union{T, AbstractVector{T}}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/MathOptInterface.jl
src/Utilities/functions.jl,promote_operation,mtsig,"Tuple{typeof(vcat), Type{T}, Vararg{Union{Type{T}, Type{<:AbstractVector{T}}}}} where T <: Number","Tuple{typeof(vcat), Type{T}, Vararg{Union{Type{T}, Type{var""##ANON_TV#2606""} where var""##ANON_TV#2606"" <: AbstractVector{T}}}} where T <: Number","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#2606""), :(Union{}), :(AbstractVector{T}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/MathOptInterface.jl
src/Utilities/functions.jl,operate,mtsig,"Tuple{typeof(vcat), Type{T}, Vararg{Union{T, AbstractVector{T}}}} where T <: Number","Tuple{typeof(vcat), Type{T}, Vararg{Union{T, AbstractVector{T}}}} where T <: Number","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/MathOptInterface.jl
src/Utilities/functions.jl,promote_operation,mtsig,"Tuple{typeof(vcat), Type{T}, Vararg{Type{<:Union{ScalarAffineLike{T}, MOI.VectorOfVariables, MOI.VectorAffineFunction{T}}}}} where T","Tuple{typeof(vcat), Type{T}, Vararg{Type{var""##ANON_TV#2607""} where var""##ANON_TV#2607"" <: Union{ScalarAffineLike{T}, MOI.VectorOfVariables, MOI.VectorAffineFunction{T}}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#2607""), :(Union{}), :(Union{ScalarAffineLike{T}, MOI.VectorOfVariables, MOI.VectorAffineFunction{T}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/MathOptInterface.jl
src/Utilities/functions.jl,promote_operation,mtsig,"Tuple{typeof(vcat), Type{T}, Vararg{Type{<:Union{ScalarQuadraticLike{T}, MOI.VectorOfVariables, MOI.VectorAffineFunction{T}, MOI.VectorQuadraticFunction{T}}}}} where T","Tuple{typeof(vcat), Type{T}, Vararg{Type{var""##ANON_TV#2608""} where var""##ANON_TV#2608"" <: Union{ScalarQuadraticLike{T}, MOI.VectorOfVariables, MOI.VectorAffineFunction{T}, MOI.VectorQuadraticFunction{T}}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#2608""), :(Union{}), :(Union{ScalarQuadraticLike{T}, MOI.VectorOfVariables, MOI.VectorAffineFunction{T}, MOI.VectorQuadraticFunction{T}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/MathOptInterface.jl
src/Utilities/functions.jl,operate,mtsig,"Tuple{typeof(vcat), Type{T}, Vararg{Union{ScalarAffineLike{T}, MOI.VectorOfVariables, MOI.VectorAffineFunction{T}}}} where T","Tuple{typeof(vcat), Type{T}, Vararg{Union{ScalarAffineLike{T}, MOI.VectorOfVariables, MOI.VectorAffineFunction{T}}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/MathOptInterface.jl
src/Utilities/functions.jl,operate,mtsig,"Tuple{typeof(vcat), Type{T}, Vararg{Union{ScalarQuadraticLike{T}, MOI.VectorOfVariables, MOI.VectorAffineFunction{T}, MOI.VectorQuadraticFunction{T}}}} where T","Tuple{typeof(vcat), Type{T}, Vararg{Union{ScalarQuadraticLike{T}, MOI.VectorOfVariables, MOI.VectorAffineFunction{T}, MOI.VectorQuadraticFunction{T}}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/MathOptInterface.jl
src/maps.jl,ResetMap,mtsig,"Tuple{Int, Vararg{Pair{Int, <:N}}} where N","Tuple{Int, Vararg{Pair{Int, var""##ANON_TV#427""} where var""##ANON_TV#427"" <: N}} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#427""), :(Union{}), :N, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/MathematicalSystems.jl
src/maps.jl,ConstrainedResetMap,mtsig,"(Tuple{Int, ST, Vararg{Pair{Int, <:N}}} where ST) where N","(Tuple{Int, ST, Vararg{Pair{Int, var""##ANON_TV#428""} where var""##ANON_TV#428"" <: N}} where ST) where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#428""), :(Union{}), :N, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:ST, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/MathematicalSystems.jl
src/NonConvex/lowrankmodels/fit_dataframe.jl,observations,mtsig,"Tuple{Array{Union{T, Missing}}} where T","Tuple{Array{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/MatrixCompletion.jl
src/object.jl,add_obj!,mtsig,"(Tuple{AbsVec{Shape{K, K²}}, Tuple2{AbsVec{ParamInd}}, Tuple{AbsVec{S²ComplexF3}, AbsVec{S²ComplexF3}}, AbsVec{Object{K, <:Shape{K, K²}}}} where K²) where K","(Tuple{AbsVec{Shape{K, K²}}, Tuple2{AbsVec{ParamInd}}, Tuple{AbsVec{S²ComplexF3}, AbsVec{S²ComplexF3}}, AbsVec{Object{K, var""##ANON_TV#1086""} where var""##ANON_TV#1086"" <: Shape{K, K²}}} where K²) where K","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1086""), :(Union{}), :(Shape{K, K²}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K², :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/MaxwellBase.jl
src/object.jl,add_obj!,mtsig,"(Tuple{AbsVec{Shape{K, K²}}, Tuple2{AbsVec{ParamInd}}, Tuple{AbsVec{S²ComplexF3}, AbsVec{S²ComplexF3}}, Vararg{Object{K, <:Shape{K, K²}}}} where K²) where K","(Tuple{AbsVec{Shape{K, K²}}, Tuple2{AbsVec{ParamInd}}, Tuple{AbsVec{S²ComplexF3}, AbsVec{S²ComplexF3}}, Vararg{Object{K, var""##ANON_TV#1087""} where var""##ANON_TV#1087"" <: Shape{K, K²}}} where K²) where K","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1087""), :(Union{}), :(Shape{K, K²}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K², :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/MaxwellBase.jl
src/haplotype_pair.jl,fillmissing!,mtsig,"(Tuple{AbstractMatrix{Union{U, Missing}}, AbstractMatrix{T}, AbstractMatrix{T}, Vector{Vector{Tuple{Int32, Int32}}}} where U) where T","(Tuple{AbstractMatrix{Union{U, Missing}}, AbstractMatrix{T}, AbstractMatrix{T}, Vector{Vector{Tuple{Int32, Int32}}}} where U) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:U, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/MendelImpute.jl
src/phase.jl,phase_fast!,mtsig,"Tuple{Vector{HaplotypeMosaicPair}, AbstractMatrix{Union{Missing, T}}, CompressedHaplotypes, AbstractVector, AbstractVector, Bool} where T <: Real","Tuple{Vector{HaplotypeMosaicPair}, AbstractMatrix{Union{Missing, T}}, CompressedHaplotypes, AbstractVector, AbstractVector, Bool} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/MendelImpute.jl
src/phase.jl,phase_fast_compressed!,mtsig,"Tuple{Vector{HaplotypeMosaicPair}, AbstractMatrix{Union{Missing, T}}, CompressedHaplotypes, AbstractVector, AbstractVector} where T <: Real","Tuple{Vector{HaplotypeMosaicPair}, AbstractMatrix{Union{Missing, T}}, CompressedHaplotypes, AbstractVector, AbstractVector} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/MendelImpute.jl
src/core/time_arrays.jl,Base.getindex,mtsig,"((((((((Tuple{TimestepArray{FixedTimestep{A_FIRST, A_STEP, A_LAST}, T, N, ti}, Vararg{Union{FixedTimestep{T_FIRST, T_STEP, T_LAST}, AnyIndex}}} where ti) where N) where T) where T_LAST) where T_STEP) where T_FIRST) where A_LAST) where A_STEP) where A_FIRST","((((((((Tuple{TimestepArray{FixedTimestep{A_FIRST, A_STEP, A_LAST}, T, N, ti}, Vararg{Union{FixedTimestep{T_FIRST, T_STEP, T_LAST}, AnyIndex}}} where ti) where N) where T) where T_LAST) where T_STEP) where T_FIRST) where A_LAST) where A_STEP) where A_FIRST","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:ti, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T_LAST, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T_STEP, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T_FIRST, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:A_LAST, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:A_STEP, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:A_FIRST, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,9,true,true,true,true,false,../data/ta-info/all/Mimi.jl
src/core/time_arrays.jl,Base.getindex,mtsig,"((((Tuple{TimestepArray{VariableTimestep{A_TIMES}, T, N, ti}, Vararg{Union{VariableTimestep{T_TIMES}, AnyIndex}}} where ti) where N) where T) where T_TIMES) where A_TIMES","((((Tuple{TimestepArray{VariableTimestep{A_TIMES}, T, N, ti}, Vararg{Union{VariableTimestep{T_TIMES}, AnyIndex}}} where ti) where N) where T) where T_TIMES) where A_TIMES","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:ti, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T_TIMES, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:A_TIMES, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,5,true,true,true,true,false,../data/ta-info/all/Mimi.jl
src/core/time_arrays.jl,Base.getindex,mtsig,"((((((Tuple{TimestepArray{FixedTimestep{FIRST, STEP, LAST}, T_data, N, ti}, Vararg{Union{TimestepValue{T_time}, AnyIndex}}} where T_time) where LAST) where STEP) where FIRST) where ti) where N) where T_data","((((((Tuple{TimestepArray{FixedTimestep{FIRST, STEP, LAST}, T_data, N, ti}, Vararg{Union{TimestepValue{T_time}, AnyIndex}}} where T_time) where LAST) where STEP) where FIRST) where ti) where N) where T_data","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T_time, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:LAST, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:STEP, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:FIRST, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:ti, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T_data, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,7,true,true,true,true,false,../data/ta-info/all/Mimi.jl
src/core/time_arrays.jl,Base.getindex,mtsig,"((((Tuple{TimestepArray{VariableTimestep{TIMES}, T_data, N, ti}, Vararg{Union{TimestepValue{T_time}, AnyIndex}}} where T_time) where TIMES) where ti) where N) where T_data","((((Tuple{TimestepArray{VariableTimestep{TIMES}, T_data, N, ti}, Vararg{Union{TimestepValue{T_time}, AnyIndex}}} where T_time) where TIMES) where ti) where N) where T_data","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T_time, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:TIMES, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:ti, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T_data, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,5,true,true,true,true,false,../data/ta-info/all/Mimi.jl
src/core/time_arrays.jl,Base.setindex!,mtsig,"((((((((Tuple{TimestepArray{FixedTimestep{A_FIRST, A_STEP, A_LAST}, T, N, ti}, Any, Vararg{Union{FixedTimestep{T_FIRST, T_STEP, T_LAST}, AnyIndex}}} where ti) where N) where T) where T_LAST) where T_STEP) where T_FIRST) where A_LAST) where A_STEP) where A_FIRST","((((((((Tuple{TimestepArray{FixedTimestep{A_FIRST, A_STEP, A_LAST}, T, N, ti}, Any, Vararg{Union{FixedTimestep{T_FIRST, T_STEP, T_LAST}, AnyIndex}}} where ti) where N) where T) where T_LAST) where T_STEP) where T_FIRST) where A_LAST) where A_STEP) where A_FIRST","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:ti, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T_LAST, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T_STEP, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T_FIRST, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:A_LAST, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:A_STEP, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:A_FIRST, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,9,true,true,true,true,false,../data/ta-info/all/Mimi.jl
src/core/time_arrays.jl,Base.setindex!,mtsig,"((((Tuple{TimestepArray{VariableTimestep{A_TIMES}, T, N, ti}, Any, Vararg{Union{VariableTimestep{T_TIMES}, AnyIndex}}} where ti) where N) where T) where T_TIMES) where A_TIMES","((((Tuple{TimestepArray{VariableTimestep{A_TIMES}, T, N, ti}, Any, Vararg{Union{VariableTimestep{T_TIMES}, AnyIndex}}} where ti) where N) where T) where T_TIMES) where A_TIMES","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:ti, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T_TIMES, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:A_TIMES, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,5,true,true,true,true,false,../data/ta-info/all/Mimi.jl
src/core/time_arrays.jl,Base.setindex!,mtsig,"((((((Tuple{TimestepArray{FixedTimestep{FIRST, STEP, LAST}, T_data, N, ti}, Any, Vararg{Union{TimestepValue{T_time}, AnyIndex}}} where T_time) where LAST) where STEP) where FIRST) where ti) where N) where T_data","((((((Tuple{TimestepArray{FixedTimestep{FIRST, STEP, LAST}, T_data, N, ti}, Any, Vararg{Union{TimestepValue{T_time}, AnyIndex}}} where T_time) where LAST) where STEP) where FIRST) where ti) where N) where T_data","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T_time, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:LAST, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:STEP, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:FIRST, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:ti, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T_data, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,7,true,true,true,true,false,../data/ta-info/all/Mimi.jl
src/core/time_arrays.jl,Base.setindex!,mtsig,"((((Tuple{TimestepArray{VariableTimestep{TIMES}, T_data, N, ti}, Any, Vararg{Union{TimestepValue{T_time}, AnyIndex}}} where T_time) where TIMES) where ti) where N) where T_data","((((Tuple{TimestepArray{VariableTimestep{TIMES}, T_data, N, ti}, Any, Vararg{Union{TimestepValue{T_time}, AnyIndex}}} where T_time) where TIMES) where ti) where N) where T_data","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T_time, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:TIMES, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:ti, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T_data, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,5,true,true,true,true,false,../data/ta-info/all/Mimi.jl
src/core/time_arrays.jl,Base.getindex,mtsig,"((((((Tuple{TimestepArray{FixedTimestep{FIRST, STEP, LAST}, T_data, N, ti}, Vararg{Union{Array{TimestepValue{T_time}, 1}, AnyIndex}}} where T_time) where LAST) where STEP) where FIRST) where ti) where N) where T_data","((((((Tuple{TimestepArray{FixedTimestep{FIRST, STEP, LAST}, T_data, N, ti}, Vararg{Union{Array{TimestepValue{T_time}, 1}, AnyIndex}}} where T_time) where LAST) where STEP) where FIRST) where ti) where N) where T_data","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T_time, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:LAST, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:STEP, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:FIRST, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:ti, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T_data, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,7,true,true,true,true,false,../data/ta-info/all/Mimi.jl
src/core/time_arrays.jl,Base.getindex,mtsig,"((((Tuple{TimestepArray{VariableTimestep{TIMES}, T_data, N, ti}, Vararg{Union{Array{TimestepValue{T_time}, 1}, AnyIndex}}} where T_time) where TIMES) where ti) where N) where T_data","((((Tuple{TimestepArray{VariableTimestep{TIMES}, T_data, N, ti}, Vararg{Union{Array{TimestepValue{T_time}, 1}, AnyIndex}}} where T_time) where TIMES) where ti) where N) where T_data","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T_time, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:TIMES, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:ti, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T_data, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,5,true,true,true,true,false,../data/ta-info/all/Mimi.jl
src/core/time_arrays.jl,Base.setindex!,mtsig,"((((((Tuple{TimestepArray{FixedTimestep{FIRST, STEP, LAST}, T_data, N, ti}, Any, Vararg{Union{Array{TimestepValue{T_time}, 1}, AnyIndex}}} where T_time) where LAST) where STEP) where FIRST) where ti) where N) where T_data","((((((Tuple{TimestepArray{FixedTimestep{FIRST, STEP, LAST}, T_data, N, ti}, Any, Vararg{Union{Array{TimestepValue{T_time}, 1}, AnyIndex}}} where T_time) where LAST) where STEP) where FIRST) where ti) where N) where T_data","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T_time, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:LAST, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:STEP, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:FIRST, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:ti, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T_data, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,7,true,true,true,true,false,../data/ta-info/all/Mimi.jl
src/core/time_arrays.jl,Base.setindex!,mtsig,"((((Tuple{TimestepArray{VariableTimestep{TIMES}, T_data, N, ti}, Any, Vararg{Union{Array{TimestepValue{T_time}, 1}, AnyIndex}}} where T_time) where TIMES) where ti) where N) where T_data","((((Tuple{TimestepArray{VariableTimestep{TIMES}, T_data, N, ti}, Any, Vararg{Union{Array{TimestepValue{T_time}, 1}, AnyIndex}}} where T_time) where TIMES) where ti) where N) where T_data","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T_time, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:TIMES, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:ti, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T_data, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,5,true,true,true,true,false,../data/ta-info/all/Mimi.jl
src/likelihoodratiotest.jl,_samefamily,mtsig,"Tuple{Vararg{GeneralizedLinearMixedModel{<:AbstractFloat, S}}} where S <: Distribution","Tuple{Vararg{GeneralizedLinearMixedModel{var""##ANON_TV#1038"", S} where var""##ANON_TV#1038"" <: AbstractFloat}} where S <: Distribution","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1038""), :(Union{}), :AbstractFloat, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Distribution, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/MixedModels.jl
src/bipartite_graph.jl,Matching,mtsig,"(Tuple{V} where V <: AbstractVector{Union{U, Int}}) where U","(Tuple{V} where V <: AbstractVector{Union{U, Int}}) where U","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:V, :(Union{}), :(AbstractVector{Union{U, Int}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:U, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUpBnd)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/ModelingToolkit.jl
src/zygote.jl,Zygote.z2d,mtsig,"Tuple{AbstractArray{Union{Nothing, Atom{T, T, T, T}}}, AbstractArray{Atom{T, T, T, T}}} where T","Tuple{AbstractArray{Union{Nothing, Atom{T, T, T, T}}}, AbstractArray{Atom{T, T, T, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Molly.jl
src/zygote.jl,Base.zero,mtsig,"(Tuple{Type{Union{Nothing, SizedVector{D, T, Vector{T}}}}} where T) where D","(Tuple{Type{Union{Nothing, SizedVector{D, T, Vector{T}}}}} where T) where D","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:D, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/Molly.jl
src/MultidimensionalTools.jl,reshape_as_required,mtsig,"(Tuple{Array{T, N}, T, Vararg{Union{NTuple{N, Int}, CartesianIndex{N}}}} where N) where T","(Tuple{Array{T, N}, T, Vararg{Union{NTuple{N, Int}, CartesianIndex{N}}}} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/MultidimensionalTools.jl
src/implementations/SparseArrays.jl,operate!,mtsig,"(Tuple{typeof(add_mul), VecOrMat{T}, _TransposeOrAdjoint{<:Any, <:_SparseMat}, AbstractVecOrMat, Vararg{Union{T, Scaling}, N}} where N) where T","(Tuple{typeof(add_mul), VecOrMat{T}, (_TransposeOrAdjoint{var""##ANON_TV#1326"", var""##ANON_TV#1327""} where var""##ANON_TV#1326"" <: Any) where var""##ANON_TV#1327"" <: _SparseMat, AbstractVecOrMat, Vararg{Union{T, Scaling}, N}} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1326""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1327""), :(Union{}), :_SparseMat, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/MutableArithmetics.jl
src/implementations/SparseArrays.jl,operate!,mtsig,"(Tuple{typeof(add_mul), VecOrMat{T}, _SparseMat, AbstractVecOrMat, Vararg{Union{T, Scaling}, N}} where N) where T","(Tuple{typeof(add_mul), VecOrMat{T}, _SparseMat, AbstractVecOrMat, Vararg{Union{T, Scaling}, N}} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/MutableArithmetics.jl
src/implementations/SparseArrays.jl,operate!,mtsig,"(Tuple{typeof(add_mul), Matrix{T}, AbstractMatrix, _SparseMat, Vararg{Union{T, Scaling}, N}} where N) where T","(Tuple{typeof(add_mul), Matrix{T}, AbstractMatrix, _SparseMat, Vararg{Union{T, Scaling}, N}} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/MutableArithmetics.jl
src/implementations/SparseArrays.jl,operate!,mtsig,"(Tuple{typeof(add_mul), Matrix{T}, AbstractMatrix, _TransposeOrAdjoint{<:Any, <:_SparseMat}, Vararg{Union{T, Scaling}, N}} where N) where T","(Tuple{typeof(add_mul), Matrix{T}, AbstractMatrix, (_TransposeOrAdjoint{var""##ANON_TV#1328"", var""##ANON_TV#1329""} where var""##ANON_TV#1328"" <: Any) where var""##ANON_TV#1329"" <: _SparseMat, Vararg{Union{T, Scaling}, N}} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1328""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1329""), :(Union{}), :_SparseMat, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/MutableArithmetics.jl
src/implementations/SparseArrays.jl,operate!,mtsig,"(Tuple{typeof(add_mul), _SparseMat{T}, _SparseMat, _SparseMat, Vararg{Union{T, Scaling}, N}} where N) where T","(Tuple{typeof(add_mul), _SparseMat{T}, _SparseMat, _SparseMat, Vararg{Union{T, Scaling}, N}} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/MutableArithmetics.jl
src/implementations/SparseArrays.jl,operate!,mtsig,"(Tuple{typeof(add_mul), _SparseMat{T}, _SparseMat, _TransposeOrAdjoint{<:Any, <:_SparseMat}, Vararg{Union{T, Scaling}, N}} where N) where T","(Tuple{typeof(add_mul), _SparseMat{T}, _SparseMat, (_TransposeOrAdjoint{var""##ANON_TV#1332"", var""##ANON_TV#1333""} where var""##ANON_TV#1332"" <: Any) where var""##ANON_TV#1333"" <: _SparseMat, Vararg{Union{T, Scaling}, N}} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1332""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1333""), :(Union{}), :_SparseMat, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/MutableArithmetics.jl
src/implementations/SparseArrays.jl,operate!,mtsig,"(Tuple{typeof(add_mul), _SparseMat{T}, _TransposeOrAdjoint{<:Any, <:_SparseMat}, _SparseMat, Vararg{Union{T, Scaling}, N}} where N) where T","(Tuple{typeof(add_mul), _SparseMat{T}, (_TransposeOrAdjoint{var""##ANON_TV#1334"", var""##ANON_TV#1335""} where var""##ANON_TV#1334"" <: Any) where var""##ANON_TV#1335"" <: _SparseMat, _SparseMat, Vararg{Union{T, Scaling}, N}} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1334""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1335""), :(Union{}), :_SparseMat, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/MutableArithmetics.jl
src/implementations/SparseArrays.jl,operate!,mtsig,"(Tuple{typeof(add_mul), _SparseMat{T}, _TransposeOrAdjoint{<:Any, <:_SparseMat}, _TransposeOrAdjoint{<:Any, <:_SparseMat}, Vararg{Union{T, Scaling}, N}} where N) where T","(Tuple{typeof(add_mul), _SparseMat{T}, (_TransposeOrAdjoint{var""##ANON_TV#1336"", var""##ANON_TV#1337""} where var""##ANON_TV#1336"" <: Any) where var""##ANON_TV#1337"" <: _SparseMat, (_TransposeOrAdjoint{var""##ANON_TV#1338"", var""##ANON_TV#1339""} where var""##ANON_TV#1338"" <: Any) where var""##ANON_TV#1339"" <: _SparseMat, Vararg{Union{T, Scaling}, N}} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1336""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1337""), :(Union{}), :_SparseMat, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1338""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1339""), :(Union{}), :_SparseMat, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,6,true,false,false,true,false,../data/ta-info/all/MutableArithmetics.jl
src/execute.jl,cast,mtsig,"Tuple{Type{Union{Missing, T}}, Any, Any} where T","Tuple{Type{Union{Missing, T}}, Any, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/MySQL.jl
src/load.jl,sqltype,mtsig,"Tuple{Type{Union{T, Missing}}} where T","Tuple{Type{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/MySQL.jl
src/prepare.jl,getvalue,mtsig,"Tuple{Any, Any, Any, Any, Type{Union{T, Missing}}} where T","Tuple{Any, Any, Any, Any, Type{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/MySQL.jl
src/prepare.jl,defaultvalue,mtsig,"Tuple{Type{Union{Missing, T}}} where T","Tuple{Type{Union{Missing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/MySQL.jl
src/cfvariable.jl,defVar,mtsig,"(Tuple{NCDataset, Any, AbstractArray{Union{Missing, nctype}, N}, Any, Vararg{Any}} where nctype <: Union{Int8, UInt8, Int16, Int32, Int64, Float32, Float64}) where N","(Tuple{NCDataset, Any, AbstractArray{Union{Missing, nctype}, N}, Any, Vararg{Any}} where nctype <: Union{Int8, UInt8, Int16, Int32, Int64, Float32, Float64}) where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:nctype, :(Union{}), :(Union{Int8, UInt8, Int16, Int32, Int64, Float32, Float64}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/NCDatasets.jl
src/variable.jl,nomissing,mtsig,"(Tuple{AbstractArray{Union{T, Missing}, N}} where N) where T","(Tuple{AbstractArray{Union{T, Missing}, N}} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/NCDatasets.jl
src/variable.jl,nomissing,mtsig,"(Tuple{Array{Union{T, Missing}, N}, Any} where N) where T","(Tuple{Array{Union{T, Missing}, N}, Any} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/NCDatasets.jl
src/Endpoint.jl,for_assignment,mtsig,"Tuple{Type{Union{Missing, T}}, Missing} where T <: Union{AbstractString, Number, TimeType}","Tuple{Type{Union{Missing, T}}, Missing} where T <: Union{AbstractString, Number, TimeType}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{AbstractString, Number, TimeType}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/NCEI.jl
src/Endpoint.jl,for_assignment,mtsig,"Tuple{Type{Union{Missing, T}}, AbstractString} where T <: AbstractString","Tuple{Type{Union{Missing, T}}, AbstractString} where T <: AbstractString","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :AbstractString, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/NCEI.jl
src/Endpoint.jl,for_assignment,mtsig,"Tuple{Type{Union{Missing, T}}, Number} where T <: Number","Tuple{Type{Union{Missing, T}}, Number} where T <: Number","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/NCEI.jl
src/Endpoint.jl,for_assignment,mtsig,"Tuple{Type{Union{Missing, T}}, AbstractString} where T <: TimeType","Tuple{Type{Union{Missing, T}}, AbstractString} where T <: TimeType","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :TimeType, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/NCEI.jl
src/load.jl,sqltype,mtsig,"Tuple{Any, Type{Union{T, Missing}}} where T","Tuple{Any, Type{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/ODBC.jl
src/missing_data.jl,project,mtsig,"Tuple{Diagonal{T}, AbstractMatrix{T}, ColVecs{Union{Missing, T}}, T, Diagonal{T}} where T <: Real","Tuple{Diagonal{T}, AbstractMatrix{T}, ColVecs{Union{Missing, T}}, T, Diagonal{T}} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/OILMMs.jl
src/missing_data.jl,regulariser,mtsig,"Tuple{Diagonal{T}, AbstractMatrix{T}, T, ColVecs{Union{Missing, T}}} where T <: Real","Tuple{Diagonal{T}, AbstractMatrix{T}, T, ColVecs{Union{Missing, T}}} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/OILMMs.jl
src/missing_data.jl,compute_patterns,mtsig,"Tuple{AbstractMatrix{Union{Missing, T}} where T <: Real}","Tuple{AbstractMatrix{Union{Missing, T}} where T <: Real}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar)], list(JuliaSub.TCTuple))], false)",false,false,1,true,true,false,true,false,../data/ta-info/all/OILMMs.jl
src/Core.jl,_tovec,mtsig,"((Tuple{NTuple{N, NTuple{M, LT} where M}, NTuple{K, LT}} where LT) where K) where N","((Tuple{NTuple{N, NTuple{M, LT} where M}, NTuple{K, LT}} where LT) where K) where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:M, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:LT, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/OMEinsum.jl
src/utils.jl,clip,mtsig,"Tuple{Array{Union{Missing, T}, 2} where T <: Number, Int64, Int64, Int64}","Tuple{Array{Union{Missing, T}, 2} where T <: Number, Int64, Int64, Int64}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar)], list(JuliaSub.TCTuple))], false)",false,false,1,true,true,false,true,false,../data/ta-info/all/Omniscape.jl
src/utils.jl,get_targets,mtsig,"Tuple{Array{Union{T, Missing}, 2} where T <: Number, Dict{String, Int64}, DataType}","Tuple{Array{Union{T, Missing}, 2} where T <: Number, Dict{String, Int64}, DataType}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar)], list(JuliaSub.TCTuple))], false)",false,false,1,true,true,false,true,false,../data/ta-info/all/Omniscape.jl
src/Optical/LensAssembly.jl,LensAssembly,mtsig,"Tuple{Vararg{Union{Surface{T}, CSGTree{T}, LensAssembly{T}}}, SVector{3, T}} where T <: Real","Tuple{Vararg{Union{Surface{T}, CSGTree{T}, LensAssembly{T}}}, SVector{3, T}} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/OpticSim.jl
src/little_dict.jl,kvtype,mtsig,"Tuple{Type{Pair{<:Any, V}}} where V","Tuple{Type{Pair{var""##ANON_TV#777"", V} where var""##ANON_TV#777"" <: Any}} where V","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#777""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/OrderedCollections.jl
src/little_dict.jl,kvtype,mtsig,"Tuple{Type{Pair{K, <:Any}}} where K","Tuple{Type{Pair{K, var""##ANON_TV#778""} where var""##ANON_TV#778"" <: Any}} where K","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#778""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/OrderedCollections.jl
src/Groups/cosets.jl,intersect,mtsig,"Tuple{AbstractVector{Union{T, GroupCoset, GroupDoubleCoset}}} where T <: GAPGroup","Tuple{AbstractVector{Union{T, GroupCoset, GroupDoubleCoset}}} where T <: GAPGroup","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :GAPGroup, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Oscar.jl
src/Groups/directproducts.jl,W::WreathProductGroup,mtsig,"Tuple{Vararg{Union{GAPGroupElem{T}, GAPGroupElem{PermGroup}}}} where T <: GAPGroup","Tuple{Vararg{Union{GAPGroupElem{T}, GAPGroupElem{PermGroup}}}} where T <: GAPGroup","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :GAPGroup, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Oscar.jl
src/PolyhedralGeometry/PolyhedralComplex/properties.jl,_vertex_or_ray_polyhedron,mtsig,"Tuple{Type{Union{PointVector{T}, RayVector{T}}}, Polymake.BigObject, Base.Integer} where T <: scalar_types","Tuple{Type{Union{PointVector{T}, RayVector{T}}}, Polymake.BigObject, Base.Integer} where T <: scalar_types","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :scalar_types, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Oscar.jl
src/PolyhedralGeometry/PolyhedralComplex/properties.jl,vertices,mtsig,"Tuple{Type{Union{RayVector{T}, PointVector{T}}}, PolyhedralComplex} where T <: scalar_types","Tuple{Type{Union{RayVector{T}, PointVector{T}}}, PolyhedralComplex} where T <: scalar_types","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :scalar_types, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Oscar.jl
src/SmashProductDeformLie.jl,reduce_and_store!,mtsig,"Tuple{Vector{Union{Nothing, SparseVector{T, Int64}}}, SparseVector{T, Int64}} where T <: Union{RingElement, Number}","Tuple{Vector{Union{Nothing, SparseVector{T, Int64}}}, SparseVector{T, Int64}} where T <: Union{RingElement, Number}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{RingElement, Number}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/PBWDeformations.jl
src/SmashProductDeformLie.jl,reduced_row_echelon!,mtsig,"Tuple{Vector{Union{Nothing, SparseVector{T, Int64}}}} where T <: Union{RingElement, Number}","Tuple{Vector{Union{Nothing, SparseVector{T, Int64}}}} where T <: Union{RingElement, Number}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{RingElement, Number}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/PBWDeformations.jl
src/SmashProductDeformLie.jl,lgs_to_mat,mtsig,"Tuple{Vector{Union{Nothing, SparseVector{T, Int64}}}} where T <: Union{RingElement, Number}","Tuple{Vector{Union{Nothing, SparseVector{T, Int64}}}} where T <: Union{RingElement, Number}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Union{RingElement, Number}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/PBWDeformations.jl
src/cursor.jl,colcursor_values,mtsig,"Tuple{ColCursor{T}, Int64, Type{Vector{Union{Missing, T}}}, Any} where T","Tuple{ColCursor{T}, Int64, Type{Vector{Union{Missing, T}}}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Parquet.jl
src/writer.jl,write_defn_levels,mtsig,"Tuple{Any, AbstractVector{Union{Missing, T}}} where T","Tuple{Any, AbstractVector{Union{Missing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Parquet.jl
src/writer.jl,write_encoded_data,mtsig,"Tuple{Any, AbstractVector{Union{Missing, T}}} where T","Tuple{Any, AbstractVector{Union{Missing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Parquet.jl
src/arrays.jl,Base.getindex,mtsig,"Tuple{StringViewVector{Union{Missing, 𝒯}}, Int} where 𝒯","Tuple{StringViewVector{Union{Missing, 𝒯}}, Int} where 𝒯","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:𝒯, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Parquet2.jl
src/read.jl,_loadplain_bits!,mtsig,"Tuple{AbstractVector{Union{Missing, 𝒯}}, Integer, AbstractVector, Integer, ParquetType} where 𝒯","Tuple{AbstractVector{Union{Missing, 𝒯}}, Integer, AbstractVector, Integer, ParquetType} where 𝒯","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:𝒯, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Parquet2.jl
src/read.jl,_loadbits_refs!,mtsig,"Tuple{AbstractVector{Union{𝒯, Missing}}, Integer, Integer, AbstractVector, HybridIterator} where 𝒯","Tuple{AbstractVector{Union{𝒯, Missing}}, Integer, Integer, AbstractVector, HybridIterator} where 𝒯","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:𝒯, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Parquet2.jl
src/schema.jl,maxdeflevel,mtsig,"Tuple{AbstractVector{Union{𝒯, Missing}}} where 𝒯","Tuple{AbstractVector{Union{𝒯, Missing}}} where 𝒯","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:𝒯, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Parquet2.jl
src/splitcap.jl,strip_nothing_,mtsig,"Tuple{Type{Union{Nothing, T}}} where T","Tuple{Type{Union{Nothing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/PcapTools.jl
src/interactive.jl,input_tips,mtsig,"Tuple{Type{Union{T, Nothing}}} where T","Tuple{Type{Union{T, Nothing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/PkgTemplates.jl
src/interactive.jl,convert_input,mtsig,"Tuple{Type, Type{Union{T, Nothing}}, AbstractString} where T","Tuple{Type, Type{Union{T, Nothing}}, AbstractString} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/PkgTemplates.jl
src/choropleth.jl,choropleth,mtsig,"Tuple{Union{AbstractArray{T, 1}, AbstractArray{Union{Missing, T}, 1}}, Compose.Context, Any, Any, Any, Any, Any, Any, Any} where T <: Shapefile.GeoInterface.AbstractGeometry","Tuple{Union{AbstractArray{T, 1}, AbstractArray{Union{Missing, T}, 1}}, Compose.Context, Any, Any, Any, Any, Any, Any, Any} where T <: Shapefile.GeoInterface.AbstractGeometry","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Shapefile.GeoInterface.AbstractGeometry), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/PlotShapefiles.jl
src/choropleth.jl,choropleth,mtsig,"Tuple{Union{AbstractArray{T, 1}, AbstractArray{Union{Missing, T}, 1}}, Shapefile.Rect, Any, Any, Any, Any, Vararg{Any}} where T <: Shapefile.GeoInterface.AbstractGeometry","Tuple{Union{AbstractArray{T, 1}, AbstractArray{Union{Missing, T}, 1}}, Shapefile.Rect, Any, Any, Any, Any, Vararg{Any}} where T <: Shapefile.GeoInterface.AbstractGeometry","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Shapefile.GeoInterface.AbstractGeometry), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/PlotShapefiles.jl
src/choropleth.jl,choropleth,mtsig,"Tuple{Union{AbstractArray{T, 1}, AbstractArray{Union{Missing, T}, 1}}, Any, Any, Vararg{Any}} where T <: Shapefile.GeoInterface.AbstractGeometry","Tuple{Union{AbstractArray{T, 1}, AbstractArray{Union{Missing, T}, 1}}, Any, Any, Vararg{Any}} where T <: Shapefile.GeoInterface.AbstractGeometry","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Shapefile.GeoInterface.AbstractGeometry), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/PlotShapefiles.jl
src/plotshape.jl,plotshape,mtsig,"Tuple{Union{AbstractArray{T, 1}, AbstractArray{Union{Missing, T}, 1}}, Compose.Context, Any, Any, Any, Any, Any, Any} where T <: AbstractGeom","Tuple{Union{AbstractArray{T, 1}, AbstractArray{Union{Missing, T}, 1}}, Compose.Context, Any, Any, Any, Any, Any, Any} where T <: AbstractGeom","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :AbstractGeom, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/PlotShapefiles.jl
src/plotshape.jl,plotshape,mtsig,"Tuple{Union{AbstractArray{T, 1}, AbstractArray{Union{Missing, T}, 1}}, Shapefile.Rect, Any, Any, Vararg{Any}} where T <: AbstractGeom","Tuple{Union{AbstractArray{T, 1}, AbstractArray{Union{Missing, T}, 1}}, Shapefile.Rect, Any, Any, Vararg{Any}} where T <: AbstractGeom","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :AbstractGeom, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/PlotShapefiles.jl
src/plotshape.jl,plotshape,mtsig,"Tuple{Union{AbstractArray{T, 1}, AbstractArray{Union{Missing, T}, 1}}, Vararg{Any}} where T <: AbstractGeom","Tuple{Union{AbstractArray{T, 1}, AbstractArray{Union{Missing, T}, 1}}, Vararg{Any}} where T <: AbstractGeom","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :AbstractGeom, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/PlotShapefiles.jl
src/runner/PlutoRunner.jl,trynameof,mtsig,"Tuple{Type{Union{T, Missing}}} where T","Tuple{Type{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Pluto.jl
src/Manipulate.jl,locationdata!,mtsig,"Tuple{PopData, Vector{Union{Missing, T}}, Vector{Union{Missing, T}}} where T <: AbstractFloat","Tuple{PopData, Vector{Union{Missing, T}}, Vector{Union{Missing, T}}} where T <: AbstractFloat","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :AbstractFloat, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/PopGenCore.jl
src/PostgresORMUtil/utils.jl,vector_of_integers2vector_of_enums,mtsig,"Tuple{Type{Vector{T}} where T <: Base.Enums.Enum, Union{Vector{W}, Vector{Union{W, Missing}}} where W <: Integer}","Tuple{Type{Vector{T}} where T <: Base.Enums.Enum, Union{Vector{W}, Vector{Union{W, Missing}}} where W <: Integer}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :(Base.Enums.Enum), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar)], list(JuliaSub.TCTuple)), JuliaSub.TyVarSummary(:W, :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion)], list(JuliaSub.TCTuple))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/PostgresORM.jl
src/toplevel/always-loaded/utils/missings.jl,disallowmissing,mtsig,"(Tuple{AbstractArray{Union{Missing, T}, N}} where T) where N","(Tuple{AbstractArray{Union{Missing, T}, N}} where T) where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/PredictMD.jl
src/gates.jl,Base.kron,mtsig,"Tuple{Vararg{Union{UniformScaling{Bool}, G}}} where G <: AbstractGate","Tuple{Vararg{Union{UniformScaling{Bool}, G}}} where G <: AbstractGate","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:G, :(Union{}), :AbstractGate, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Qaintessent.jl
test/util.jl,test_round_trip,mtsig,"Tuple{Type{Union{Missing, T}}, Any} where T","Tuple{Type{Union{Missing, T}}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/QuakeML.jl
src/Essentials/Spatials.jl,ReciprocalPath,mtsig,"(Tuple{AbstractVector, Vararg{Pair{<:NTuple{N, Number}, <:NTuple{N, Number}}}, Union{Int, NTuple{M, Int}}, Union{NTuple{2, Bool}, NTuple{M, NTuple{2, Bool}}}} where M) where N","(Tuple{AbstractVector, Vararg{(Pair{var""##ANON_TV#1430"", var""##ANON_TV#1431""} where var""##ANON_TV#1430"" <: NTuple{N, Number}) where var""##ANON_TV#1431"" <: NTuple{N, Number}}, Union{Int, NTuple{M, Int}}, Union{NTuple{2, Bool}, NTuple{M, NTuple{2, Bool}}}} where M) where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1430""), :(Union{}), :(NTuple{N, Number}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1431""), :(Union{}), :(NTuple{N, Number}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:M, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/QuantumLattices.jl
src/Essentials/Spatials.jl,ReciprocalPath,mtsig,"(Tuple{AbstractVector, Tuple{Vararg{Pair{<:NTuple{N, Number}, <:NTuple{N, Number}}}}, Union{Int, NTuple{M, Int}}, Union{NTuple{2, Bool}, NTuple{M, NTuple{2, Bool}}}} where M) where N","(Tuple{AbstractVector, Tuple{Vararg{(Pair{var""##ANON_TV#1432"", var""##ANON_TV#1433""} where var""##ANON_TV#1432"" <: NTuple{N, Number}) where var""##ANON_TV#1433"" <: NTuple{N, Number}}}, Union{Int, NTuple{M, Int}}, Union{NTuple{2, Bool}, NTuple{M, NTuple{2, Bool}}}} where M) where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1432""), :(Union{}), :(NTuple{N, Number}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1433""), :(Union{}), :(NTuple{N, Number}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:M, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/QuantumLattices.jl
src/Essentials/Spatials.jl,ReciprocalPath,mtsig,"((Tuple{AbstractVector, Vararg{Pair{<:NTuple{N, Number}, <:NTuple{N, Number}}}, Union{Int, NTuple{M, Int}}, Union{NTuple{2, Bool}, NTuple{M, NTuple{2, Bool}}}} where M) where N) where K","((Tuple{AbstractVector, Vararg{(Pair{var""##ANON_TV#1434"", var""##ANON_TV#1435""} where var""##ANON_TV#1434"" <: NTuple{N, Number}) where var""##ANON_TV#1435"" <: NTuple{N, Number}}, Union{Int, NTuple{M, Int}}, Union{NTuple{2, Bool}, NTuple{M, NTuple{2, Bool}}}} where M) where N) where K","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1434""), :(Union{}), :(NTuple{N, Number}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1435""), :(Union{}), :(NTuple{N, Number}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:M, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[], nil(JuliaSub.TypeConstructor))], false)",false,false,5,true,false,false,true,false,../data/ta-info/all/QuantumLattices.jl
src/Essentials/Spatials.jl,ReciprocalPath,mtsig,"((Tuple{AbstractVector, Tuple{Vararg{Pair{<:NTuple{N, Number}, <:NTuple{N, Number}}}}, Union{Int, NTuple{M, Int}}, Union{NTuple{2, Bool}, NTuple{M, NTuple{2, Bool}}}} where M) where N) where K","((Tuple{AbstractVector, Tuple{Vararg{(Pair{var""##ANON_TV#1436"", var""##ANON_TV#1437""} where var""##ANON_TV#1436"" <: NTuple{N, Number}) where var""##ANON_TV#1437"" <: NTuple{N, Number}}}, Union{Int, NTuple{M, Int}}, Union{NTuple{2, Bool}, NTuple{M, NTuple{2, Bool}}}} where M) where N) where K","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1436""), :(Union{}), :(NTuple{N, Number}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1437""), :(Union{}), :(NTuple{N, Number}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:M, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[], nil(JuliaSub.TypeConstructor))], false)",false,false,5,true,false,false,true,false,../data/ta-info/all/QuantumLattices.jl
src/Tools.jl,tupleDiff,mtsig,"(Tuple{Vararg{NTuple{<:Any, T}, N}} where N) where T","(Tuple{Vararg{NTuple{var""##ANON_TV#2996"", T} where var""##ANON_TV#2996"" <: Any, N}} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#2996""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/Quiqbox.jl
src/NaiveParserc.jl,crate,mtsig,"Tuple{Type{Union{T, Nothing}}} where T","Tuple{Type{Union{T, Nothing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/RBNF.jl
src/convert/default.jl,sexpclass,mtsig,"Tuple{AbstractArray{Union{T, Missing}}} where T <: $J","Tuple{AbstractArray{Union{T, Missing}}} where T <: $J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :($(Expr(:$, :J))), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], true)",false,true,1,true,true,true,true,false,../data/ta-info/all/RCall.jl
src/convert/missing.jl,rcopy,mtsig,"Tuple{Type{Array{Union{T, Missing}}}, Ptr{$S}} where T","Tuple{Type{Array{Union{T, Missing}}}, Ptr{$S}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], true)",false,true,1,true,true,true,true,false,../data/ta-info/all/RCall.jl
src/convert/missing.jl,rcopy,mtsig,"Tuple{Type{Vector{Union{T, Missing}}}, Ptr{$S}} where T","Tuple{Type{Vector{Union{T, Missing}}}, Ptr{$S}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], true)",false,true,1,true,true,true,true,false,../data/ta-info/all/RCall.jl
src/convert/missing.jl,sexp,mtsig,"Tuple{Type{RClass{$(QuoteNode(C))}}, AbstractArray{Union{T, Missing}}} where T <: $J","Tuple{Type{RClass{$(QuoteNode(C))}}, AbstractArray{Union{T, Missing}}} where T <: $J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :($(Expr(:$, :J))), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], true)",false,true,1,true,true,true,true,false,../data/ta-info/all/RCall.jl
src/convert/missing.jl,sexp,mtsig,"Tuple{Type{RClass{$(QuoteNode(C))}}, AbstractArray{Union{T, Missing}}} where T <: $J","Tuple{Type{RClass{$(QuoteNode(C))}}, AbstractArray{Union{T, Missing}}} where T <: $J","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :($(Expr(:$, :J))), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], true)",false,true,1,true,true,true,true,false,../data/ta-info/all/RCall.jl
src/missing.jl,remove_missing,mtsig,"Tuple{AbstractVector{Union{T, Missing}}} where T","Tuple{AbstractVector{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/ROCAnalysis.jl
src/missing.jl,remove_missing,mtsig,"Tuple{AbstractVector{Union{T, Missing}}} where T","Tuple{AbstractVector{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/ROCAnalysis.jl
src/sequence_spaces/arithmetic/fft.jl,fft_size,mtsig,"Tuple{TensorSpace{<:NTuple{N, BaseSpace}}, TensorSpace{<:NTuple{N, BaseSpace}}, Vararg{TensorSpace{<:NTuple{N, BaseSpace}}}} where N","Tuple{TensorSpace{var""##ANON_TV#2138""} where var""##ANON_TV#2138"" <: NTuple{N, BaseSpace}, TensorSpace{var""##ANON_TV#2139""} where var""##ANON_TV#2139"" <: NTuple{N, BaseSpace}, Vararg{TensorSpace{var""##ANON_TV#2140""} where var""##ANON_TV#2140"" <: NTuple{N, BaseSpace}}} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#2138""), :(Union{}), :(NTuple{N, BaseSpace}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#2139""), :(Union{}), :(NTuple{N, BaseSpace}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#2140""), :(Union{}), :(NTuple{N, BaseSpace}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/RadiiPolynomial.jl
src/sampling.jl,maketype,mtsig,"Tuple{Type{Pair{X, Y} where X}, Any, Any} where Y","Tuple{Type{Pair{X, Y} where X}, Any, Any} where Y","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:X, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:Y, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/RandomExtensions.jl
src/sampling.jl,make,mtsig,"Tuple{Type{NTuple{N, T} where N}, Integer} where T","Tuple{Type{NTuple{N, T} where N}, Integer} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/RandomExtensions.jl
src/sampling.jl,make,mtsig,"Tuple{Type{NTuple{N, T} where N}, Any, Integer} where T","Tuple{Type{NTuple{N, T} where N}, Any, Integer} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/RandomExtensions.jl
src/sampling.jl,make,mtsig,"(Tuple{Type{NTuple{N, T} where N}, Type{X}, Integer} where X) where T","(Tuple{Type{NTuple{N, T} where N}, Type{X}, Integer} where X) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:X, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/RandomExtensions.jl
src/sampling.jl,maketype,mtsig,"Tuple{Type{($D){K, V} where K}, Any, Integer} where V","Tuple{Type{($D){K, V} where K}, Any, Integer} where V","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:K, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/RandomExtensions.jl
src/sampling.jl,maketype,mtsig,"Tuple{Type{Array{T, N} where T}, Any, Dims{N}} where N","Tuple{Type{Array{T, N} where T}, Any, Dims{N}} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/RandomExtensions.jl
src/client.jl,convert_response,mtsig,"Tuple{Type{Union{T, Nothing}}, Any} where T <: Number","Tuple{Type{Union{T, Nothing}}, Any} where T <: Number","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Redis.jl
src/client.jl,convert_response,mtsig,"Tuple{Type{Union{T, Nothing}}, Any} where T <: AbstractString","Tuple{Type{Union{T, Nothing}}, Any} where T <: AbstractString","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :AbstractString, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Redis.jl
src/client.jl,convert_response,mtsig,"Tuple{Type{Array{Union{T, Nothing}, 1}}, Any} where T <: Number","Tuple{Type{Array{Union{T, Nothing}, 1}}, Any} where T <: Number","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Redis.jl
src/client.jl,convert_response,mtsig,"Tuple{Type{Array{Union{T, Nothing}, 1}}, Any} where T <: AbstractString","Tuple{Type{Array{Union{T, Nothing}, 1}}, Any} where T <: AbstractString","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :AbstractString, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Redis.jl
src/RiemannHilbert.jl,component_indices,mtsig,"Tuple{BlockInterlacer{NTuple{N, <:AbstractFill{Bool}}}, Int, AbstractUnitRange} where N","Tuple{BlockInterlacer{NTuple{N, var""##ANON_TV#2914""} where var""##ANON_TV#2914"" <: AbstractFill{Bool}}, Int, AbstractUnitRange} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#2914""), :(Union{}), :(AbstractFill{Bool}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/RiemannHilbert.jl
src/mechanism_modification.jl,rand_tree_mechanism,mtsig,"Tuple{Type{T}, Function, Vararg{Type{<:JointType{T}}}} where T","Tuple{Type{T}, Function, Vararg{Type{var""##ANON_TV#1651""} where var""##ANON_TV#1651"" <: JointType{T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1651""), :(Union{}), :(JointType{T}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/RigidBodyDynamics.jl
src/mechanism_modification.jl,rand_tree_mechanism,mtsig,"Tuple{Function, Vararg{Type{<:JointType{T}}}} where T","Tuple{Function, Vararg{Type{var""##ANON_TV#1652""} where var""##ANON_TV#1652"" <: JointType{T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1652""), :(Union{}), :(JointType{T}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/RigidBodyDynamics.jl
src/mechanism_modification.jl,rand_chain_mechanism,mtsig,"Tuple{Type{T}, Vararg{Type{<:JointType{T}}}} where T","Tuple{Type{T}, Vararg{Type{var""##ANON_TV#1653""} where var""##ANON_TV#1653"" <: JointType{T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1653""), :(Union{}), :(JointType{T}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/RigidBodyDynamics.jl
src/mechanism_modification.jl,rand_chain_mechanism,mtsig,Tuple{Vararg{Type{<:JointType{T}}}} where T,"Tuple{Vararg{Type{var""##ANON_TV#1654""} where var""##ANON_TV#1654"" <: JointType{T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1654""), :(Union{}), :(JointType{T}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/RigidBodyDynamics.jl
src/mechanism_modification.jl,rand_tree_mechanism,mtsig,"Tuple{Type{T}, Vararg{Type{<:JointType{T}}}} where T","Tuple{Type{T}, Vararg{Type{var""##ANON_TV#1655""} where var""##ANON_TV#1655"" <: JointType{T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1655""), :(Union{}), :(JointType{T}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/RigidBodyDynamics.jl
src/mechanism_modification.jl,rand_tree_mechanism,mtsig,Tuple{Vararg{Type{<:JointType{T}}}} where T,"Tuple{Vararg{Type{var""##ANON_TV#1656""} where var""##ANON_TV#1656"" <: JointType{T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1656""), :(Union{}), :(JointType{T}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/RigidBodyDynamics.jl
src/mechanism_modification.jl,rand_floating_tree_mechanism,mtsig,"Tuple{Type{T}, Vararg{Type{<:JointType{T}}}} where T","Tuple{Type{T}, Vararg{Type{var""##ANON_TV#1657""} where var""##ANON_TV#1657"" <: JointType{T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1657""), :(Union{}), :(JointType{T}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/RigidBodyDynamics.jl
src/mechanism_modification.jl,rand_floating_tree_mechanism,mtsig,Tuple{Vararg{Type{<:JointType{T}}}} where T,"Tuple{Vararg{Type{var""##ANON_TV#1658""} where var""##ANON_TV#1658"" <: JointType{T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1658""), :(Union{}), :(JointType{T}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/RigidBodyDynamics.jl
src/operators/default_if_empty.jl,on_call!,mtsig,"(Tuple{Type{L}, Type{Union{L, T}}, DefaultIfEmptyOperator{T}, Any} where T) where L","(Tuple{Type{L}, Type{Union{L, T}}, DefaultIfEmptyOperator{T}, Any} where T) where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/Rocket.jl
src/operators/max.jl,on_call!,mtsig,"Tuple{Type{L}, Type{Union{L, Nothing}}, MaxOperator, Any} where L","Tuple{Type{L}, Type{Union{L, Nothing}}, MaxOperator, Any} where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Rocket.jl
src/operators/max.jl,actor_proxy!,mtsig,"(Tuple{Type{Union{L, Nothing}}, MaxProxy, A} where A) where L","(Tuple{Type{Union{L, Nothing}}, MaxProxy, A} where A) where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:A, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Rocket.jl
src/operators/min.jl,on_call!,mtsig,"Tuple{Type{L}, Type{Union{L, Nothing}}, MinOperator, Any} where L","Tuple{Type{L}, Type{Union{L, Nothing}}, MinOperator, Any} where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Rocket.jl
src/operators/min.jl,actor_proxy!,mtsig,"(Tuple{Type{Union{L, Nothing}}, MinProxy, A} where A) where L","(Tuple{Type{Union{L, Nothing}}, MinProxy, A} where A) where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:A, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Rocket.jl
src/operators/override.jl,on_call!,mtsig,"(Tuple{Type{L}, Type{Union{L, T}}, OverrideOperator{T}, Any} where T) where L","(Tuple{Type{L}, Type{Union{L, T}}, OverrideOperator{T}, Any} where T) where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/Rocket.jl
src/operators/some.jl,on_call!,mtsig,"Tuple{Type{Union{L, Nothing}}, Type{L}, SomeOperator, Any} where L","Tuple{Type{Union{L, Nothing}}, Type{L}, SomeOperator, Any} where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Rocket.jl
src/operators/some.jl,operator_right,mtsig,"Tuple{SomeOperator, Type{Union{L, Nothing}}} where L","Tuple{SomeOperator, Type{Union{L, Nothing}}} where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Rocket.jl
src/operators/sum.jl,on_call!,mtsig,"Tuple{Type{L}, Type{Union{L, Nothing}}, SumOperator, Any} where L","Tuple{Type{L}, Type{Union{L, Nothing}}, SumOperator, Any} where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Rocket.jl
src/operators/sum.jl,actor_proxy!,mtsig,"(Tuple{Type{Union{L, Nothing}}, SumProxy, A} where A) where L","(Tuple{Type{Union{L, Nothing}}, SumProxy, A} where A) where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:A, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Rocket.jl
src/roll/rollstats.jl,rollcor,mtsig,"((Tuple{V1, V2, Int} where V2 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where V1 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where T","((Tuple{V1, V2, Int} where V2 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where V1 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:V2, :(Union{}), :(Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V1, :(Union{}), :(Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/RollingFunctions.jl
src/roll/rollstats.jl,rollcov,mtsig,"((Tuple{V1, V2, Int} where V2 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where V1 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where T","((Tuple{V1, V2, Int} where V2 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where V1 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:V2, :(Union{}), :(Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V1, :(Union{}), :(Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/RollingFunctions.jl
src/roll/rollstats.jl,rollcor,mtsig,"(((Tuple{V1, V2, Int, AbstractVector{S}} where V2 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where V1 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where T) where S","(((Tuple{V1, V2, Int, AbstractVector{S}} where V2 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where V1 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where T) where S","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:V2, :(Union{}), :(Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V1, :(Union{}), :(Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/RollingFunctions.jl
src/roll/rollstats.jl,rollcov,mtsig,"(((Tuple{V1, V2, Int, AbstractVector{S}} where V2 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where V1 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where T) where S","(((Tuple{V1, V2, Int, AbstractVector{S}} where V2 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where V1 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where T) where S","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:V2, :(Union{}), :(Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V1, :(Union{}), :(Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/RollingFunctions.jl
src/run/runstats.jl,runcor,mtsig,"((Tuple{V1, V2, Int} where V2 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where V1 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where T","((Tuple{V1, V2, Int} where V2 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where V1 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:V2, :(Union{}), :(Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V1, :(Union{}), :(Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/RollingFunctions.jl
src/run/runstats.jl,runcov,mtsig,"((Tuple{V1, V2, Int} where V2 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where V1 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where T","((Tuple{V1, V2, Int} where V2 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where V1 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:V2, :(Union{}), :(Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V1, :(Union{}), :(Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/RollingFunctions.jl
src/run/runstats.jl,runcor,mtsig,"(((Tuple{V1, V2, Int, AbstractVector{S}} where V2 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where V1 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where T) where S","(((Tuple{V1, V2, Int, AbstractVector{S}} where V2 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where V1 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where T) where S","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:V2, :(Union{}), :(Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V1, :(Union{}), :(Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/RollingFunctions.jl
src/run/runstats.jl,runcov,mtsig,"(((Tuple{V1, V2, Int, AbstractVector{S}} where V2 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where V1 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where T) where S","(((Tuple{V1, V2, Int, AbstractVector{S}} where V2 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where V1 <: Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}) where T) where S","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:V2, :(Union{}), :(Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V1, :(Union{}), :(Union{AbstractVector{T}, AbstractVector{Union{Missing, T}}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCUpBnd, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/RollingFunctions.jl
src/arrayops.jl,Base.getindex,mtsig,"(Tuple{ContiguousArray{T}, VecRange{N}, Vararg{Union{Integer, Vec{N, Bool}}}} where T) where N","(Tuple{ContiguousArray{T}, VecRange{N}, Vararg{Union{Integer, Vec{N, Bool}}}} where T) where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/SIMD.jl
src/arrayops.jl,Base.setindex!,mtsig,"(Tuple{ContiguousArray{T}, Vec{N, T}, VecRange{N}, Vararg{Union{Integer, Vec{N, Bool}}}} where T) where N","(Tuple{ContiguousArray{T}, Vec{N, T}, VecRange{N}, Vararg{Union{Integer, Vec{N, Bool}}}} where T) where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/SIMD.jl
src/arrayops.jl,Base.getindex,mtsig,"(Tuple{ContiguousArray{T}, Vec{N, <:Integer}, Vararg{Union{Integer, Vec{N, Bool}}}} where T) where N","(Tuple{ContiguousArray{T}, Vec{N, var""##ANON_TV#2944""} where var""##ANON_TV#2944"" <: Integer, Vararg{Union{Integer, Vec{N, Bool}}}} where T) where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#2944""), :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/SIMD.jl
src/arrayops.jl,Base.setindex!,mtsig,"(Tuple{ContiguousArray{T}, Vec{N, T}, Vec{N, <:Integer}, Vararg{Union{Integer, Vec{N, Bool}}}} where T) where N","(Tuple{ContiguousArray{T}, Vec{N, T}, Vec{N, var""##ANON_TV#2945""} where var""##ANON_TV#2945"" <: Integer, Vararg{Union{Integer, Vec{N, Bool}}}} where T) where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#2945""), :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/SIMD.jl
src/SQLStore.jl,coltype,mtsig,"Tuple{Type{Union{T, Missing}}} where T","Tuple{Type{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/SQLStore.jl
src/SQLStore.jl,colcheck,mtsig,"Tuple{Any, Type{Union{T, Missing}}} where T","Tuple{Any, Type{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/SQLStore.jl
src/SQLite.jl,sqlitetype,mtsig,"Tuple{Type{Union{T, Missing}}} where T","Tuple{Type{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/SQLite.jl
src/SchumakerFunctions.jl,Schumaker,mtsig,"(Tuple{Union{AbstractArray{T, 1}, AbstractArray{Union{Missing, T}, 1}}, Union{AbstractArray{R, 1}, AbstractArray{Union{Missing, R}, 1}}, Union{Missing, AbstractArray{<:Real, 1}}, Union{Missing, Real}, Union{Missing, Real}, Tuple{Schumaker_ExtrapolationSchemes, Schumaker_ExtrapolationSchemes}} where T <: Real) where R <: Real","(Tuple{Union{AbstractArray{T, 1}, AbstractArray{Union{Missing, T}, 1}}, Union{AbstractArray{R, 1}, AbstractArray{Union{Missing, R}, 1}}, Union{Missing, AbstractArray{var""##ANON_TV#1161"", 1} where var""##ANON_TV#1161"" <: Real}, Union{Missing, Real}, Union{Missing, Real}, Tuple{Schumaker_ExtrapolationSchemes, Schumaker_ExtrapolationSchemes}} where T <: Real) where R <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1161""), :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/SchumakerSpline.jl
src/scitype.jl,Fallback_Scitype,mtsig,"Tuple{Type{Union{T, Missing}}, Any} where T","Tuple{Type{Union{T, Missing}}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/ScientificTypesBase.jl
src/SentinelMissings.jl,Base.convert,mtsig,"Tuple{Type{Union{T, Missing}}, SentinelMissing} where T","Tuple{Type{Union{T, Missing}}, SentinelMissing} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/SentinelMissings.jl
src/PARSDMM.jl,PARSDMM,mtsig,"(Tuple{Vector{TF}, Union{Vector{Array{TF, 2}}, Vector{SparseMatrixCSC{TF, TI}}, Vector{joAbstractLinearOperator{TF, TF}}, Vector{Union{Array{TF, 2}, SparseMatrixCSC{TF, TI}, joAbstractLinearOperator{TF, TF}}}}, Union{Vector{Union{SparseMatrixCSC{TF, TI}, joAbstractLinearOperator{TF, TF}}}, DistributedArrays.DArray{Union{JOLI.joAbstractLinearOperator{TF, TF}, SparseMatrixCSC{TF, TI}}, 1, Array{Union{joAbstractLinearOperator{TF, TF}, SparseMatrixCSC{TF, TI}}, 1}}}, Any, Union{Vector{Any}, DistributedArrays.DArray{Any, 1, Array{Any, 1}}}, Any, Any, Any, Any, Any} where TI <: Integer) where TF <: Real","(Tuple{Vector{TF}, Union{Vector{Array{TF, 2}}, Vector{SparseMatrixCSC{TF, TI}}, Vector{joAbstractLinearOperator{TF, TF}}, Vector{Union{Array{TF, 2}, SparseMatrixCSC{TF, TI}, joAbstractLinearOperator{TF, TF}}}}, Union{Vector{Union{SparseMatrixCSC{TF, TI}, joAbstractLinearOperator{TF, TF}}}, DistributedArrays.DArray{Union{JOLI.joAbstractLinearOperator{TF, TF}, SparseMatrixCSC{TF, TI}}, 1, Array{Union{joAbstractLinearOperator{TF, TF}, SparseMatrixCSC{TF, TI}}, 1}}}, Any, Union{Vector{Any}, DistributedArrays.DArray{Any, 1, Array{Any, 1}}}, Any, Any, Any, Any, Any} where TI <: Integer) where TF <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:TI, :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:TF, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/SetIntersectionProjection.jl
src/PARSDMM_initialize.jl,PARSDMM_initialize,mtsig,"(Tuple{Vector{TF}, Union{Vector{Vector{TF}}, DistributedArrays.DArray{Array{TF, 1}, 1, Array{Array{TF, 1}, 1}}, Array{Any, 1}}, Union{Vector{Vector{TF}}, DistributedArrays.DArray{Array{TF, 1}, 1, Array{Array{TF, 1}, 1}}, Array{Any, 1}}, Union{Vector{Array{TF, 2}}, Vector{SparseMatrixCSC{TF, TI}}, Vector{joAbstractLinearOperator{TF, TF}}, Vector{Union{Array{TF, 2}, SparseMatrixCSC{TF, TI}, joAbstractLinearOperator{TF, TF}}}}, Union{Vector{Union{SparseMatrixCSC{TF, TI}, JOLI.joAbstractLinearOperator{TF, TF}}}, DistributedArrays.DArray{Union{JOLI.joAbstractLinearOperator{TF, TF}, SparseMatrixCSC{TF, TI}}, 1, Array{Union{JOLI.joAbstractLinearOperator{TF, TF}, SparseMatrixCSC{TF, TI}}, 1}}}, Any, Union{Vector{Any}, DistributedArrays.DArray{Any, 1, Array{Any, 1}}}, Any, Integer, Vector{Real}, TF, String, Integer, Bool, Bool, Bool, Vector{TF}, Bool, Any, Bool, Any} where TI <: Integer) where TF <: Real","(Tuple{Vector{TF}, Union{Vector{Vector{TF}}, DistributedArrays.DArray{Array{TF, 1}, 1, Array{Array{TF, 1}, 1}}, Array{Any, 1}}, Union{Vector{Vector{TF}}, DistributedArrays.DArray{Array{TF, 1}, 1, Array{Array{TF, 1}, 1}}, Array{Any, 1}}, Union{Vector{Array{TF, 2}}, Vector{SparseMatrixCSC{TF, TI}}, Vector{joAbstractLinearOperator{TF, TF}}, Vector{Union{Array{TF, 2}, SparseMatrixCSC{TF, TI}, joAbstractLinearOperator{TF, TF}}}}, Union{Vector{Union{SparseMatrixCSC{TF, TI}, JOLI.joAbstractLinearOperator{TF, TF}}}, DistributedArrays.DArray{Union{JOLI.joAbstractLinearOperator{TF, TF}, SparseMatrixCSC{TF, TI}}, 1, Array{Union{JOLI.joAbstractLinearOperator{TF, TF}, SparseMatrixCSC{TF, TI}}, 1}}}, Any, Union{Vector{Any}, DistributedArrays.DArray{Any, 1, Array{Any, 1}}}, Any, Integer, Vector{Real}, TF, String, Integer, Bool, Bool, Bool, Vector{TF}, Bool, Any, Bool, Any} where TI <: Integer) where TF <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:TI, :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:TF, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/SetIntersectionProjection.jl
src/PARSDMM_precompute_distribute.jl,PARSDMM_precompute_distribute,mtsig,"(Tuple{Vector{Union{SparseMatrixCSC{TF, TI}, JOLI.joAbstractLinearOperator{TF, TF}}}, Any, Any, Any} where TI <: Integer) where TF <: Real","(Tuple{Vector{Union{SparseMatrixCSC{TF, TI}, JOLI.joAbstractLinearOperator{TF, TF}}}, Any, Any, Any} where TI <: Integer) where TF <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:TI, :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:TF, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/SetIntersectionProjection.jl
src/PARSDMM_precompute_distribute_Minkowski.jl,PARSDMM_precompute_distribute_Minkowski,mtsig,"(Tuple{Vector{Union{SparseMatrixCSC{TF, TI}, joAbstractLinearOperator{TF, TF}}}, Vector{Union{SparseMatrixCSC{TF, TI}, joAbstractLinearOperator{TF, TF}}}, Vector{Union{SparseMatrixCSC{TF, TI}, joAbstractLinearOperator{TF, TF}}}, Any, Any, Any, Any, Any} where TI <: Integer) where TF <: Real","(Tuple{Vector{Union{SparseMatrixCSC{TF, TI}, joAbstractLinearOperator{TF, TF}}}, Vector{Union{SparseMatrixCSC{TF, TI}, joAbstractLinearOperator{TF, TF}}}, Vector{Union{SparseMatrixCSC{TF, TI}, joAbstractLinearOperator{TF, TF}}}, Any, Any, Any, Any, Any} where TI <: Integer) where TF <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:TI, :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:TF, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/SetIntersectionProjection.jl
src/Q_update!.jl,Q_update!,mtsig,"(Tuple{Union{Array{TF, 2}, SparseMatrixCSC{TF, Int64}, joAbstractLinearOperator{TF, TF}}, Union{Vector{Array{TF, 2}}, Vector{SparseMatrixCSC{TF, TI}}, Vector{joAbstractLinearOperator{TF, TF}}, Vector{Union{Array{TF, 2}, SparseMatrixCSC{TF, TI}, joAbstractLinearOperator{TF, TF}}}}, Any, Vector{TF}, Vector{TI}, Any, Integer, Any} where TI <: Integer) where TF <: Real","(Tuple{Union{Array{TF, 2}, SparseMatrixCSC{TF, Int64}, joAbstractLinearOperator{TF, TF}}, Union{Vector{Array{TF, 2}}, Vector{SparseMatrixCSC{TF, TI}}, Vector{joAbstractLinearOperator{TF, TF}}, Vector{Union{Array{TF, 2}, SparseMatrixCSC{TF, TI}, joAbstractLinearOperator{TF, TF}}}}, Any, Vector{TF}, Vector{TI}, Any, Integer, Any} where TI <: Integer) where TF <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:TI, :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:TF, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/SetIntersectionProjection.jl
src/compute_relative_feasibility.jl,compute_relative_feasibility,mtsig,"(Tuple{Vector{TF}, Vector{TF}, Vector{Union{SparseMatrixCSC{TF, TI}, JOLI.joAbstractLinearOperator{TF, TF}}}, Any} where TI <: Integer) where TF <: Real","(Tuple{Vector{TF}, Vector{TF}, Vector{Union{SparseMatrixCSC{TF, TI}, JOLI.joAbstractLinearOperator{TF, TF}}}, Any} where TI <: Integer) where TF <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:TI, :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:TF, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/SetIntersectionProjection.jl
src/rhs_compose.jl,rhs_compose,mtsig,"(Tuple{Vector{TF}, Union{Vector{Vector{TF}}, DistributedArrays.DArray{Array{TF, 1}, 1, Array{Array{TF, 1}, 1}}}, Union{Vector{Vector{TF}}, DistributedArrays.DArray{Array{TF, 1}, 1, Array{Array{TF, 1}, 1}}}, Union{Vector{TF}, DistributedArrays.DArray{TF, 1, Array{TF, 1}}}, Union{Vector{Union{SparseMatrixCSC{TF, TI}, JOLI.joAbstractLinearOperator{TF, TF}}}, DistributedArrays.DArray{Union{JOLI.joAbstractLinearOperator{TF, TF}, SparseMatrixCSC{TF, TI}}, 1, Array{Union{JOLI.joAbstractLinearOperator{TF, TF}, SparseMatrixCSC{TF, TI}}, 1}}}, Integer, Bool, Bool} where TI <: Integer) where TF <: Real","(Tuple{Vector{TF}, Union{Vector{Vector{TF}}, DistributedArrays.DArray{Array{TF, 1}, 1, Array{Array{TF, 1}, 1}}}, Union{Vector{Vector{TF}}, DistributedArrays.DArray{Array{TF, 1}, 1, Array{Array{TF, 1}, 1}}}, Union{Vector{TF}, DistributedArrays.DArray{TF, 1, Array{TF, 1}}}, Union{Vector{Union{SparseMatrixCSC{TF, TI}, JOLI.joAbstractLinearOperator{TF, TF}}}, DistributedArrays.DArray{Union{JOLI.joAbstractLinearOperator{TF, TF}, SparseMatrixCSC{TF, TI}}, 1, Array{Union{JOLI.joAbstractLinearOperator{TF, TF}, SparseMatrixCSC{TF, TI}}, 1}}}, Integer, Bool, Bool} where TI <: Integer) where TF <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:TI, :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:TF, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/SetIntersectionProjection.jl
src/hypergraph.jl,Hypergraph,mtsig,"(((Tuple{AbstractMatrix{Union{T, Nothing}}, Vector{Union{Nothing, V}}, Vector{Union{Nothing, E}}} where D <: AbstractDict{Int, T}) where E) where V) where T <: Real","(((Tuple{AbstractMatrix{Union{T, Nothing}}, Vector{Union{Nothing, V}}, Vector{Union{Nothing, E}}} where D <: AbstractDict{Int, T}) where E) where V) where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:D, :(Union{}), :(AbstractDict{Int, T}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:E, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCWhere, JuliaSub.TCWhere), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/SimpleHypergraphs.jl
src/hypergraph.jl,Hypergraph,mtsig,"((Tuple{AbstractMatrix{Union{T, Nothing}}, Vector{Union{Nothing, V}}, Vector{Union{Nothing, E}}} where E) where V) where T <: Real","((Tuple{AbstractMatrix{Union{T, Nothing}}, Vector{Union{Nothing, V}}, Vector{Union{Nothing, E}}} where E) where V) where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:E, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/SimpleHypergraphs.jl
src/hypergraph.jl,Hypergraph,mtsig,"(Tuple{AbstractMatrix{Union{T, Nothing}}, Vector{Union{Nothing, V}}} where V) where T <: Real","(Tuple{AbstractMatrix{Union{T, Nothing}}, Vector{Union{Nothing, V}}} where V) where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:V, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/SimpleHypergraphs.jl
src/hypergraph.jl,Hypergraph,mtsig,"Tuple{AbstractMatrix{Union{T, Nothing}}} where T <: Real","Tuple{AbstractMatrix{Union{T, Nothing}}} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/SimpleHypergraphs.jl
src/hypergraph.jl,Hypergraph,mtsig,"Tuple{AbstractMatrix{Union{T, Nothing}}} where T <: Real","Tuple{AbstractMatrix{Union{T, Nothing}}} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/SimpleHypergraphs.jl
src/lib/types.jl,SimpleSDMPredictor,mtsig,"(Tuple{Matrix{Union{Nothing, T}}, K, K, K, K} where K <: AbstractFloat) where T","(Tuple{Matrix{Union{Nothing, T}}, K, K, K, K} where K <: AbstractFloat) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:K, :(Union{}), :AbstractFloat, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple), list(JuliaSub.TCTuple), list(JuliaSub.TCTuple), list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,true,true,false,../data/ta-info/all/SimpleSDMLayers.jl
src/lib/types.jl,SimpleSDMResponse,mtsig,"(Tuple{Matrix{Union{Nothing, T}}, K, K, K, K} where K <: AbstractFloat) where T","(Tuple{Matrix{Union{Nothing, T}}, K, K, K, K} where K <: AbstractFloat) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:K, :(Union{}), :AbstractFloat, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple), list(JuliaSub.TCTuple), list(JuliaSub.TCTuple), list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,true,true,false,../data/ta-info/all/SimpleSDMLayers.jl
src/lib/types.jl,$simplesdm_type,mtsig,"Tuple{Matrix{Union{Nothing, T}}} where T","Tuple{Matrix{Union{Nothing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/SimpleSDMLayers.jl
src/fsort-missing.jl,fsort,mtsig,"Tuple{AbstractVector{Union{T, Missing}}, Any} where T","Tuple{AbstractVector{Union{T, Missing}}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/SortingLab.jl
src/fsort-missing.jl,fsort,mtsig,"Tuple{AbstractVector{Union{T, Missing}}, Any} where T","Tuple{AbstractVector{Union{T, Missing}}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/SortingLab.jl
src/core/utils.jl,getprototype,mtsig,"Tuple{Type{NamedTuple{N, T} where T <: Tuple}} where N","Tuple{Type{NamedTuple{N, T} where T <: Tuple}} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Tuple, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Soss.jl
src/StataDTAFiles.jl,readfield,mtsig,"Tuple{ByteOrderIO, Type{Union{Missing, T}}} where T","Tuple{ByteOrderIO, Type{Union{Missing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/StataDTAFiles.jl
src/base_types.jl,attribute_fields,mtsig,"Tuple{Type{Union{Missing, T}}} where T","Tuple{Type{Union{Missing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/StationXML.jl
src/base_types.jl,element_fields,mtsig,"Tuple{Type{Union{Missing, T}}} where T","Tuple{Type{Union{Missing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/StationXML.jl
src/base_types.jl,text_field,mtsig,"Tuple{Type{Union{Missing, T}}} where T","Tuple{Type{Union{Missing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/StationXML.jl
src/io.jl,parse_node,mtsig,"Tuple{Type{Union{Missing, T}}, EzXML.Node, Bool} where T","Tuple{Type{Union{Missing, T}}, EzXML.Node, Bool} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/StationXML.jl
src/io.jl,local_parse,mtsig,"Tuple{Type{Union{Missing, T}}, AbstractString} where T","Tuple{Type{Union{Missing, T}}, AbstractString} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/StationXML.jl
src/types/decisions/functions/operators.jl,MOIU.promote_operation,mtsig,"Tuple{typeof(vcat), Type{T}, Type{<:AffineDecisionLike{T}}, Vararg{Type{<:AffineLike{T}}}} where T","Tuple{typeof(vcat), Type{T}, Type{var""##ANON_TV#3114""} where var""##ANON_TV#3114"" <: AffineDecisionLike{T}, Vararg{Type{var""##ANON_TV#3115""} where var""##ANON_TV#3115"" <: AffineLike{T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3114""), :(Union{}), :(AffineDecisionLike{T}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3115""), :(Union{}), :(AffineLike{T}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/StochasticPrograms.jl
src/support.jl,*,mtsig,"(((Tuple{Union{C1, S1}, Vararg{Union{C2, S2}}} where S2 <: Str) where S1 <: Str) where C2 <: Chr) where C1 <: Chr","(((Tuple{Union{C1, S1}, Vararg{Union{C2, S2}}} where S2 <: Str) where S1 <: Str) where C2 <: Chr) where C1 <: Chr","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:S2, :(Union{}), :Str, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S1, :(Union{}), :Str, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:C2, :(Union{}), :Chr, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:C1, :(Union{}), :Chr, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/StrBase.jl
src/traits.jl,is_valid,mtsig,"((Tuple{Type{Str{<:CSE{CS1}}}, T} where CS1) where T <: Str{<:CSE{CS2}}) where CS2","((Tuple{Type{Str{var""##ANON_TV#4895""} where var""##ANON_TV#4895"" <: CSE{CS1}}, T} where CS1) where T <: (Str{var""##ANON_TV#4896""} where var""##ANON_TV#4896"" <: CSE{CS2})) where CS2","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#4896""), :(Union{}), :(CSE{CS2}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCUpBnd, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#4895""), :(Union{}), :(CSE{CS1}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:CS1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :(Str{var""##ANON_TV#4896""} where var""##ANON_TV#4896"" <: CSE{CS2}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:CS2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCUpBnd)], nil(JuliaSub.TypeConstructor))], false)",false,false,5,true,true,true,true,false,../data/ta-info/all/StrBase.jl
src/traits.jl,is_valid,mtsig,"(Tuple{Type{Str{<:CSE{CS}}}, T} where T <: Str{<:CSE{CS}}) where CS","(Tuple{Type{Str{var""##ANON_TV#4897""} where var""##ANON_TV#4897"" <: CSE{CS}}, T} where T <: (Str{var""##ANON_TV#4898""} where var""##ANON_TV#4898"" <: CSE{CS})) where CS","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#4898""), :(Union{}), :(CSE{CS}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCUpBnd, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#4897""), :(Union{}), :(CSE{CS}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :(Str{var""##ANON_TV#4898""} where var""##ANON_TV#4898"" <: CSE{CS}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:CS, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCUpBnd), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/StrBase.jl
src/mapreduce.jl,Base.map,mtsig,"(Tuple{F, AbstractStridedView{<:Any, N}, Vararg{AbstractStridedView{<:Any, N}}} where N) where F","(Tuple{F, AbstractStridedView{var""##ANON_TV#519"", N} where var""##ANON_TV#519"" <: Any, Vararg{AbstractStridedView{var""##ANON_TV#520"", N} where var""##ANON_TV#520"" <: Any}} where N) where F","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#519""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#520""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:F, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/Strided.jl
src/mapreduce.jl,Base.map!,mtsig,"(Tuple{F, AbstractStridedView{<:Any, N}, AbstractStridedView{<:Any, N}, Vararg{AbstractStridedView{<:Any, N}}} where N) where F","(Tuple{F, AbstractStridedView{var""##ANON_TV#521"", N} where var""##ANON_TV#521"" <: Any, AbstractStridedView{var""##ANON_TV#522"", N} where var""##ANON_TV#522"" <: Any, Vararg{AbstractStridedView{var""##ANON_TV#523"", N} where var""##ANON_TV#523"" <: Any}} where N) where F","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#521""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#522""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#523""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:F, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,5,true,false,false,true,false,../data/ta-info/all/Strided.jl
src/mapreduce.jl,Base.mapreducedim!,mtsig,"Tuple{Any, Any, AbstractStridedView{<:Any, N}, AbstractStridedView{<:Any, N}, Vararg{AbstractStridedView{<:Any, N}}} where N","Tuple{Any, Any, AbstractStridedView{var""##ANON_TV#524"", N} where var""##ANON_TV#524"" <: Any, AbstractStridedView{var""##ANON_TV#525"", N} where var""##ANON_TV#525"" <: Any, Vararg{AbstractStridedView{var""##ANON_TV#526"", N} where var""##ANON_TV#526"" <: Any}} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#524""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#525""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#526""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/Strided.jl
src/StructMapping.jl,_convertdict,mtsig,"Tuple{Type{Union{T, Nothing}}, Any} where T","Tuple{Type{Union{T, Nothing}}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/StructMapping.jl
src/StructMapping.jl,_convertdict,mtsig,"Tuple{Type{Union{T, Nothing}}, AbstractDict} where T","Tuple{Type{Union{T, Nothing}}, AbstractDict} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/StructMapping.jl
src/cox.jl,promote_nonmissing,mtsig,"Tuple{Type{Union{T, Missing}}} where T","Tuple{Type{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Survival.jl
src/optimization.jl,PositiveFactorizations.floattype,mtsig,"Tuple{Type{Union{T, Missing}}} where T","Tuple{Type{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Survival.jl
src/json.jl,from_json,mtsig,"Tuple{Type{Union{Nothing, T}}, Dict{String, Any}} where T","Tuple{Type{Union{Nothing, T}}, Dict{String, Any}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Swagger.jl
src/transforms/filter.jl,_nonmissing,mtsig,"Tuple{Type{Union{Missing, T}}, Any} where T","Tuple{Type{Union{Missing, T}}, Any} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/TableTransforms.jl
src/models/missings.jl,AbstractGPs.logpdf,mtsig,"Tuple{LGSSM, AbstractVector{Union{Missing, T}}} where T <: Union{<:AbstractVector, <:Real}","Tuple{LGSSM, AbstractVector{Union{Missing, T}}} where T <: ((Union{var""##ANON_TV#1302"", var""##ANON_TV#1303""} where var""##ANON_TV#1302"" <: AbstractVector) where var""##ANON_TV#1303"" <: Real)","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1302""), :(Union{}), :AbstractVector, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion)], list(JuliaSub.TCWhere, JuliaSub.TCUpBnd)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1303""), :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCWhere)], list(JuliaSub.TCUpBnd)), JuliaSub.TyVarSummary(:T, :(Union{}), :((Union{var""##ANON_TV#1302"", var""##ANON_TV#1303""} where var""##ANON_TV#1302"" <: AbstractVector) where var""##ANON_TV#1303"" <: Real), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/TemporalGPs.jl
src/models/missings.jl,_filter,mtsig,"Tuple{LGSSM, AbstractVector{Union{Missing, T}}} where T","Tuple{LGSSM, AbstractVector{Union{Missing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/TemporalGPs.jl
src/models/missings.jl,posterior,mtsig,"Tuple{LGSSM, AbstractVector{Union{Missing, T}}} where T","Tuple{LGSSM, AbstractVector{Union{Missing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/TemporalGPs.jl
src/models/missings.jl,fill_in_missings,mtsig,"Tuple{Vector, AbstractVector{Union{Missing, T}}} where T","Tuple{Vector, AbstractVector{Union{Missing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/TemporalGPs.jl
src/models/missings.jl,_fill_in_missings,mtsig,"Tuple{Vector, AbstractVector{Union{Missing, T}}} where T","Tuple{Vector, AbstractVector{Union{Missing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/TemporalGPs.jl
src/models/missings.jl,fill_in_missings,mtsig,"Tuple{Fill, AbstractVector{Union{Missing, T}}} where T","Tuple{Fill, AbstractVector{Union{Missing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/TemporalGPs.jl
src/models/missings.jl,Zygote._pullback,mtsig,"Tuple{AContext, typeof(_fill_in_missings), Vector, AbstractVector{Union{T, Missing}}} where T","Tuple{AContext, typeof(_fill_in_missings), Vector, AbstractVector{Union{T, Missing}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/TemporalGPs.jl
src/sectors/fermions.jl,Base.isreal,mtsig,"Tuple{Type{Fermion{<:Any, I}}} where I <: Sector","Tuple{Type{Fermion{var""##ANON_TV#1092"", I} where var""##ANON_TV#1092"" <: Any}} where I <: Sector","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1092""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:I, :(Union{}), :Sector, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/TensorKit.jl
src/spaces/gradedspace.jl,GradedSpace,mtsig,"Tuple{Tuple{Vararg{Pair{I, <:Integer}}}, Bool} where I <: Sector","Tuple{Tuple{Vararg{Pair{I, var""##ANON_TV#1143""} where var""##ANON_TV#1143"" <: Integer}}, Bool} where I <: Sector","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1143""), :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:I, :(Union{}), :Sector, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/TensorKit.jl
src/spaces/gradedspace.jl,GradedSpace,mtsig,"Tuple{Vararg{Pair{I, <:Integer}}, Bool} where I <: Sector","Tuple{Vararg{Pair{I, var""##ANON_TV#1144""} where var""##ANON_TV#1144"" <: Integer}, Bool} where I <: Sector","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1144""), :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:I, :(Union{}), :Sector, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/TensorKit.jl
src/TensorTrainFactor.jl,factorkp,mtsig,"((Tuple{Union{Factor{T, N}, Tuple{Factor{T, N}, Int}}, Vararg{Union{Factor{T, N}, Tuple{Factor{T, N}, Int}}, M}} where M) where N) where T <: Number","((Tuple{Union{Factor{T, N}, Tuple{Factor{T, N}, Int}}, Vararg{Union{Factor{T, N}, Tuple{Factor{T, N}, Int}}, M}} where M) where N) where T <: Number","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:M, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/TensorRefinement.jl
src/TensorTrainFactorization.jl,deckp,mtsig,"((Tuple{Union{Dec{T, N}, Tuple{Dec{T, N}, Int}}, Vararg{Union{Dec{T, N}, Tuple{Dec{T, N}, Int}}, M}} where M) where N) where T <: Number","((Tuple{Union{Dec{T, N}, Tuple{Dec{T, N}, Int}}, Vararg{Union{Dec{T, N}, Tuple{Dec{T, N}, Int}}, M}} where M) where N) where T <: Number","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:M, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCUnion, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/TensorRefinement.jl
src/tensor.jl,contract,mtsig,"Tuple{Array{AbstractArray{<:Number, D}, 1}, Any} where D","Tuple{Array{AbstractArray{var""##ANON_TV#3039"", D} where var""##ANON_TV#3039"" <: Number, 1}, Any} where D","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3039""), :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:D, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/TensorToolbox.jl
src/Tensor.jl,Base.:($op),mtsig,"(Tuple{Type{Tensor{S, T, N} where T}} where N) where S","(Tuple{Type{Tensor{S, T, N} where T}} where N) where S","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/Tensorial.jl
src/Tensor.jl,Base.:($op),mtsig,"((Tuple{Type{Tensor{S, T, N, L} where T}} where L) where N) where S","((Tuple{Type{Tensor{S, T, N, L} where T}} where L) where N) where S","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/Tensorial.jl
src/field.jl,fromtype,mtsig,"Tuple{Type{Union{Missing, T}}} where T","Tuple{Type{Union{Missing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/TextParse.jl
src/foreach.jl,ThreadsX.foreach,mtsig,"Tuple{Any, AbstractArray{<:Any, N}, Vararg{AbstractArray{<:Any, N}}, Vararg{Any}} where N","Tuple{Any, AbstractArray{var""##ANON_TV#3101"", N} where var""##ANON_TV#3101"" <: Any, Vararg{AbstractArray{var""##ANON_TV#3102"", N} where var""##ANON_TV#3102"" <: Any}, Vararg{Any}} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3101""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3102""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/ThreadsX.jl
src/map.jl,ThreadsX.map,mtsig,"Tuple{Any, AbstractArray{<:Any, N}, Vararg{AbstractArray{<:Any, N}}, Vararg{Any}} where N","Tuple{Any, AbstractArray{var""##ANON_TV#3103"", N} where var""##ANON_TV#3103"" <: Any, Vararg{AbstractArray{var""##ANON_TV#3104"", N} where var""##ANON_TV#3104"" <: Any}, Vararg{Any}} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3103""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3104""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/ThreadsX.jl
src/core/utils.jl,getprototype,mtsig,"Tuple{Type{NamedTuple{N, T} where T <: Tuple}} where N","Tuple{Type{NamedTuple{N, T} where T <: Tuple}} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Tuple, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Tilde.jl
src/core.jl,_real_state_type,mtsig,"Tuple{Type{Union{T, _FakeState}}} where T","Tuple{Type{Union{T, _FakeState}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Transducers.jl
src/core.jl,_nonidtype,mtsig,"(Tuple{Type{Union{S, T}}} where S <: InferableInit) where T","(Tuple{Type{Union{S, T}}} where S <: InferableInit) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:S, :(Union{}), :InferableInit, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Transducers.jl
src/groupby.jl,_typesubtract_impl,mtsig,"(Tuple{Type{T}, Type{Union{T, S}}} where T) where S","(Tuple{Type{T}, Type{Union{T, S}}} where T) where S","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/Transducers.jl
src/Tries.jl,Trie,mtsig,"(Tuple{Vararg{Pair{NTuple{N, K}, T} where N}} where T) where K","(Tuple{Vararg{Pair{NTuple{N, K}, T} where N}} where T) where K","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,false,false,false,../data/ta-info/all/Tries.jl
src/Tries.jl,Trie,mtsig,"Tuple{Vararg{Pair{NTuple{N, K}, <:Any} where N}} where K","Tuple{Vararg{(Pair{NTuple{N, K}, var""##ANON_TV#1695""} where var""##ANON_TV#1695"" <: Any) where N}} where K","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1695""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/Tries.jl
src/reversible/LogLikeNumbers/base.jl,NiLang.loaddata,mtsig,"Tuple{Type{Array{<:LogLikeNumber{GVar{T, T}}}}, Array{<:LogLikeNumber{T}}} where T","Tuple{Type{Array{var""##ANON_TV#3215""} where var""##ANON_TV#3215"" <: LogLikeNumber{GVar{T, T}}}, Array{var""##ANON_TV#3216""} where var""##ANON_TV#3216"" <: LogLikeNumber{T}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3215""), :(Union{}), :(LogLikeNumber{GVar{T, T}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3216""), :(Union{}), :(LogLikeNumber{T}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,false,false,true,false,../data/ta-info/all/TropicalYao.jl
lib/TryExperimental/src/concrete.jl,Base.convert,mtsig,"Tuple{Type{ConcreteResult{<:Any, E}}, Err} where E","Tuple{Type{ConcreteResult{var""##ANON_TV#1210"", E} where var""##ANON_TV#1210"" <: Any}, Err} where E","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1210""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:E, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Try.jl
src/concrete.jl,Base.convert,mtsig,"Tuple{Type{ConcreteResult{<:Any, E}}, Err} where E","Tuple{Type{ConcreteResult{var""##ANON_TV#1479"", E} where var""##ANON_TV#1479"" <: Any}, Err} where E","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1479""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:E, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/TryExperimental.jl
src/TypeInstances_DataTypesBasic/Either.jl,TypeClasses.neutral,mtsig,"(Tuple{Type{Either{L, <:UR}}} where UR) where L","(Tuple{Type{Either{L, var""##ANON_TV#1686""} where var""##ANON_TV#1686"" <: UR}} where UR) where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1686""), :(Union{}), :UR, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:UR, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/TypeClasses.jl
src/TypeInstances_DataTypesBasic/Either.jl,TypeClasses.neutral,mtsig,Tuple{Type{Option{<:UT}}} where UT,"Tuple{Type{Option{var""##ANON_TV#1687""} where var""##ANON_TV#1687"" <: UT}} where UT","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1687""), :(Union{}), :UT, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:UT, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/TypeClasses.jl
src/TypeInstances_DataTypesBasic/Either.jl,TypeClasses.pure,mtsig,"(Tuple{Type{Either{L, <:UR}}, Any} where UR) where L","(Tuple{Type{Either{L, var""##ANON_TV#1688""} where var""##ANON_TV#1688"" <: UR}, Any} where UR) where L","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1688""), :(Union{}), :UR, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:UR, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/TypeClasses.jl
src/TypeInstances_DataTypesBasic/Either.jl,TypeClasses.pure,mtsig,"(Tuple{Type{Either{<:UL, R}}, Any} where R) where UL","(Tuple{Type{Either{var""##ANON_TV#1689"", R} where var""##ANON_TV#1689"" <: UL}, Any} where R) where UL","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1689""), :(Union{}), :UL, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:R, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:UL, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/TypeClasses.jl
src/TypeInstances_DataTypesBasic/Either.jl,TypeClasses.pure,mtsig,"(Tuple{Type{Either{<:UL, <:UR}}, Any} where UR) where UL","(Tuple{Type{(Either{var""##ANON_TV#1690"", var""##ANON_TV#1691""} where var""##ANON_TV#1690"" <: UL) where var""##ANON_TV#1691"" <: UR}, Any} where UR) where UL","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1690""), :(Union{}), :UL, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1691""), :(Union{}), :UR, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:UR, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:UL, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUpBnd, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/TypeClasses.jl
src/promotion.jl,MP.promote_rule,mtsig,"Tuple{Type{Term{C, M1} where C}, Type{<:MonomialLike}} where M1","Tuple{Type{Term{C, M1} where C}, Type{var""##ANON_TV#3240""} where var""##ANON_TV#3240"" <: MonomialLike} where M1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:C, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3240""), :(Union{}), :MonomialLike, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:M1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/TypedPolynomials.jl
src/promotion.jl,MP.promote_rule,mtsig,"Tuple{Type{<:MonomialLike}, Type{Term{C, M2} where C}} where M2","Tuple{Type{var""##ANON_TV#3241""} where var""##ANON_TV#3241"" <: MonomialLike, Type{Term{C, M2} where C}} where M2","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3241""), :(Union{}), :MonomialLike, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:C, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:M2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/TypedPolynomials.jl
src/promotion.jl,MP.promote_rule,mtsig,"((Tuple{Type{Term{C, M1} where C}, Type{Term{T, M2}}} where M2) where M1) where T","((Tuple{Type{Term{C, M1} where C}, Type{Term{T, M2}}} where M2) where M1) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:C, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:M2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:M1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/TypedPolynomials.jl
src/promotion.jl,MP.promote_rule,mtsig,"((Tuple{Type{Term{T, M2}}, Type{Term{C, M1} where C}} where M2) where M1) where T","((Tuple{Type{Term{T, M2}}, Type{Term{C, M1} where C}} where M2) where M1) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:C, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:M2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:M1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/TypedPolynomials.jl
src/promotion.jl,MP.promote_rule,mtsig,"Tuple{Type{<:Polynomial}, Type{Term{C, M} where C}} where M","Tuple{Type{var""##ANON_TV#3242""} where var""##ANON_TV#3242"" <: Polynomial, Type{Term{C, M} where C}} where M","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3242""), :(Union{}), :Polynomial, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:C, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:M, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/TypedPolynomials.jl
src/promotion.jl,MP.promote_rule,mtsig,"Tuple{Type{Term{C, M} where C}, Type{<:Polynomial}} where M","Tuple{Type{Term{C, M} where C}, Type{var""##ANON_TV#3243""} where var""##ANON_TV#3243"" <: Polynomial} where M","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:C, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3243""), :(Union{}), :Polynomial, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:M, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/TypedPolynomials.jl
src/promotion.jl,MP.promote_rule_constant,mtsig,"Tuple{Type, Type{Term{C, M} where C}} where M","Tuple{Type, Type{Term{C, M} where C}} where M","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:C, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:M, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/TypedPolynomials.jl
src/promotion.jl,Base.convert,mtsig,"Tuple{Type{Term{C, M} where C}, MonomialLike} where M","Tuple{Type{Term{C, M} where C}, MonomialLike} where M","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:C, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:M, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/TypedPolynomials.jl
src/DictTable.jl,Dictionaries.empty_type,mtsig,"(Tuple{Type{DictTable{<:Any, <:Any, <:Any, Inds}}, Type{I}} where Inds) where I","(Tuple{Type{((DictTable{var""##ANON_TV#5228"", var""##ANON_TV#5229"", var""##ANON_TV#5230"", Inds} where var""##ANON_TV#5228"" <: Any) where var""##ANON_TV#5229"" <: Any) where var""##ANON_TV#5230"" <: Any}, Type{I}} where Inds) where I","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#5228""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#5229""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#5230""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:Inds, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:I, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,5,true,true,true,true,false,../data/ta-info/all/TypedTables.jl
src/FlexTable.jl,FlexTable,mtsig,"Tuple{NamedTuple{<:Any, <:Tuple{Vararg{AbstractArray{<:Any, N}}}}} where N","Tuple{(NamedTuple{var""##ANON_TV#5250"", var""##ANON_TV#5251""} where var""##ANON_TV#5250"" <: Any) where var""##ANON_TV#5251"" <: Tuple{Vararg{AbstractArray{var""##ANON_TV#5252"", N} where var""##ANON_TV#5252"" <: Any}}} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#5252""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCUpBnd, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#5250""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#5251""), :(Union{}), :(Tuple{Vararg{AbstractArray{var""##ANON_TV#5252"", N} where var""##ANON_TV#5252"" <: Any}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCUpBnd, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,true,true,true,false,../data/ta-info/all/TypedTables.jl
src/Table.jl,Base.vcat,mtsig,"Tuple{Table{<:NamedTuple{names}}, Table{<:NamedTuple{names}}, Vararg{Table{<:NamedTuple{names}}}} where names","Tuple{Table{var""##ANON_TV#5292""} where var""##ANON_TV#5292"" <: NamedTuple{names}, Table{var""##ANON_TV#5293""} where var""##ANON_TV#5293"" <: NamedTuple{names}, Vararg{Table{var""##ANON_TV#5294""} where var""##ANON_TV#5294"" <: NamedTuple{names}}} where names","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#5292""), :(Union{}), :(NamedTuple{names}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#5293""), :(Union{}), :(NamedTuple{names}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#5294""), :(Union{}), :(NamedTuple{names}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:names, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/TypedTables.jl
src/Table.jl,Base.hcat,mtsig,"Tuple{Table{<:NamedTuple{names}}, Table{<:NamedTuple{names}}, Vararg{Table{<:NamedTuple{names}}}} where names","Tuple{Table{var""##ANON_TV#5297""} where var""##ANON_TV#5297"" <: NamedTuple{names}, Table{var""##ANON_TV#5298""} where var""##ANON_TV#5298"" <: NamedTuple{names}, Vararg{Table{var""##ANON_TV#5299""} where var""##ANON_TV#5299"" <: NamedTuple{names}}} where names","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#5297""), :(Union{}), :(NamedTuple{names}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#5298""), :(Union{}), :(NamedTuple{names}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#5299""), :(Union{}), :(NamedTuple{names}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:names, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,4,true,false,false,true,false,../data/ta-info/all/TypedTables.jl
src/Table.jl,Base.hvcat,mtsig,"Tuple{Tuple{Vararg{Int}}, Vararg{Table{<:NamedTuple{names}}}} where names","Tuple{Tuple{Vararg{Int}}, Vararg{Table{var""##ANON_TV#5300""} where var""##ANON_TV#5300"" <: NamedTuple{names}}} where names","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#5300""), :(Union{}), :(NamedTuple{names}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:names, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/TypedTables.jl
src/TypedTables.jl,_ndims,mtsig,"Tuple{Type{<:Tuple{Vararg{AbstractArray{<:Any, n}}}}} where n","Tuple{Type{var""##ANON_TV#5303""} where var""##ANON_TV#5303"" <: Tuple{Vararg{AbstractArray{var""##ANON_TV#5304"", n} where var""##ANON_TV#5304"" <: Any}}} where n","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#5304""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCUpBnd, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#5303""), :(Union{}), :(Tuple{Vararg{AbstractArray{var""##ANON_TV#5304"", n} where var""##ANON_TV#5304"" <: Any}}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:n, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCUpBnd, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/TypedTables.jl
src/columnops.jl,Broadcast.broadcasted,mtsig,"Tuple{Broadcast.DefaultArrayStyle{N}, typeof(merge), Vararg{Table{<:Any, N}}} where N","Tuple{Broadcast.DefaultArrayStyle{N}, typeof(merge), Vararg{Table{var""##ANON_TV#5307"", N} where var""##ANON_TV#5307"" <: Any}} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#5307""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,false,false,true,false,../data/ta-info/all/TypedTables.jl
src/logarithm.jl,uconvert,mtsig,"(((Tuple{MixedUnits{Gain{L1, S1, <:Real}}, Level{L2, S2}} where S2) where S1) where L2) where L1","(((Tuple{MixedUnits{Gain{L1, S1, var""##ANON_TV#3200""} where var""##ANON_TV#3200"" <: Real}, Level{L2, S2}} where S2) where S1) where L2) where L1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3200""), :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:L1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,5,true,true,true,true,false,../data/ta-info/all/Unitful.jl
src/quantities.jl,zero,mtsig,"Tuple{AbstractArray{Union{T, Missing}}} where T <: AbstractQuantity","Tuple{AbstractArray{Union{T, Missing}}} where T <: AbstractQuantity","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :AbstractQuantity, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Unitful.jl
src/quantities.jl,zero,mtsig,"Tuple{AbstractArray{Union{T, Missing}}} where T <: AbstractQuantity","Tuple{AbstractArray{Union{T, Missing}}} where T <: AbstractQuantity","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :AbstractQuantity, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Unitful.jl
src/utils.jl,unit,mtsig,"Tuple{Type{Union{Missing, T}}} where T","Tuple{Type{Union{Missing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Unitful.jl
src/UnitfulEquivalences.jl,dimtype,mtsig,"Tuple{Type{Union{Quantity{T, D, U}, Level{L, S, Quantity{T, D, U}} where {L, S}} where {T, U}}} where D","Tuple{Type{(Union{Quantity{T, D, U}, (Level{L, S, Quantity{T, D, U}} where L) where S} where T) where U}} where D","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCUnion, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCUnion, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCUnion)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:U, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCUnion, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:D, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCUnion, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,5,true,false,false,false,false,../data/ta-info/all/UnitfulEquivalences.jl
src/Unmarshal.jl,unmarshal,mtsig,"Tuple{Type{Array{E, N} where E}, Union{Vector, AbstractArray}, Bool, Int} where N","Tuple{Type{Array{E, N} where E}, Union{Vector, AbstractArray}, Bool, Int} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:E, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/Unmarshal.jl
src/Unmarshal.jl,unmarshal,mtsig,"Tuple{Type{Union{T, Missing}}, Any, Bool, Int} where T","Tuple{Type{Union{T, Missing}}, Any, Bool, Int} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Unmarshal.jl
src/Unmarshal.jl,unmarshal,mtsig,"Tuple{Type{Union{T, Nothing}}, Nothing, Bool, Int} where T","Tuple{Type{Union{T, Nothing}}, Nothing, Bool, Int} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Unmarshal.jl
src/Unmarshal.jl,unmarshal,mtsig,"Tuple{Type{Union{T, Nothing}}, T, Bool, Int} where T","Tuple{Type{Union{T, Nothing}}, T, Bool, Int} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/Unmarshal.jl
src/lazyjson.jl,unmarshal,mtsig,"Tuple{Type{Union{T, Nothing}}, LazyJSON.Number, Bool, Int} where T <: Number","Tuple{Type{Union{T, Nothing}}, LazyJSON.Number, Bool, Int} where T <: Number","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Unmarshal.jl
src/lazyjson.jl,unmarshal,mtsig,"Tuple{Type{Union{T, Missing}}, LazyJSON.Number, Bool, Int} where T <: Number","Tuple{Type{Union{T, Missing}}, LazyJSON.Number, Bool, Int} where T <: Number","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Unmarshal.jl
src/convert.jl,copy_gt!,mtsig,"Tuple{Union{AbstractMatrix{Union{Missing, T}}, AbstractVector{Union{Missing, T}}}, VCF.Reader, Symbol, Bool, Bool, Bool, String, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}} where T <: Real","Tuple{Union{AbstractMatrix{Union{Missing, T}}, AbstractVector{Union{Missing, T}}}, VCF.Reader, Symbol, Bool, Bool, Bool, String, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/VCFTools.jl
src/convert.jl,copy_gt_trans!,mtsig,"Tuple{Union{AbstractMatrix{Union{Missing, T}}, AbstractVector{Union{Missing, T}}}, VCF.Reader, Symbol, Bool, Bool, Bool, String, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}} where T <: Real","Tuple{Union{AbstractMatrix{Union{Missing, T}}, AbstractVector{Union{Missing, T}}}, VCF.Reader, Symbol, Bool, Bool, Bool, String, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/VCFTools.jl
src/convert.jl,copy_ds!,mtsig,"Tuple{Union{AbstractMatrix{Union{Missing, T}}, AbstractVector{Union{Missing, T}}}, VCF.Reader, String, Symbol, Bool, Bool, Bool, String, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}} where T <: Real","Tuple{Union{AbstractMatrix{Union{Missing, T}}, AbstractVector{Union{Missing, T}}}, VCF.Reader, String, Symbol, Bool, Bool, Bool, String, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/VCFTools.jl
src/convert.jl,copy_ds_trans!,mtsig,"Tuple{Union{AbstractMatrix{Union{Missing, T}}, AbstractVector{Union{Missing, T}}}, VCF.Reader, String, Symbol, Bool, Bool, Bool, String, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}} where T <: Real","Tuple{Union{AbstractMatrix{Union{Missing, T}}, AbstractVector{Union{Missing, T}}}, VCF.Reader, String, Symbol, Bool, Bool, Bool, String, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}, Union{AbstractVector, Nothing}} where T <: Real","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,false,false,true,false,../data/ta-info/all/VCFTools.jl
src/vecunroll/mappedloadstore.jl,_vload,mtsig,"((Tuple{AbstractStridedPointer, Tuple{Vararg{Union{IntegerIndex, MM, VecUnroll{N, <:Any, <:Any, <:IntegerIndex}}}}, VecUnroll{N, <:Any, Bit}, J, A} where A) where J) where N","((Tuple{AbstractStridedPointer, Tuple{Vararg{Union{IntegerIndex, MM, ((VecUnroll{N, var""##ANON_TV#3217"", var""##ANON_TV#3218"", var""##ANON_TV#3219""} where var""##ANON_TV#3217"" <: Any) where var""##ANON_TV#3218"" <: Any) where var""##ANON_TV#3219"" <: IntegerIndex}}}, VecUnroll{N, var""##ANON_TV#3220"", Bit} where var""##ANON_TV#3220"" <: Any, J, A} where A) where J) where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3217""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3218""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCWhere, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3219""), :(Union{}), :IntegerIndex, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCWhere)], list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3220""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:A, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple)], list(JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:J, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple, JuliaSub.TCWhere)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,7,true,false,false,true,false,../data/ta-info/all/VectorizationBase.jl
src/utils.jl,modify_col!,mtsig,"Tuple{AbstractDataFrame, String, Type{Union{Missing, A}}} where A <: Any","Tuple{AbstractDataFrame, String, Type{Union{Missing, A}}} where A <: Any","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:A, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/WRDSMerger.jl
src/Mesh/abstractmesh.jl,Base.eltype,mtsig,"(Tuple{SType{NodeIterator{<:AbstractMesh{N, T}}}} where T) where N","(Tuple{SType{NodeIterator{var""##ANON_TV#1267""} where var""##ANON_TV#1267"" <: AbstractMesh{N, T}}} where T) where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1267""), :(Union{}), :(AbstractMesh{N, T}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/WavePropBase.jl
src/WeakRefStrings.jl,Base.convert,mtsig,"(Tuple{Type{StringArray{T, N} where T}, AbstractArray{S}} where N) where S <: STR","(Tuple{Type{StringArray{T, N} where T}, AbstractArray{S}} where N) where S <: STR","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :STR, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/WeakRefStrings.jl
src/WeakRefStrings.jl,_setindex!,mtsig,"(Tuple{StringArray{Union{T, Missing}, N}, Missing, Any} where N) where T","(Tuple{StringArray{Union{T, Missing}, N}, Missing, Any} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/WeakRefStrings.jl
src/WeakRefStrings.jl,_setindex!,mtsig,"(Tuple{StringArray{Union{T, Missing}, N}, Missing, Vararg{Any}} where N) where T","(Tuple{StringArray{Union{T, Missing}, N}, Missing, Vararg{Any}} where N) where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/WeakRefStrings.jl
src/WeakRefStrings.jl,Base.push!,mtsig,"Tuple{StringVector{Union{T, Missing}}, Missing} where T","Tuple{StringVector{Union{T, Missing}}, Missing} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/WeakRefStrings.jl
src/WeakRefStrings.jl,Base.insert!,mtsig,"Tuple{StringVector{Union{T, Missing}}, Integer, Missing} where T","Tuple{StringVector{Union{T, Missing}}, Integer, Missing} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/WeakRefStrings.jl
src/WeakValueDicts.jl,WeakValueDict,mtsig,"Tuple{Vararg{Pair{K, V} where K}} where V","Tuple{Vararg{Pair{K, V} where K}} where V","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:K, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:V, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/WeakValueDicts.jl
src/covmatrix.jl,_fit!,mtsig,"(Tuple{WeightedCovMatrix{T1}, AbstractVector{Union{T2, Missing}}, Any} where T2) where T1","(Tuple{WeightedCovMatrix{T1}, AbstractVector{Union{T2, Missing}}, Any} where T2) where T1","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T2, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T1, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/WeightedOnlineStats.jl
test/runtests.jl,missing_to_nan,mtsig,"Tuple{Array{Union{Missing, T}}} where T","Tuple{Array{Union{Missing, T}}} where T","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/WeightedOnlineStats.jl
src/interface.jl,_wildboottest,mtsig,"Tuple{DataType, AbstractVecOrMat, AbstractVecOrMat, AbstractVecOrMat{<:Real}, AbstractVecOrMat{<:Real}, AbstractVecOrMat{<:Real}, AbstractVecOrMat{<:Real}, AbstractVecOrMat, AbstractVecOrMat, Bool, AbstractVecOrMat{<:Integer}, Integer, Integer, Bool, Integer, AbstractVecOrMat{<:Integer}, Integer, AbstractVecOrMat{<:Real}, Bool, Number, Symbol, Bool, Bool, Number, Number, Bool, Bool, Bool, Bool, Bool, Integer, Bool, Symbol, AbstractRNG, Number, Number, Symbol, Integer, Bool, AbstractVecOrMat, AbstractVecOrMat, AbstractMatrix, Union{VecOrMat{S}, VecOrMat{Union{S, Missing}}} where S <: Number, Union{VecOrMat{S}, VecOrMat{Union{S, Missing}}} where S <: Number, Union{VecOrMat{S}, VecOrMat{Union{S, Missing}}} where S <: Number, Symbol, Bool, Bool, Bool}","Tuple{DataType, AbstractVecOrMat, AbstractVecOrMat, AbstractVecOrMat{var""##ANON_TV#1523""} where var""##ANON_TV#1523"" <: Real, AbstractVecOrMat{var""##ANON_TV#1524""} where var""##ANON_TV#1524"" <: Real, AbstractVecOrMat{var""##ANON_TV#1525""} where var""##ANON_TV#1525"" <: Real, AbstractVecOrMat{var""##ANON_TV#1526""} where var""##ANON_TV#1526"" <: Real, AbstractVecOrMat, AbstractVecOrMat, Bool, AbstractVecOrMat{var""##ANON_TV#1527""} where var""##ANON_TV#1527"" <: Integer, Integer, Integer, Bool, Integer, AbstractVecOrMat{var""##ANON_TV#1528""} where var""##ANON_TV#1528"" <: Integer, Integer, AbstractVecOrMat{var""##ANON_TV#1529""} where var""##ANON_TV#1529"" <: Real, Bool, Number, Symbol, Bool, Bool, Number, Number, Bool, Bool, Bool, Bool, Bool, Integer, Bool, Symbol, AbstractRNG, Number, Number, Symbol, Integer, Bool, AbstractVecOrMat, AbstractVecOrMat, AbstractMatrix, Union{VecOrMat{S}, VecOrMat{Union{S, Missing}}} where S <: Number, Union{VecOrMat{S}, VecOrMat{Union{S, Missing}}} where S <: Number, Union{VecOrMat{S}, VecOrMat{Union{S, Missing}}} where S <: Number, Symbol, Bool, Bool, Bool}","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1523""), :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1524""), :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1525""), :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1526""), :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1527""), :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1528""), :(Union{}), :Integer, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1529""), :(Union{}), :Real, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple)), JuliaSub.TyVarSummary(:S, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion)], list(JuliaSub.TCTuple)), JuliaSub.TyVarSummary(:S, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion)], list(JuliaSub.TCTuple)), JuliaSub.TyVarSummary(:S, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion), list(JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCUnion)], list(JuliaSub.TCTuple))], false)",false,false,10,true,false,false,true,false,../data/ta-info/all/WildBootTests.jl
lib/YaoBlocks/src/composite/chain.jl,chain,mtsig,"Tuple{Vararg{Union{AbstractBlock{D}, Function}}} where D","Tuple{Vararg{Union{AbstractBlock{D}, Function}}} where D","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:D, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/Yao.jl
lib/YaoBlocks/src/composite/kron.jl,KronBlock,mtsig,"Tuple{Int, Vararg{Pair{<:Any, <:AbstractBlock{D}}}} where D","Tuple{Int, Vararg{(Pair{var""##ANON_TV#3287"", var""##ANON_TV#3288""} where var""##ANON_TV#3287"" <: Any) where var""##ANON_TV#3288"" <: AbstractBlock{D}}} where D","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3287""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3288""), :(Union{}), :(AbstractBlock{D}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:D, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/Yao.jl
src/composite/chain.jl,chain,mtsig,"Tuple{Vararg{Union{AbstractBlock{D}, Function}}} where D","Tuple{Vararg{Union{AbstractBlock{D}, Function}}} where D","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:D, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,1,true,true,true,true,false,../data/ta-info/all/YaoBlocks.jl
src/composite/kron.jl,KronBlock,mtsig,"Tuple{Int, Vararg{Pair{<:Any, <:AbstractBlock{D}}}} where D","Tuple{Int, Vararg{(Pair{var""##ANON_TV#2009"", var""##ANON_TV#2010""} where var""##ANON_TV#2009"" <: Any) where var""##ANON_TV#2010"" <: AbstractBlock{D}}} where D","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#2009""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(Symbol(""##ANON_TV#2010""), :(Union{}), :(AbstractBlock{D}), DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:D, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUpBnd, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,3,true,true,true,true,false,../data/ta-info/all/YaoBlocks.jl
src/ZippedArrays.jl,ZippedArray,mtsig,"Tuple{Vararg{AbstractArray{<:Any, N}}} where N","Tuple{Vararg{AbstractArray{var""##ANON_TV#3327"", N} where var""##ANON_TV#3327"" <: Any}} where N","(JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#3327""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))], false)",false,false,2,true,true,true,true,false,../data/ta-info/all/ZippedArrays.jl
