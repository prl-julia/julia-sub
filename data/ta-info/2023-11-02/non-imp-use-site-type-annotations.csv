File,Function,Kind,TypeAnnotation,UnrolledTypeAnnotation,TypeVarsSummary,Error,Warning,VarCnt,HasWhere,VarsUsedOnce,UseSiteVariance,ImprUseSiteVariance,ExistInInv,RestrictedScope,ClosedLowerBound,TrivConsistBounds,Package
test/Utils/UtilsTests.jl,<NOT A FUNSIG>,tyassorann,"Array{Tuple{T, Array{T, N} where N, Bool} where T}","Array{Tuple{T, Array{T, N} where N, Bool} where T}","JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCInvar)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCTuple)], list(JuliaSub.TCInvar))]",false,false,2,true,false,false,false,true,true,true,true,data/ta-info/all/Alicorn.jl
src/algorithms/posterior_factorization.jl,PosteriorFactorization,mtsig,"Tuple{Vararg{Union{T, Set{T}, Vector{T}} where T <: Variable}, Any}","Tuple{Vararg{Union{T, Set{T}, Vector{T}} where T <: Variable}, Any}","JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:T, :(Union{}), :Variable, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion), list(JuliaSub.TCInvar, JuliaSub.TCUnion), list(JuliaSub.TCInvar, JuliaSub.TCUnion)], list(JuliaSub.TCInvar, JuliaSub.TCTuple))]",false,false,1,true,false,false,false,true,true,true,true,data/ta-info/all/ForneyLab.jl
src/alignedmapping.jl,<NOT A FUNSIG>,tyassorann,"Dict{K, Union{AbstractArray{<:Number}, AbstractArray{Union{Missing, T}} where T <: Number, DataFrame}}","Dict{K, Union{AbstractArray{var""##ANON_TV#1724""} where var""##ANON_TV#1724"" <: Number, AbstractArray{Union{Missing, T}} where T <: Number, DataFrame}}","JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#1724""), :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCUnion, JuliaSub.TCInvar)), JuliaSub.TyVarSummary(:T, :(Union{}), :Number, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCUnion, JuliaSub.TCInvar)], list(JuliaSub.TCUnion, JuliaSub.TCInvar))]",false,false,2,true,true,false,false,true,false,true,true,data/ta-info/all/Muon.jl
src/Tries.jl,Trie,mtsig,"(Tuple{Vararg{Pair{NTuple{N, K}, T} where N}} where T) where K","(Tuple{Vararg{Pair{NTuple{N, K}, T} where N}} where T) where K","JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], list(JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)], nil(JuliaSub.TypeConstructor))]",false,false,3,true,true,false,false,true,false,true,true,data/ta-info/all/Tries.jl
src/Tries.jl,Trie,mtsig,"Tuple{Vararg{Pair{NTuple{N, K}, <:Any} where N}} where K","Tuple{Vararg{(Pair{NTuple{N, K}, var""##ANON_TV#4719""} where var""##ANON_TV#4719"" <: Any) where N}} where K","JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(Symbol(""##ANON_TV#4719""), :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:N, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:K, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))]",false,false,3,true,true,false,false,true,false,true,true,data/ta-info/all/Tries.jl
src/UnitfulEquivalences.jl,dimtype,mtsig,"Tuple{Type{Union{Quantity{T, D, U}, Level{L, S, Quantity{T, D, U}} where {L, S}} where {T, U}}} where D","Tuple{Type{(Union{Quantity{T, D, U}, (Level{L, S, Quantity{T, D, U}} where L) where S} where T) where U}} where D","JuliaSub.TyVarSummary[JuliaSub.TyVarSummary(:L, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar)], list(JuliaSub.TCWhere, JuliaSub.TCUnion, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:S, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCWhere)], list(JuliaSub.TCUnion, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:T, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCUnion)], list(JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:U, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCWhere), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCUnion, JuliaSub.TCWhere)], list(JuliaSub.TCInvar, JuliaSub.TCTuple, JuliaSub.TCWhere)), JuliaSub.TyVarSummary(:D, :(Union{}), :Any, DataStructures.LinkedList{JuliaSub.TypeConstructor}[list(JuliaSub.TCInvar, JuliaSub.TCUnion, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple), list(JuliaSub.TCInvar, JuliaSub.TCInvar, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCUnion, JuliaSub.TCWhere, JuliaSub.TCWhere, JuliaSub.TCInvar, JuliaSub.TCTuple)], nil(JuliaSub.TypeConstructor))]",false,false,5,true,false,false,false,true,false,true,true,data/ta-info/all/UnitfulEquivalences.jl
